{"version":3,"sources":["serviceWorker.ts","reportWebVitals.ts","components/Icons.tsx","components/PrintDialog.tsx","components/Monaco.tsx","components/DynamicEditor.tsx","components/EditNote.tsx","lib/clickButton.ts","components/Help.tsx","components/Intro.tsx","lib/renderMarkdown.ts","components/ViewNote.tsx","components/AppendText.tsx","components/Buttons.tsx","components/Menu.tsx","components/Settings.tsx","components/ErrorBoundary.tsx","components/AppendEditor.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","infoColor","foregroundColor","ChevronIconDown","fill","role","className","aria-label","width","height","viewBox","xmlns","d","ChevronIconRight","CloseIcon","CopyIcon","EyeIcon","condition","GearIcon","HelpIcon","MenuIcon","PencilIcon","PlusIcon","fill-rule","clip-rule","PrintIcon","RefreshIcon","UndoIcon","PrintDialog","cancelText","confirmText","helpLink","onCancel","onConfirm","onUndo","title","id","onClick","href","target","rel","MonacoEditorContainerID","MonacoDiffEditorContainerID","self","MonacoEnvironment","getWorkerUrl","_moduleId","label","MonacoEditor","editor","fontSize","language","saveText","tabSize","text","theme","viewMode","divEl","useRef","scrollBeyondLastLine","useEffect","current","monaco","create","parseInt","replace","value","join","autoClosingOvertype","formatOnPaste","formatOnType","wordWrap","wrappingStrategy","onKeyDown","e","keyCode","console","log","code","ctrlKey","preventDefault","onKeyUp","onDidChangeModelContent","getValue","dispose","ref","MonacoDiffEditor","diffEditor","modifiedText","originalModel","createModel","modifiedModel","createDiffEditor","originalEditable","readOnly","setModel","original","modified","onDidChangeContent","YouTubeEmbed","videoId","this","props","attrs","matches","isSelected","src","React","DynamicEditor","handleToggleReadOnly","setState","state","handleChange","debounce","debugMode","onChange","template","undefined","placeholder","readOnlyWriteCheckboxes","defaultValue","scrollTo","hash","autoFocus","embeds","keywords","icon","alt","matcher","url","component","EditNote","handleInputChange","event","onKeyDownEditTextArea","onKeyDownTextArea","keyMap","delete","key","editingMode","EditingModes","useMonacoEditor","useDynamicEditor","monacoEditorLanguage","HtmlElementId","editTextArea","name","rows","spellCheck","Component","defaultProps","clickAppendButton","appendButton","document","getElementById","click","clickEditButton","editButton","clickHelpButton","helpButton","clickMenuButton","menuButton","clickSettingsButton","settingsButton","clickViewButton","viewButton","Help","onToggleShowFeelings","showFeelings","onToggleShowMoreQuestions","showMoreQuestions","onToggleShowFeedback","showFeedback","onToggle","Intro","gfm","require","breaks","math","rehypeKatex","highlight","emoji","externalLinks","toc","footnotes","slug","raw","processor","unified","use","parse","maxDepth","inlineNotes","remark2rehype","allowDangerousHtml","ignoreMissing","rehype2react","createElement","processMarkdown","processSync","result","isLongString","throttle","length","renderLongMarkdown","ViewNote","onToggleShowHelp","renderMarkdown","bypassDebounce","showHelp","printURL","AppendText","type","checked","autoSaveCheckBoxes","handleTextAreaChange","autoSaveAppendText","appendTextToNote","appendTextArea","focus","newLine","newParagraph","set","get","onKeyDownAppendTextArea","appendNewLine","appendNewParagraph","appendRows","HtmlClassName","ChevronToggleButton","caption","CopyButton","EyeButton","messageOn","messageOff","PencilButton","PrintButton","UndoButton","editingModeID","fontEditID","fontSizeID","fontViewID","monacoEditorLanguageID","resetAllSettingsID","saveAsDefaultID","startRegExp","RegExp","cssRegExp","endRegExp","codeRegExp","Settings","handleSelectChange","toggleShowCustomStyles","showCustomStyles","cleanCustomStyles","customStyles","handleSubmit","fontEditMessage","fontViewMessage","fontEdit","fontView","saveAsDefault","loadDefaultSettings","defaultSettings","refreshCustomStyles","clearCustomStyles","clearFontEdit","clearFontSize","clearFontView","clearEditingMode","usePlainText","clearMonacoEditorLanguage","clearSaveAsDefault","clearAllSettings","resetAllSettings","onBlur","clear","componentWillUnmount","useCodeMirror","htmlFor","list","ErrorBoundary","hasError","error","errorInfo","message","children","Menu","clearTooltipTimer","resetMessageTimer","clearTimeout","setTimeout","displayMessageEdit","displayMessageShare","showMessageEdit","showMessageShare","copyToClipboard","textField","body","appendChild","select","execCommand","remove","copyText","copyHtml","renderedNote","firstElementChild","innerHTML","formatText","formattedText","prettier","format","parser","plugins","parserMarkdown","refreshEdit","refreshView","uncheckBoxes","checkedBoxes","test","newText","toggleShowMenu","chevronToggleButton","showMenuOptionsView","toggleShowMenuOptionsView","borderlessMode","on","off","toggleBorderlessMode","fixedHeightMode","toggleFixedHeightMode","fullWidthMode","toggleFullWidthMode","overflowMode","toggleOverflowMode","showMenuOptionsShare","toggleShowMenuOptionsShare","printButton","onConfirmPrintUrl","showMenuOptionsEdit","toggleShowMenuOptionsEdit","initialState","appendMode","appendText","confirmPrintUrl","showAppendix","showHeader","showDiff","settingsMode","last_known_scroll_position","Map","AppendEditor","editorKit","refreshEditorTimer","saveTimer","componentDidMount","onViewMode","loadDefaultMenuState","addEventListener","onScroll","removeEventListener","configureEditorKit","delegate","EditorKitDelegate","setEditorRawText","cancel","flush","savingEditorOptions","loadEditorOptions","loadMetaData","clearUndoHistory","getElementsBySelector","EditorKit","mode","supportsFilesafe","refreshEditor","activateStyles","defaultSettingsString","internal","componentManager","componentDataValueForKey","defaultEditingMode","defaultSettingsObject","JSON","defaultCustomStyles","defaultFontEdit","defaultFontSize","defaultFontView","defaultMonacoEditorLanguage","menuOptionsString","menuOptionsObject","streamContextItem","note","content","appendEditorCustomStyles","appendEditorEditingMode","appendEditorFontEdit","appendEditorFontSize","appendEditorFontView","appendEditorMonacoEditorLanguage","editMode","onEditMode","saveNote","onEditorValueChanged","textToAppend","concat","saveItemWithPresave","skipToBottom","appendCodeMirror","setValue","configureCodeMirror","editCodeMirror","CodeMirror","fromTextArea","autocorrect","autocapitalize","extraKeys","Enter","lineNumbers","lineWrapping","spellcheck","styleSelectedText","tabindex","setSize","editCodeMirrorText","save","cm","appendCodeMirrorText","makeContentEditable","setAttribute","appendix","appendCustom","removeContentEditable","container","toTextArea","onAppendMode","scrollDown","closeEdit","scrollToBottom","toggleShowHelp","showMenu","activateFixedHeader","saveMenuOptions","currentMenuOptions","saveEditorOption","stringify","optionKey","optionValue","setComponentDataValueForKey","onSettingsMode","currentState","removeFixedHeader","undoDialog","onSaveSettings","sheetToBeRemoved","sheetParent","parentNode","removeChild","fontSizeStyle","fontEditStyle","fontViewStyle","sheet","onCancelPrint","onPrintUrlTrue","printRenderedHtml","onPrintUrlFalse","print","goDown","scrollTop","view","scrollIntoView","behavior","block","inline","goUp","scrollToTop","top","skipToTop","scrollY","header","classList","add","fixed","fixedHeader","tabIndex","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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yCACA,uCACA,8CACA,6CACA,kDACA,yCACA,4CACA,yCACA,yCACA,0CACA,gDACA,4CACA,wCACA,6CACA,gDACA,yCACA,0CACA,yCACA,0CACA,gDACA,0CACA,2CACA,4CACA,0CACA,2CACA,yCACA,8CACA,0CACA,2CACA,2CACA,iDACA,4CACA,+CACA,0CACA,2CACA,yCACA,+CACA,8CACA,gDACA,gDACA,yCACA,4CACA,uCACA,2CACA,2CACA,8CACA,sDACA,0CACA,0CACA,wCACA,2CACA,4CACA,0CACA,2CACA,yCACA,yCACA,wCACA,2CACA,mDACA,yCACA,0CACA,gDACA,wCACA,6CACA,yCACA,+CAGJ,cAAC,GAAD,CACEtN,QAASgE,KAAK0K,0BACd5O,MAAM,oDAKd,0BAAS7B,UAAU,wBAAnB,UACE,uBAAOiR,QAASvC,GAAhB,uCACA,sBAAK1O,UAAU,wBAAf,UACE,yBACE8B,GAAI4M,GACJ9F,KAAM8F,GACN9K,MAAOmC,KAAKU,MAAM7D,SAClBiE,SAAUd,KAAKsJ,mBAJjB,UAME,2BACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,6CAEF,cAAC,GAAD,CACEtN,QAASgE,KAAKsK,cACdxO,MAAM,kCAIXkE,KAAKU,MAAM4B,cAAgBC,GAAaC,iBAAmB,CAC1D,0BAASvI,UAAU,wBAAnB,UACE,wBAAOiR,QAASxC,GAAhB,2CACiC,OAEjC,sBAAKzO,UAAU,wBAAf,UACE,uBACEkR,KAAK,QACLpP,GAAI2M,GACJ7F,KAAM6F,GACN7K,MAAOmC,KAAKU,MAAMoJ,SAClBhJ,SAAUd,KAAK+B,kBACf3D,UAAW4B,KAAK5B,UAChBQ,QAASoB,KAAKpB,QACdmI,KAAK,SAEP,cAAC,GAAD,CACE/K,QAASgE,KAAKqK,cACdvO,MAAM,sCAKbkE,KAAKU,MAAM4B,cAAgBC,GAAaE,kBAAoB,CAC3D,0BAASxI,UAAU,wBAAnB,UACE,wBAAOiR,QAAStC,GAAhB,0CACgC,OAEh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","file":"static/js/main.1167e962.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\n\nconst infoColor = 'var(--sn-stylekit-info-color)';\nconst foregroundColor = 'var(--sn-stylekit-foreground-color)';\n\ninterface Icons {\n  condition?: boolean;\n  fill?: string;\n  role: string;\n}\n\nexport const ChevronIconDown: React.FC<Icons> = ({ fill, role }) => (\n  <span className=\"chevron-icon down\">\n    <svg\n      aria-label=\"chevron icon down\"\n      role={role}\n      width=\"20\"\n      height=\"20\"\n      viewBox=\"0 0 20 20\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M6.17622 7.15015L10.0012 10.9751L13.8262 7.15015L15.0012 8.33348L10.0012 13.3335L5.00122 8.33348L6.17622 7.15015Z\"\n        fill={fill ? fill : foregroundColor}\n      />\n    </svg>\n  </span>\n);\n\nexport const ChevronIconRight: React.FC<Icons> = ({ fill, role }) => (\n  <span className=\"chevron-icon right\">\n    <svg\n      aria-label=\"chevron icon down\"\n      role={role}\n      width=\"20\"\n      height=\"20\"\n      viewBox=\"0 0 20 20\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M6.90918 14.0667L10.7342 10.2417L6.90918 6.4167L8.09251 5.2417L13.0925 10.2417L8.09251 15.2417L6.90918 14.0667Z\"\n        fill={fill ? fill : foregroundColor}\n      />\n    </svg>\n  </span>\n);\n\nexport const CloseIcon: React.FC<Icons> = ({ fill, role }) => (\n  <svg\n    aria-label=\"close icon\"\n    role={role}\n    width=\"20\"\n    height=\"20\"\n    viewBox=\"0 0 20 20\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M15.2459 5.92917C15.5704 5.6047 15.5704 5.07864 15.2459 4.75417C14.9214 4.4297 14.3954 4.4297 14.0709 4.75417L10.0001 8.82501L5.92925 4.75417C5.60478 4.4297 5.07872 4.4297 4.75425 4.75417C4.42978 5.07864 4.42978 5.6047 4.75425 5.92917L8.82508 10L4.75425 14.0708C4.42978 14.3953 4.42978 14.9214 4.75425 15.2458C5.07872 15.5703 5.60478 15.5703 5.92925 15.2458L10.0001 11.175L14.0709 15.2458C14.3954 15.5703 14.9214 15.5703 15.2459 15.2458C15.5704 14.9214 15.5704 14.3953 15.2459 14.0708L11.1751 10L15.2459 5.92917Z\"\n      fill={fill ? fill : foregroundColor}\n    />\n  </svg>\n);\n\nexport const CopyIcon: React.FC<Icons> = ({ fill, role }) => (\n  <svg\n    aria-label=\"copy icon\"\n    role={role}\n    width=\"20\"\n    height=\"20\"\n    viewBox=\"0 0 20 20\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M1.66724 3.66626C1.66724 2.56169 2.56267 1.66626 3.66724 1.66626H11.3339C12.4385 1.66626 13.3339 2.56169 13.3339 3.66626V13.3329H3.66724C2.56267 13.3329 1.66724 12.4375 1.66724 11.3329V3.66626ZM16.3339 6.66626C17.4385 6.66626 18.3339 7.56169 18.3339 8.66626V16.3329C18.3339 17.4375 17.4385 18.3329 16.3339 18.3329H8.66724C7.56267 18.3329 6.66724 17.4375 6.66724 16.3329V14.9996H15.0006V6.66626H16.3339ZM3.3339 3.33293V11.6663H11.6672V3.33293H3.3339Z\"\n      fill={fill ? fill : foregroundColor}\n    />\n  </svg>\n);\n\nexport const EyeIcon: React.FC<Icons> = ({ condition, fill, role }) => (\n  <svg\n    aria-label=\"eye icon\"\n    role={role}\n    width=\"20\"\n    height=\"20\"\n    viewBox=\"0 0 20 20\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M9.99992 7.5C9.33688 7.5 8.70099 7.76339 8.23215 8.23223C7.76331 8.70107 7.49992 9.33696 7.49992 10C7.49992 10.663 7.76331 11.2989 8.23215 11.7678C8.70099 12.2366 9.33688 12.5 9.99992 12.5C10.663 12.5 11.2988 12.2366 11.7677 11.7678C12.2365 11.2989 12.4999 10.663 12.4999 10C12.4999 9.33696 12.2365 8.70107 11.7677 8.23223C11.2988 7.76339 10.663 7.5 9.99992 7.5ZM9.99992 14.1667C8.89485 14.1667 7.83504 13.7277 7.05364 12.9463C6.27224 12.1649 5.83325 11.1051 5.83325 10C5.83325 8.89493 6.27224 7.83512 7.05364 7.05372C7.83504 6.27232 8.89485 5.83333 9.99992 5.83333C11.105 5.83333 12.1648 6.27232 12.9462 7.05372C13.7276 7.83512 14.1666 8.89493 14.1666 10C14.1666 11.1051 13.7276 12.1649 12.9462 12.9463C12.1648 13.7277 11.105 14.1667 9.99992 14.1667ZM9.99992 3.75C5.83325 3.75 2.27492 6.34167 0.833252 10C2.27492 13.6583 5.83325 16.25 9.99992 16.25C14.1666 16.25 17.7249 13.6583 19.1666 10C17.7249 6.34167 14.1666 3.75 9.99992 3.75Z\"\n      fill={fill ? fill : condition ? infoColor : foregroundColor}\n    />\n  </svg>\n);\n\nexport const GearIcon: React.FC<Icons> = ({ condition, fill, role }) => (\n  <svg\n    aria-label=\"gear icon\"\n    role={role}\n    width=\"20\"\n    height=\"20\"\n    viewBox=\"0 0 20 20\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M10.0001 6.66675C10.8842 6.66675 11.732 7.01794 12.3571 7.64306C12.9823 8.26818 13.3334 9.11603 13.3334 10.0001C13.3334 10.8841 12.9823 11.732 12.3571 12.3571C11.732 12.9822 10.8842 13.3334 10.0001 13.3334C9.11606 13.3334 8.26821 12.9822 7.64309 12.3571C7.01797 11.732 6.66678 10.8841 6.66678 10.0001C6.66678 9.11603 7.01797 8.26818 7.64309 7.64306C8.26821 7.01794 9.11606 6.66675 10.0001 6.66675ZM10.0001 8.33342C9.55808 8.33342 9.13416 8.50901 8.8216 8.82157C8.50904 9.13413 8.33344 9.55805 8.33344 10.0001C8.33344 10.4421 8.50904 10.866 8.8216 11.1786C9.13416 11.4912 9.55808 11.6667 10.0001 11.6667C10.4421 11.6667 10.8661 11.4912 11.1786 11.1786C11.4912 10.866 11.6668 10.4421 11.6668 10.0001C11.6668 9.55805 11.4912 9.13413 11.1786 8.82157C10.8661 8.50901 10.4421 8.33342 10.0001 8.33342ZM8.33344 18.3334C8.12511 18.3334 7.95011 18.1834 7.91678 17.9834L7.60844 15.7751C7.08344 15.5667 6.63344 15.2834 6.20011 14.9501L4.12511 15.7917C3.94178 15.8584 3.71678 15.7917 3.61678 15.6084L1.95011 12.7251C1.84178 12.5417 1.89178 12.3167 2.05011 12.1917L3.80844 10.8084L3.75011 10.0001L3.80844 9.16675L2.05011 7.80841C1.89178 7.68341 1.84178 7.45841 1.95011 7.27508L3.61678 4.39175C3.71678 4.20841 3.94178 4.13341 4.12511 4.20842L6.20011 5.04175C6.63344 4.71675 7.08344 4.43341 7.60844 4.22508L7.91678 2.01675C7.95011 1.81675 8.12511 1.66675 8.33344 1.66675H11.6668C11.8751 1.66675 12.0501 1.81675 12.0834 2.01675L12.3918 4.22508C12.9168 4.43341 13.3668 4.71675 13.8001 5.04175L15.8751 4.20842C16.0584 4.13341 16.2834 4.20841 16.3834 4.39175L18.0501 7.27508C18.1584 7.45841 18.1084 7.68341 17.9501 7.80841L16.1918 9.16675L16.2501 10.0001L16.1918 10.8334L17.9501 12.1917C18.1084 12.3167 18.1584 12.5417 18.0501 12.7251L16.3834 15.6084C16.2834 15.7917 16.0584 15.8667 15.8751 15.7917L13.8001 14.9584C13.3668 15.2834 12.9168 15.5667 12.3918 15.7751L12.0834 17.9834C12.0501 18.1834 11.8751 18.3334 11.6668 18.3334H8.33344ZM9.37511 3.33341L9.06678 5.50841C8.06678 5.71675 7.18344 6.25008 6.54178 6.99175L4.53344 6.12508L3.90844 7.20841L5.66678 8.50008C5.33344 9.47508 5.33344 10.5334 5.66678 11.5001L3.90011 12.8001L4.52511 13.8834L6.55011 13.0167C7.19178 13.7501 8.06678 14.2834 9.05844 14.4834L9.36678 16.6667H10.6334L10.9418 14.4917C11.9334 14.2834 12.8084 13.7501 13.4501 13.0167L15.4751 13.8834L16.1001 12.8001L14.3334 11.5084C14.6668 10.5334 14.6668 9.47508 14.3334 8.50008L16.0918 7.20841L15.4668 6.12508L13.4584 6.99175C12.8168 6.25008 11.9334 5.71675 10.9334 5.51675L10.6251 3.33341H9.37511Z\"\n      fill={fill ? fill : condition ? infoColor : foregroundColor}\n    />\n  </svg>\n);\n\nexport const HelpIcon: React.FC<Icons> = ({ condition, fill, role }) => (\n  <svg\n    aria-label=\"help icon\"\n    role={role}\n    width=\"20\"\n    height=\"20\"\n    viewBox=\"0 0 20 20\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M9.16675 15.0001H10.8334V13.3334H9.16675V15.0001ZM10.0001 1.66675C8.90573 1.66675 7.8221 1.8823 6.81105 2.30109C5.80001 2.71987 4.88135 3.3337 4.10753 4.10753C2.54472 5.67033 1.66675 7.78995 1.66675 10.0001C1.66675 12.2102 2.54472 14.3298 4.10753 15.8926C4.88135 16.6665 5.80001 17.2803 6.81105 17.6991C7.8221 18.1179 8.90573 18.3334 10.0001 18.3334C12.2102 18.3334 14.3298 17.4554 15.8926 15.8926C17.4554 14.3298 18.3334 12.2102 18.3334 10.0001C18.3334 8.90573 18.1179 7.8221 17.6991 6.81105C17.2803 5.80001 16.6665 4.88135 15.8926 4.10753C15.1188 3.3337 14.2002 2.71987 13.1891 2.30109C12.1781 1.8823 11.0944 1.66675 10.0001 1.66675ZM10.0001 16.6668C6.32508 16.6668 3.33342 13.6751 3.33342 10.0001C3.33342 6.32508 6.32508 3.33342 10.0001 3.33342C13.6751 3.33342 16.6668 6.32508 16.6668 10.0001C16.6668 13.6751 13.6751 16.6668 10.0001 16.6668ZM10.0001 5.00008C9.11603 5.00008 8.26818 5.35127 7.64306 5.97639C7.01794 6.60151 6.66675 7.44936 6.66675 8.33342H8.33342C8.33342 7.89139 8.50901 7.46747 8.82157 7.1549C9.13413 6.84234 9.55806 6.66675 10.0001 6.66675C10.4421 6.66675 10.866 6.84234 11.1786 7.1549C11.4912 7.46747 11.6667 7.89139 11.6667 8.33342C11.6667 10.0001 9.16675 9.79175 9.16675 12.5001H10.8334C10.8334 10.6251 13.3334 10.4167 13.3334 8.33342C13.3334 7.44936 12.9822 6.60151 12.3571 5.97639C11.732 5.35127 10.8841 5.00008 10.0001 5.00008Z\"\n      fill={fill ? fill : condition ? infoColor : foregroundColor}\n    />\n  </svg>\n);\n\nexport const MenuIcon: React.FC<Icons> = ({ condition, fill, role }) => (\n  <svg\n    aria-label=\"menu icon\"\n    role={role}\n    width=\"20\"\n    height=\"20\"\n    viewBox=\"0 0 20 20\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M17 5V6.66667H3V5H17ZM3 15H17V13.3333H3V15ZM3 10.8333H17V9.16667H3V10.8333Z\"\n      fill={fill ? fill : condition ? infoColor : foregroundColor}\n    />\n  </svg>\n);\n\nexport const PencilIcon: React.FC<Icons> = ({ condition, fill, role }) => (\n  <svg\n    aria-label=\"pencil icon\"\n    role={role}\n    width=\"20\"\n    height=\"20\"\n    viewBox=\"0 0 20 20\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M11.7167 7.5L12.5 8.28333L4.93333 15.8333H4.16667V15.0667L11.7167 7.5ZM14.7167 2.5C14.5083 2.5 14.2917 2.58333 14.1333 2.74167L12.6083 4.26667L15.7333 7.39167L17.2583 5.86667C17.5833 5.54167 17.5833 5 17.2583 4.69167L15.3083 2.74167C15.1417 2.575 14.9333 2.5 14.7167 2.5ZM11.7167 5.15833L2.5 14.375V17.5H5.625L14.8417 8.28333L11.7167 5.15833Z\"\n      fill={fill ? fill : condition ? infoColor : foregroundColor}\n    />\n  </svg>\n);\n\nexport const PlusIcon: React.FC<Icons> = ({ condition, fill, role }) => (\n  <svg\n    role={role}\n    aria-label=\"plus icon\"\n    width=\"20\"\n    height=\"20\"\n    viewBox=\"0 0 20 20\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      fill-rule=\"evenodd\"\n      clip-rule=\"evenodd\"\n      d=\"M11.385 11.385H15.615C16.3799 11.385 17 10.7649 17 10C17 9.23507 16.3799 8.61497 15.615 8.61497H11.385V4.38503C11.385 3.6201 10.7649 3 10 3C9.23507 3 8.61497 3.6201 8.61497 4.38503V8.61497H4.38503C3.6201 8.61497 3 9.23507 3 10C3 10.7649 3.6201 11.385 4.38503 11.385H8.61497V15.615C8.61497 16.3799 9.23507 17 10 17C10.7649 17 11.385 16.3799 11.385 15.615V11.385Z\"\n      fill={fill ? fill : condition ? infoColor : foregroundColor}\n    />\n  </svg>\n);\n\nexport const PrintIcon: React.FC<Icons> = ({ fill, role }) => (\n  <svg\n    aria-label=\"print icon\"\n    role={role}\n    width=\"20\"\n    height=\"20\"\n    viewBox=\"0 0 20 20\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M15.0001 2.5H5.00008V5.83333H15.0001V2.5ZM15.8334 10C15.6124 10 15.4004 9.9122 15.2442 9.75592C15.0879 9.59964 15.0001 9.38768 15.0001 9.16667C15.0001 8.94565 15.0879 8.73369 15.2442 8.57741C15.4004 8.42113 15.6124 8.33333 15.8334 8.33333C16.0544 8.33333 16.2664 8.42113 16.4227 8.57741C16.579 8.73369 16.6668 8.94565 16.6668 9.16667C16.6668 9.38768 16.579 9.59964 16.4227 9.75592C16.2664 9.9122 16.0544 10 15.8334 10ZM13.3334 15.8333H6.66675V11.6667H13.3334V15.8333ZM15.8334 6.66667H4.16675C3.50371 6.66667 2.86782 6.93006 2.39898 7.3989C1.93014 7.86774 1.66675 8.50363 1.66675 9.16667V14.1667H5.00008V17.5H15.0001V14.1667H18.3334V9.16667C18.3334 8.50363 18.07 7.86774 17.6012 7.3989C17.1323 6.93006 16.4965 6.66667 15.8334 6.66667Z\"\n      fill={fill ? fill : foregroundColor}\n    />\n  </svg>\n);\n\nexport const RefreshIcon: React.FC<Icons> = ({ fill, role }) => (\n  <svg\n    aria-label=\"refresh icon\"\n    role={role}\n    width=\"20\"\n    height=\"20\"\n    viewBox=\"0 0 20 20\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M9.99992 14.9999C8.67384 14.9999 7.40207 14.4731 6.46438 13.5355C5.5267 12.5978 4.99992 11.326 4.99992 9.99992C4.99992 9.16658 5.20825 8.35825 5.58325 7.66658L4.36659 6.44992C3.71659 7.47492 3.33325 8.69158 3.33325 9.99992C3.33325 11.768 4.03563 13.4637 5.28587 14.714C6.53612 15.9642 8.23181 16.6666 9.99992 16.6666V19.1666L13.3333 15.8332L9.99992 12.4999V14.9999ZM9.99992 3.33325V0.833252L6.66658 4.16658L9.99992 7.49992V4.99992C11.326 4.99992 12.5978 5.5267 13.5355 6.46438C14.4731 7.40207 14.9999 8.67383 14.9999 9.99992C14.9999 10.8333 14.7916 11.6416 14.4166 12.3333L15.6333 13.5499C16.2833 12.5249 16.6666 11.3083 16.6666 9.99992C16.6666 8.23181 15.9642 6.53612 14.714 5.28587C13.4637 4.03563 11.768 3.33325 9.99992 3.33325Z\"\n      fill={fill ? fill : foregroundColor}\n    />\n  </svg>\n);\n\nexport const UndoIcon: React.FC<Icons> = ({ fill, role }) => (\n  <svg\n    aria-label=\"undo icon\"\n    role={role}\n    width=\"20\"\n    height=\"20\"\n    viewBox=\"0 0 20 20\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M10.1812 7.66667C8.36883 7.66667 6.72741 8.33333 5.46214 9.4L3 7V13H9.15535L6.67953 10.5867C7.63019 9.81333 8.84074 9.33333 10.1812 9.33333C12.6023 9.33333 14.661 10.8733 15.3791 13L17 12.48C16.0493 9.68667 13.3615 7.66667 10.1812 7.66667Z\"\n      fill={fill ? fill : foregroundColor}\n    />\n  </svg>\n);\n","// import { Method } from '@testing-library/react';\nimport React from 'react';\nimport { CloseIcon } from './Icons';\n\ninterface PrintDialogTypes {\n  cancelText: string;\n  confirmText: string;\n  helpLink: string;\n  onCancel: () => void;\n  onConfirm: () => void;\n  onUndo: () => void;\n  title: string;\n}\n\nconst PrintDialog: React.FC<PrintDialogTypes> = ({\n  cancelText,\n  confirmText,\n  helpLink,\n  onCancel,\n  onConfirm,\n  onUndo,\n  title,\n}) => (\n  <div className=\"note-overlay\">\n    <div className=\"sk-panel note-dialog\">\n      <div className=\"sk-panel-content\">\n        <div className=\"sk-panel-section\">\n          <div className=\"sk-panel-row title-section\">\n            <h2>{title}</h2>\n            <button id=\"undoDialog\" onClick={onUndo} title=\"Close\">\n              <CloseIcon role=\"button\" />\n            </button>\n          </div>\n          <p>\n            Need help deciding? Check out the{' '}\n            <a href={helpLink} target=\"_blank\" rel=\"noopener noreferrer\">\n              documentation\n            </a>\n            .\n          </p>\n        </div>\n      </div>\n      <div className=\"sk-panel-footer\">\n        <div className=\"sk-button-group stretch\">\n          <button className=\"sk-button neutral\" onClick={onCancel}>\n            <div>{cancelText}</div>\n          </button>\n          <button className=\"sk-button info\" onClick={onConfirm}>\n            <div>{confirmText}</div>\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nexport default PrintDialog;\n","/**\n * This component is derived from the \"browser-esm-webpack-typescript-react\" found\n * at https://github.com/microsoft/monaco-editor-samples,\n * which is released under MIT, Copyright (c) 2016 Microsoft Corporation.\n * This modified version is released under AGPL-3.0 as indicated in the README.md\n * in the root directory. A copy of AGPL-3.0 is available there.\n * */\nimport React, { useRef, useEffect } from 'react';\nimport * as monaco from 'monaco-editor';\n\nconst debugMode = false;\nconst MonacoEditorContainerID = 'MonacoEditorContainer';\nconst MonacoDiffEditorContainerID = 'MonacoDiffEditorContainer';\n\n/*eslint no-restricted-globals: [\"error\", \"event\", \"monaco\"]*/\n// @ts-ignore\nself.MonacoEnvironment = {\n  getWorkerUrl: function (_moduleId: any, label: string) {\n    if (label === 'json') {\n      return './json.worker.bundle.js';\n    }\n    if (label === 'css') {\n      return './css.worker.bundle.js';\n    }\n    if (label === 'html') {\n      return './html.worker.bundle.js';\n    }\n    if (label === 'typescript' || label === 'javascript') {\n      return './ts.worker.bundle.js';\n    }\n    return './editor.worker.bundle.js';\n  },\n};\n\nconst onKeyDown = (keyCode: string, debugMode = false) => {\n  if (debugMode) {\n    console.log('IKeyboardEvent Up: ' + keyCode);\n  }\n};\n\nconst onKeyUp = (keyCode: string, debugMode = false) => {\n  if (debugMode) {\n    console.log('IKeyboardEvent Up: ' + keyCode);\n  }\n};\n\ninterface MonacoEditorTypes {\n  fontSize?: string;\n  id?: string;\n  language?: string;\n  onKeyDown?: Function;\n  onKeyUp?: Function;\n  saveText?: Function;\n  tabSize?: number;\n  text: string;\n  theme?: string;\n  viewMode?: boolean;\n}\n\nexport const MonacoEditor: React.FC<MonacoEditorTypes> = ({\n  fontSize = '16',\n  id = MonacoEditorContainerID,\n  language = 'markdown',\n  saveText,\n  tabSize = 2,\n  text,\n  theme = 'vs-dark',\n  viewMode = false,\n}) => {\n  const divEl = useRef<HTMLDivElement>(null);\n  let editor: monaco.editor.IStandaloneCodeEditor;\n\n  if (fontSize === '') {\n    fontSize = '16px';\n  }\n\n  let scrollBeyondLastLine = true;\n  if (viewMode) {\n    scrollBeyondLastLine = false;\n  }\n\n  useEffect(() => {\n    if (divEl.current) {\n      editor = monaco.editor.create(divEl.current, {\n        // These are variable: customizable by user or dependent on props\n        fontSize: parseInt(fontSize.replace('px', '')),\n        language: language,\n        tabSize: tabSize,\n        theme: theme,\n        scrollBeyondLastLine: scrollBeyondLastLine,\n        value: [text].join('\\n'),\n\n        // These are not customizable\n        autoClosingOvertype: 'auto',\n        formatOnPaste: true,\n        formatOnType: true,\n        wordWrap: 'on',\n        wrappingStrategy: 'advanced',\n      });\n\n      // Keyboard Events\n      editor.onKeyDown((e: monaco.IKeyboardEvent) => {\n        onKeyDown(e.code, debugMode);\n        if (e.ctrlKey && e.code === 'KeyS') {\n          e.preventDefault();\n        }\n      });\n      editor.onKeyUp((e: monaco.IKeyboardEvent) => {\n        onKeyUp(e.code, debugMode);\n      });\n\n      // Content Change Events\n      editor.onDidChangeModelContent(\n        (e: monaco.editor.IModelContentChangedEvent) => {\n          if (saveText) {\n            saveText(editor.getValue());\n          }\n        }\n      );\n    }\n    return () => {\n      editor.dispose();\n    };\n  }, []);\n  return <div id={id} className={MonacoEditorContainerID} ref={divEl}></div>;\n};\n\ninterface MonacoDiffEditorTypes extends MonacoEditorTypes {\n  modifiedText: string;\n}\n\nexport const MonacoDiffEditor: React.FC<MonacoDiffEditorTypes> = ({\n  fontSize = '16',\n  id = MonacoDiffEditorContainerID,\n  language = 'markdown',\n  saveText,\n  text,\n  modifiedText,\n  theme = 'vs-dark',\n}) => {\n  const divEl = useRef<HTMLDivElement>(null);\n  let diffEditor: monaco.editor.IStandaloneDiffEditor;\n\n  if (fontSize === '') {\n    fontSize = '16px';\n  }\n\n  useEffect(() => {\n    if (divEl.current) {\n      const originalModel = monaco.editor.createModel(\n        [text].join('\\n'),\n        language\n      );\n      const modifiedModel = monaco.editor.createModel(\n        [modifiedText].join('\\n'),\n        language\n      );\n\n      diffEditor = monaco.editor.createDiffEditor(divEl.current, {\n        // Same settings as above\n        // These are variable: customizable by user or dependent on props\n        fontSize: parseInt(fontSize.replace('px', '')),\n        theme: theme,\n\n        // These are not customizable\n        autoClosingOvertype: 'auto',\n        formatOnPaste: true,\n        formatOnType: true,\n        wordWrap: 'on',\n        wrappingStrategy: 'advanced',\n\n        // Specific to Diff Editor\n        originalEditable: true, // for left panel\n        readOnly: true, // for right panel\n      });\n      diffEditor.setModel({\n        original: originalModel,\n        modified: modifiedModel,\n      });\n\n      // Content Change Events\n      originalModel.onDidChangeContent(\n        (e: monaco.editor.IModelContentChangedEvent) => {\n          if (saveText) {\n            saveText(originalModel.getValue());\n          }\n        }\n      );\n    }\n    return () => {\n      diffEditor.dispose();\n    };\n  }, []);\n  return (\n    <div id={id} className={MonacoDiffEditorContainerID} ref={divEl}></div>\n  );\n};\n","/**\n * This component is derived from the example found at\n * https://github.com/outline/rich-markdown-editor/blob/develop/example/src/index.js,\n * which is released under BSD-3 License, Copyright (c) 2020 General Outline,\n * Inc (https://www.getoutline.com/) and individual contributors.\n * This modified version is released under AGPL-3.0 as indicated in the README.md\n * in the root directory. A copy of AGPL-3.0 is available there.\n * */\n\nimport * as React from 'react';\nimport debounce from 'lodash/debounce';\nimport RichMarkdownEditor from 'rich-markdown-editor';\n\nclass YouTubeEmbed extends React.Component<any, any> {\n  render() {\n    const { attrs } = this.props;\n    const videoId = attrs.matches[1];\n\n    return (\n      <iframe\n        title={`Youtube Embed ${videoId}`}\n        className={\n          this.props.isSelected ? 'YouTube ProseMirror-selectednode' : 'YouTube'\n        }\n        src={`https://www.youtube.com/embed/${videoId}?modestbranding=1`}\n      />\n    );\n  }\n}\n\ninterface DynamicProps {\n  debugMode: boolean;\n  onChange: (text: string) => void;\n  readOnly: boolean;\n  text: string;\n}\n\ninterface DynamicState {\n  readOnly: boolean;\n  template: boolean;\n  value: undefined;\n}\n\nexport default class DynamicEditor extends React.Component<\n  DynamicProps,\n  DynamicState\n> {\n  constructor(props: DynamicProps) {\n    super(props);\n    this.state = {\n      readOnly: this.props.readOnly,\n      template: false,\n      value: undefined,\n    };\n  }\n\n  handleToggleReadOnly = () => {\n    this.setState({ readOnly: !this.state.readOnly });\n  };\n\n  handleChange = debounce((value) => {\n    const text = value();\n    if (this.props.debugMode) {\n      console.log(text);\n    }\n    this.props.onChange(text);\n  }, 50);\n\n  render() {\n    return (\n      <RichMarkdownEditor\n        className={'DynamicEditor'}\n        placeholder={\"Type '/' to insert...\"}\n        id={'DynamicEditor'}\n        readOnly={this.state.readOnly}\n        readOnlyWriteCheckboxes\n        value={this.state.value}\n        defaultValue={this.props.text}\n        scrollTo={window.location.hash}\n        onCancel={() => {\n          if (this.props.debugMode) {\n            console.log('Cancel triggered');\n          }\n        }}\n        autoFocus\n        onChange={(value) => this.handleChange(value)}\n        embeds={[\n          {\n            title: 'YouTube',\n            keywords: 'youtube video tube google',\n            icon: () => (\n              <img\n                alt=\"YouTube Logo\"\n                src=\"/icons/ic-YouTube.svg\"\n                width={24}\n                height={24}\n              />\n            ),\n            //@ts-ignore\n            matcher: (url) => {\n              return url.match(\n                /(?:https?:\\/\\/)?(?:www\\.)?youtu\\.?be(?:\\.com)?\\/?.*(?:watch|embed)?(?:.*v=|v\\/|\\/)([a-zA-Z0-9_-]{11})$/i\n              );\n            },\n            component: YouTubeEmbed,\n          },\n        ]}\n      />\n    );\n  }\n}\n","import React from 'react';\nimport { EditingModes } from './AppendEditor';\nimport { MonacoEditor } from './Monaco';\nimport DynamicEditor from './DynamicEditor';\n\nimport { HtmlElementId } from './AppendEditor';\n\ninterface EditProps {\n  debugMode: boolean;\n  editingMode?: string;\n  fontSize: string;\n  keyMap: any;\n  monacoEditorLanguage: string;\n  onKeyDown: Function;\n  onKeyUp: Function;\n  onKeyDownEditTextArea: Function;\n  onKeyDownTextArea: Function;\n  saveText: Function;\n  text: string;\n  viewMode: boolean | undefined;\n}\n\ninterface EditState {\n  text: string;\n}\n\nexport default class EditNote extends React.Component<EditProps, EditState> {\n  static defaultProps = {\n    // none\n  };\n\n  constructor(props: EditProps) {\n    super(props);\n\n    this.state = {\n      text: this.props.text,\n    };\n  }\n\n  handleInputChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const target = event.target;\n    const value = target.value;\n\n    this.setState(\n      {\n        text: value,\n      },\n      () => {\n        this.props.saveText(this.state.text);\n      }\n    );\n  };\n\n  saveText = (text: string) => {\n    this.setState(\n      {\n        text,\n      },\n      () => {\n        this.props.saveText(this.state.text);\n      }\n    );\n  };\n\n  onKeyDown = (e: React.KeyboardEvent) => {\n    this.props.onKeyDown(e);\n    this.props.onKeyDownEditTextArea(e);\n    this.props.onKeyDownTextArea(e);\n  };\n\n  onKeyUp = (event: React.KeyboardEvent) => {\n    this.props.keyMap.delete(event.key);\n    this.props.onKeyUp(event);\n  };\n\n  render() {\n    const { text } = this.state;\n    return (\n      <div\n        className={\n          'sk-panel main edit ' +\n          (this.props.editingMode === EditingModes.useMonacoEditor\n            ? 'monacoEditor'\n            : this.props.editingMode === EditingModes.useDynamicEditor\n            ? 'dynamicEditor'\n            : 'otherEditor')\n        }\n      >\n        <div\n          className={\n            'sk-panel-content edit ' +\n            (this.props.editingMode === EditingModes.useMonacoEditor\n              ? 'monacoEditor'\n              : '')\n          }\n        >\n          {this.props.editingMode === EditingModes.useMonacoEditor ? (\n            <MonacoEditor\n              fontSize={this.props.fontSize}\n              language={this.props.monacoEditorLanguage}\n              saveText={this.saveText}\n              text={text}\n              viewMode={this.props.viewMode}\n            />\n          ) : this.props.editingMode === EditingModes.useDynamicEditor ? (\n            <div id=\"dynamicEditor\">\n              <DynamicEditor\n                debugMode={this.props.debugMode}\n                text={text}\n                onChange={this.saveText}\n                readOnly={false}\n              />\n            </div>\n          ) : (\n            <textarea\n              id={HtmlElementId.editTextArea}\n              name=\"text\"\n              className=\"sk-input contrast textarea editnote\"\n              placeholder=\"Welcome to the Append Editor! 😄\"\n              rows={15}\n              spellCheck=\"true\"\n              value={text}\n              onChange={this.handleInputChange}\n              onKeyDown={this.onKeyDown}\n              onKeyUp={this.onKeyUp}\n            />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n","import { HtmlElementId } from '../components/AppendEditor';\n\nexport const clickAppendButton = () => {\n  const appendButton = document.getElementById(HtmlElementId.appendButton);\n  if (appendButton) {\n    appendButton.click();\n  }\n};\n\nexport const clickEditButton = () => {\n  const editButton = document.getElementById(HtmlElementId.editButton);\n  if (editButton) {\n    editButton.click();\n  }\n};\n\nexport const clickHelpButton = () => {\n  const helpButton = document.getElementById(HtmlElementId.helpButton);\n  if (helpButton) {\n    helpButton.click();\n  }\n};\n\nexport const clickMenuButton = () => {\n  const menuButton = document.getElementById(HtmlElementId.menuButton);\n  if (menuButton) {\n    menuButton.click();\n  }\n};\n\nexport const clickSettingsButton = () => {\n  const settingsButton = document.getElementById(HtmlElementId.settingsButton);\n  if (settingsButton) {\n    settingsButton.click();\n  }\n};\n\nexport const clickViewButton = () => {\n  const viewButton = document.getElementById(HtmlElementId.viewButton);\n  if (viewButton) {\n    viewButton.click();\n  }\n};\n","import React from 'react';\nimport { GearIcon, HelpIcon, MenuIcon } from './Icons';\nimport {\n  clickHelpButton,\n  clickMenuButton,\n  clickSettingsButton,\n} from '../lib/clickButton';\n\ninterface HelpProps {\n  debugMode: boolean;\n  printURL: boolean;\n}\n\ninterface HelpState {\n  showFeelings: boolean;\n  showMoreQuestions: boolean;\n  showFeedback: boolean;\n}\n\nexport default class Help extends React.Component<HelpProps, HelpState> {\n  constructor(props: HelpProps) {\n    super(props);\n\n    this.state = {\n      showFeelings: false,\n      showMoreQuestions: false,\n      showFeedback: false,\n    };\n  }\n\n  onToggleShowFeelings = () => {\n    this.setState({\n      showFeelings: !this.state.showFeelings,\n    });\n  };\n\n  onToggleShowMoreQuestions = () => {\n    this.setState({\n      showMoreQuestions: !this.state.showMoreQuestions,\n    });\n  };\n\n  onToggleShowFeedback = () => {\n    this.setState({\n      showFeedback: !this.state.showFeedback,\n    });\n  };\n\n  render() {\n    return (\n      <div id=\"help\">\n        <hr></hr>\n        <h2>Append Editor Help</h2>\n        <p>\n          The Append Editor is an <b>unofficial</b>{' '}\n          <a\n            href=\"https://standardnotes.org/help/77/what-are-editors\"\n            target=\"_blank\"\n            rel=\"nofollow noreferrer noopener\"\n          >\n            editor\n          </a>{' '}\n          for{' '}\n          <a\n            href=\"https://standardnotes.org/\"\n            target=\"_blank\"\n            rel=\"nofollow noreferrer noopener\"\n          >\n            Standard Notes\n          </a>\n          , a free,{' '}\n          <a\n            href=\"https://standardnotes.org/knowledge/5/what-is-free-and-open-source-software\"\n            target=\"_blank\"\n            rel=\"nofollow noreferrer noopener\"\n          >\n            open-source\n          </a>\n          , and{' '}\n          <a\n            href=\"https://standardnotes.org/knowledge/2/what-is-end-to-end-encryption\"\n            target=\"_blank\"\n            rel=\"nofollow noreferrer noopener\"\n          >\n            end-to-end encrypted\n          </a>{' '}\n          notes app. The Append Editor is also free software licensed under{' '}\n          <a\n            href=\"https://github.com/TheodoreChu/append-editor/blob/main/LICENSE\"\n            target=\"_blank\"\n            rel=\"nofollow noreferrer noopener\"\n          >\n            AGPL-3.0\n          </a>\n          . Its source code is available on{' '}\n          <a\n            href=\"https://github.com/TheodoreChu/append-editor\"\n            target=\"_blank\"\n            rel=\"nofollow noreferrer noopener\"\n          >\n            GitHub\n          </a>\n          .\n        </p>\n        <h3>How do I use the Append Editor?</h3>\n        <p>\n          The Append Editor supports{' '}\n          <a\n            href=\"https://guides.github.com/features/mastering-markdown/\"\n            target=\"_blank\"\n            rel=\"nofollow noreferrer noopener\"\n          >\n            Markdown\n          </a>{' '}\n          with{' '}\n          <a\n            href=\"https://katex.org/docs/support_table.html\"\n            target=\"_blank\"\n            rel=\"nofollow noreferrer noopener\"\n          >\n            KaTeX\n          </a>\n          , syntax highlighting, in-line HTML, table of contents, footnotes,\n          auto-linking,{' '}\n          <a\n            href=\"https://github.com/ikatyang/emoji-cheat-sheet/blob/master/README.md\"\n            target=\"_blank\"\n            rel=\"nofollow noreferrer noopener\"\n          >\n            emoji codes\n          </a>\n          , and more.{' '}\n        </p>\n        <p>\n          There are four editing modes in the Append Editor: Plain Textarea,\n          CodeMirror, Dynamic, and Monaco. You can read about each mode and\n          choose which to use in the Settings\n          <button\n            className=\"inline-text-and-svg\"\n            onClick={clickSettingsButton}\n            title=\"Open Settings\"\n          >\n            <span>(</span>\n            <GearIcon role=\"button\" />\n            <span>).</span>\n          </button>\n        </p>\n        <p>\n          The Append Editor also has built-in support for default and per-note\n          font sizes, font families, and custom CSS. The menu\n          <button\n            className=\"inline-text-and-svg\"\n            onClick={clickMenuButton}\n            title=\"Open the Menu\"\n          >\n            <span>(</span>\n            <MenuIcon role=\"button\" />\n            <span>)</span>\n          </button>\n          has additional options for customizing the appearance of the editor,\n          sharing your note, and quick actions for editing.\n        </p>\n        <p>\n          Please visit the documentation at{' '}\n          <a\n            href=\"https://appendeditor.com\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            appendeditor.com\n          </a>{' '}\n          for the full list of features and keyboard shortcuts.\n        </p>\n        <h3>How do I Install the Append Editor in Standard Notes?</h3>\n        <ol>\n          <li>\n            Download, install, and sign in to the Standard Notes{' '}\n            <a\n              href=\"https://standardnotes.org/download\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Desktop\n            </a>{' '}\n            app.\n          </li>\n          <li>\n            In the bottom left corner of the app, click <b>Extensions</b>.\n          </li>\n          <li>\n            Click <b>Import Extensions</b> and paste the following link into the\n            input box. If you want to use the alpha version, replace{' '}\n            <code>beta</code> with <code>alpha</code>:{' '}\n            <code>\n              <a\n                href=\"https://raw.githubusercontent.com/TheodoreChu/append-editor/main/public/beta.ext.json\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                https://raw.githubusercontent.com/TheodoreChu/append-editor/main/public/beta.ext.json\n              </a>\n            </code>\n          </li>\n        </ol>\n        <h3>What do I write about?</h3>\n        Here are some questions to help you get started:\n        <ul>\n          <li>How are you? What's happening?</li>\n          <li>What might be affecting your mood?</li>\n          <li>Which feelings fit your mood and to what extent?</li>\n          <details onToggle={this.onToggleShowFeelings}>\n            <summary>\n              {!this.state.showFeelings && [\n                <p className=\"link\">Show feelings</p>,\n              ]}\n              {this.state.showFeelings && [\n                <p className=\"link\">Hide feelings</p>,\n              ]}\n            </summary>\n            <li>\n              <b>Positive Feelings:</b> bold, calm, cheerful, confident,\n              content, eager, ecstatic, energized, engaged, enthusiastic,\n              excited, grateful, happy, humorous, inspired, joyful, light,\n              lively, loving, motivated, optimistic, passionate, peaceful,\n              playful, proud, reassured, refreshed, relaxed, relieved,\n              satisfied, secure, surprised, thrilled, wonderful\n            </li>\n            <li>\n              <b>Negative Feelings:</b> afraid, angry, annoyed, anxious,\n              ashamed, bored, burnt out, confused, demoralized, depressed,\n              disappointed, disgusted, distraught, embarrassed, empty,\n              exhausted, frustrated, furious, guilty, heavy, insecure,\n              irritated, jealous, jittery, lethargic, lonely, nervous, numb,\n              resentful, sad, self-conscious, sleepy, stressed, tired, winded,\n              worried\n            </li>\n          </details>\n          <li>What thoughts are contributing to the way you're feeling?</li>\n          <details onToggle={this.onToggleShowMoreQuestions}>\n            <summary>\n              {!this.state.showMoreQuestions && [\n                <p className=\"link\">Show more questions</p>,\n              ]}\n              {this.state.showMoreQuestions && [\n                <p className=\"link\">Show fewer questions</p>,\n              ]}\n            </summary>\n          </details>\n          {this.state.showMoreQuestions && [\n            <div>\n              <li>\n                What do you hope your life will look like in a week? a month? a\n                year?\n              </li>\n              <li>\n                What can you do today to make your life the way you want it?\n              </li>\n              <li>\n                How will you feel when you've realized the goals that you have\n                for yourself?\n              </li>\n              <li>Who or what do you feel grateful for and why?</li>\n              <li>What did you enjoy about today?</li>\n            </div>,\n          ]}\n        </ul>\n        <details onToggle={this.onToggleShowFeedback}>\n          <summary>\n            <p className=\"link\">Need more help?</p>\n          </summary>\n          {this.state.showFeedback && [\n            <p>\n              Feel free to{' '}\n              <a\n                href=\"https://appendeditor.com/contact\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                reach out\n              </a>{' '}\n              if you have any questions, comments, concerns, or feedback.{' '}\n              <span role=\"img\" aria-label=\"wave emoji\">\n                👋\n              </span>\n              <br />\n              If you find any bugs or have a feature request, please{' '}\n              <a\n                href=\"https://github.com/TheodoreChu/append-editor/issues\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                open an issue on GitHub\n              </a>\n              .{' '}\n              <span role=\"img\" aria-label=\"smile emoji\">\n                🙂\n              </span>\n              <br />\n              You are using version <code>1.1.2</code>. The release notes and\n              change log are available on{' '}\n              <a\n                href=\"https://github.com/TheodoreChu/append-editor/releases\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                GitHub\n              </a>\n              .\n            </p>,\n          ]}\n        </details>\n        Click Help\n        <button\n          className=\"inline-text-and-svg\"\n          onClick={clickHelpButton}\n          title=\"Close Help\"\n        >\n          <span>(</span>\n          <HelpIcon fill={'var(--sn-stylekit-info-color)'} role=\"button\" />\n          <span>)</span>\n        </button>\n        to close this section.\n        <hr></hr>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { EyeIcon, HelpIcon, PencilIcon, PlusIcon } from './Icons';\nimport {\n  clickAppendButton,\n  clickEditButton,\n  clickHelpButton,\n  clickViewButton,\n} from '../lib/clickButton';\n\nconst Intro: React.FC<any> = () => (\n  <div id=\"intro\">\n    <details>\n      <summary>\n        Welcome to the Append Editor!{' '}\n        <span role=\"img\" aria-label=\"wave emoji\">\n          👋\n        </span>{' '}\n        Your note is empty.{' '}\n        <span role=\"img\" aria-label=\"smile emoji\">\n          🙂\n        </span>\n      </summary>\n      <p>To get started:</p>\n      <ul>\n        <li>\n          <p>\n            Click the Pencil\n            <button\n              className=\"inline-text-and-svg\"\n              onClick={clickEditButton}\n              title=\"Toggle Edit Mode\"\n            >\n              <span>(</span>\n              <PencilIcon role=\"button\" />\n              <span>) </span>\n            </button>\n            to open <b>Edit Mode</b>\n          </p>\n        </li>\n        <li>\n          <p>\n            Click the Plus\n            <button\n              className=\"inline-text-and-svg\"\n              onClick={clickAppendButton}\n              title=\"Toggle Append Mode\"\n            >\n              <span>(</span>\n              <PlusIcon role=\"button\" />\n              <span>)</span>\n            </button>\n            to open <b>Append Mode</b>\n          </p>\n        </li>\n      </ul>\n      <p>\n        View Mode\n        <button\n          className=\"inline-text-and-svg\"\n          onClick={clickViewButton}\n          title=\"Toggle View Mode\"\n        >\n          <span>(</span>\n          <EyeIcon condition={true} role=\"button\" />\n          <span>)</span>\n        </button>\n        is currently <b>on</b>. Your note will automatically render here when\n        you type in <b>Edit Mode</b>. In <b>Append Mode</b>, clicking{' '}\n        <b>Append</b> will add the text in the textarea to the end of your note.\n      </p>\n      <p>\n        If you are using the demo at{' '}\n        <a\n          href=\"https://beta.appendeditor.com\"\n          target=\"_blank\"\n          rel=\"nofollow noreferrer noopener\"\n        >\n          beta.appendeditor.com\n        </a>\n        , then your notes will be lost after you close the page.\n      </p>\n      <p>\n        If you want to save your notes, then click Help\n        <button\n          className=\"inline-text-and-svg\"\n          onClick={clickHelpButton}\n          title=\"Toggle show Help\"\n        >\n          <span>(</span>\n          <HelpIcon role=\"button\" />\n          <span>)</span>\n        </button>\n        at the top and follow the instructions on how to install the Append\n        Editor in{' '}\n        <a\n          href=\"https://standardnotes.org/\"\n          target=\"_blank\"\n          rel=\"nofollow noreferrer noopener\"\n        >\n          Standard Notes\n        </a>\n        , a free,{' '}\n        <a\n          href=\"https://standardnotes.org/knowledge/5/what-is-free-and-open-source-software\"\n          target=\"_blank\"\n          rel=\"nofollow noreferrer noopener\"\n        >\n          open-source\n        </a>\n        , and{' '}\n        <a\n          href=\"https://standardnotes.org/knowledge/2/what-is-end-to-end-encryption\"\n          target=\"_blank\"\n          rel=\"nofollow noreferrer noopener\"\n        >\n          end-to-end encrypted\n        </a>{' '}\n        notes app.\n      </p>\n      <p>\n        If you like Standard Notes, please check out Standard Notes{' '}\n        <a\n          href=\"https://standardnotes.org/extensions\"\n          target=\"_blank\"\n          rel=\"nofollow noreferrer noopener\"\n        >\n          Extended\n        </a>{' '}\n        for more editors, themes, components, and methods to backup up your\n        data.\n      </p>\n      <p>\n        Happy note-taking!{' '}\n        <span role=\"img\" aria-label=\"smile emoji\">\n          😄\n        </span>\n      </p>\n    </details>\n  </div>\n);\n\nexport default Intro;\n","import React, { ReactNode } from 'react';\nimport unified from 'unified';\nimport parse from 'remark-parse';\nimport remark2rehype from 'remark-rehype';\nimport rehype2react from 'rehype-react';\nimport { debounce, throttle } from 'lodash';\n\nconst gfm = require('remark-gfm');\nconst breaks = require('remark-breaks');\nconst math = require('remark-math');\nconst rehypeKatex = require('rehype-katex');\nconst highlight = require('rehype-highlight');\nconst emoji = require('remark-emoji');\nconst externalLinks = require('remark-external-links');\nconst toc = require('remark-toc');\nconst footnotes = require('remark-footnotes');\nconst slug = require('remark-slug');\nconst raw = require('rehype-raw');\n\nconst processor = unified()\n  .use(parse)\n  .use(gfm)\n  .use(breaks)\n  .use(slug)\n  .use(toc, { maxDepth: 6 })\n  .use(externalLinks)\n  .use(footnotes, { inlineNotes: true })\n  .use(remark2rehype, { allowDangerousHtml: true })\n  .use(raw)\n  .use(math)\n  .use(rehypeKatex)\n  .use(highlight, { ignoreMissing: true })\n  .use(emoji)\n  .use(rehype2react, { createElement: React.createElement });\n\nexport const processMarkdown = (text: string) => {\n  const markdown = processor.processSync(text).result as ReactNode;\n  return markdown;\n};\n\n/** Throttle instead of debounce because\n * we want it to work even when typing\n * lots of characters in a short amount of time. */\nexport const isLongString = throttle((text: string) => {\n  //console.log('length', text.length);\n  if (text.length > 10000) {\n    return true;\n  } else {\n    return false;\n  }\n}, 1000);\n\n/** Debounce the rendering of long notes to prevent lagging.\n * There is no max on the debounce to prevent lagging\n * even for very, very long notes */\nexport const renderLongMarkdown = debounce((text: string) => {\n  //console.log('renderLongMarkdownText');\n  const markdown = processMarkdown(text);\n  return markdown;\n}, 500);\n\nexport const renderMarkdown = (text: string, bypassDebounce: boolean) => {\n  if (bypassDebounce) {\n    //console.log('renderBypassDebounceText');\n    const markdown = processMarkdown(text);\n    return markdown;\n  }\n  let textIsLong = false as boolean | undefined;\n  textIsLong = isLongString(text);\n  //console.log('textIsLong', textIsLong);\n  if (textIsLong) {\n    return renderLongMarkdown(text);\n  } else {\n    //console.log('renderShortMarkdownText');\n    const markdown = processMarkdown(text);\n    return markdown;\n  }\n};\n","import React from 'react';\nimport { EditingModes } from './AppendEditor';\nimport DynamicEditor from './DynamicEditor';\nimport Help from './Help';\nimport Intro from './Intro';\nimport { renderMarkdown } from '../lib/renderMarkdown';\n\ninterface ViewProps {\n  bypassDebounce: boolean;\n  debugMode: boolean;\n  editingMode?: string;\n  monacoEditorLanguage: string;\n  printURL: boolean;\n  saveText: (text: string) => void;\n  showHelp: boolean;\n  text: string;\n}\n\ninterface ViewState {\n  showHelp: boolean;\n}\n\nexport default class ViewNote extends React.Component<ViewProps, ViewState> {\n  constructor(props: ViewProps) {\n    super(props);\n\n    this.state = {\n      showHelp: this.props.showHelp,\n    };\n  }\n\n  onToggleShowHelp = () => {\n    const helpButton = document.getElementById('helpButton');\n    if (helpButton) {\n      helpButton.click();\n    }\n  };\n\n  renderMarkdown = (text: string) => {\n    const markdown = renderMarkdown(text, this.props.bypassDebounce);\n    return markdown;\n  };\n\n  render() {\n    const { text } = this.props;\n    return (\n      <div\n        className={\n          'sk-panel main view' + (this.props.printURL ? ' printURL' : '')\n        }\n      >\n        <div className=\"sk-panel-content view\" id=\"view\">\n          {!text && [<Intro />]}\n          {this.state.showHelp && [\n            <Help\n              debugMode={this.props.debugMode}\n              printURL={this.props.printURL}\n            />,\n          ]}\n          <div\n            id=\"renderedNote\"\n            className={\n              '' +\n              (this.props.editingMode === EditingModes.useDynamicEditor\n                ? ''\n                : 'rendered-note-section')\n            }\n          >\n            {this.props.editingMode === EditingModes.useMonacoEditor &&\n            this.props.monacoEditorLanguage !== 'markdown' &&\n            this.props.monacoEditorLanguage !== 'html' &&\n            text ? (\n              this.renderMarkdown(\n                '```' + this.props.monacoEditorLanguage + '\\n' + text + '\\n```'\n              )\n            ) : this.props.editingMode === EditingModes.useDynamicEditor ? (\n              <DynamicEditor\n                debugMode={this.props.debugMode}\n                onChange={this.props.saveText}\n                readOnly={true}\n                text={text}\n              />\n            ) : (\n              this.renderMarkdown(text)\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { EditingModes } from './AppendEditor';\nimport DynamicEditor from './DynamicEditor';\nimport { MonacoEditor } from './Monaco';\n\nimport { HtmlElementId } from './AppendEditor';\n\ninterface AppendProps {\n  appendNewLine: boolean;\n  appendNewParagraph: boolean;\n  appendRows: number;\n  appendTextToNote: Function;\n  editingMode?: string;\n  fontSize: string;\n  keyMap: Map<any, any>;\n  debugMode: boolean;\n  autoSaveAppendText: Function;\n  autoSaveCheckBoxes: Function;\n  monacoEditorLanguage: string;\n  onKeyDown: Function;\n  onKeyUp: Function;\n  onKeyDownAppendTextArea: Function;\n  onKeyDownTextArea: Function;\n  text: string;\n}\n\ninterface AppendState {\n  text: string;\n  newLine: boolean;\n  newParagraph: boolean;\n  [x: string]: string | boolean;\n}\n\nexport default class AppendText extends React.Component<\n  AppendProps,\n  AppendState\n> {\n  static defaultProps = {\n    // none\n  };\n\n  constructor(props: AppendProps) {\n    super(props);\n\n    this.state = {\n      text: this.props.text,\n      newLine: this.props.appendNewLine,\n      newParagraph: this.props.appendNewParagraph,\n      useMonacoEditor: this.props.editingMode === EditingModes.useMonacoEditor,\n      useDynamicEditor:\n        this.props.editingMode === EditingModes.useDynamicEditor,\n    };\n  }\n\n  handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const target = event.target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    const name = target.name;\n    this.setState(\n      {\n        [name]: value,\n      },\n      () => {\n        // This callback saves the checkboxes\n        this.autoSaveCheckBoxes();\n      }\n    );\n  };\n\n  // This is an almost duplicate of the above editor. Here we don't save the checkboxes to improve performance\n  handleTextAreaChange = (event: any) => {\n    const target = event.target;\n    const value = target.value;\n    this.setState(\n      {\n        text: value,\n      },\n      () => {\n        // This callback saves the append text\n        this.autoSaveAppendText();\n      }\n    );\n  };\n\n  saveText = (text: string) => {\n    this.setState(\n      {\n        text,\n      },\n      () => {\n        this.props.autoSaveAppendText(this.state.text);\n      }\n    );\n  };\n\n  appendTextToNote = () => {\n    this.props.appendTextToNote();\n    this.setState({\n      text: '',\n    });\n    const appendTextArea = document.getElementById(\n      HtmlElementId.appendTextArea\n    );\n    if (appendTextArea) {\n      appendTextArea.focus();\n    }\n    // Refresh Monaco Editor after appending text to note\n    if (this.state.useMonacoEditor) {\n      this.setState(\n        {\n          useMonacoEditor: false,\n        },\n        () => {\n          this.setState({\n            useMonacoEditor: true,\n          });\n        }\n      );\n    }\n    // Refresh Dynamic Editor after appending text to note\n    if (this.state.useDynamicEditor) {\n      this.setState(\n        {\n          useDynamicEditor: false,\n        },\n        () => {\n          this.setState({\n            useDynamicEditor: true,\n          });\n        }\n      );\n    }\n  };\n\n  autoSaveAppendText = () => {\n    const text = this.state.text;\n    this.props.autoSaveAppendText(text);\n  };\n\n  autoSaveCheckBoxes = () => {\n    const newLine = this.state.newLine;\n    const newParagraph = this.state.newParagraph;\n    this.props.autoSaveCheckBoxes(newLine, newParagraph);\n  };\n\n  onKeyDown = (e: React.KeyboardEvent) => {\n    this.props.keyMap.set(e.key, true);\n    if (this.props.debugMode) {\n      console.log(\n        'Keys pressed: ' +\n          e.key +\n          'KeyMap for key: ' +\n          this.props.keyMap.get(e.key)\n      );\n      console.log('Append Text Value: ' + this.state.text);\n    }\n\n    this.props.onKeyDown(e);\n    this.props.onKeyDownAppendTextArea(e);\n    this.props.onKeyDownTextArea(e);\n    // Append Text if Ctrl and 'Enter' are pressed\n    if (this.props.keyMap.get('Control') && this.props.keyMap.get('Enter')) {\n      e.preventDefault();\n      this.appendTextToNote();\n    }\n    // Append Text if Ctrl and 's' are pressed\n    else if (this.props.keyMap.get('Control') && this.props.keyMap.get('s')) {\n      e.preventDefault();\n      this.appendTextToNote();\n    }\n  };\n\n  onKeyUp = (event: React.KeyboardEvent) => {\n    this.props.keyMap.delete(event.key);\n    this.props.onKeyUp(event);\n  };\n\n  render() {\n    const { text } = this.state;\n\n    return (\n      <div\n        className={\n          'sk-panel main appendix ' +\n          (this.props.editingMode === EditingModes.useMonacoEditor\n            ? 'monacoEditor'\n            : this.props.editingMode === EditingModes.useDynamicEditor\n            ? 'dynamicEditor'\n            : 'otherEditor')\n        }\n      >\n        <div\n          className={\n            'sk-panel-content edit ' +\n            (this.props.editingMode === EditingModes.useMonacoEditor\n              ? 'monacoEditor'\n              : '')\n          }\n        >\n          {this.state.useMonacoEditor ? (\n            // We use this.state instead of this.props so we can easily refresh it on Append\n            <MonacoEditor\n              fontSize={this.props.fontSize}\n              language={this.props.monacoEditorLanguage}\n              saveText={this.saveText}\n              text={text}\n            />\n          ) : this.state.useDynamicEditor ? (\n            <div id=\"appendDynamicEditor\">\n              <DynamicEditor\n                debugMode={this.props.debugMode}\n                onChange={this.saveText}\n                readOnly={false}\n                text={text}\n              />\n            </div>\n          ) : (\n            <textarea\n              id={HtmlElementId.appendTextArea}\n              name=\"text\"\n              className=\"sk-input contrast textarea append\"\n              placeholder=\"Append to your note\"\n              rows={this.props.appendRows}\n              spellCheck=\"true\"\n              value={text}\n              onChange={this.handleTextAreaChange}\n              onKeyDown={this.onKeyDown}\n              onKeyUp={this.onKeyUp}\n            />\n          )}\n        </div>\n        <div className=\"sk-panel-row\">\n          <form className=\"checkBoxForm\">\n            <label>\n              <input\n                id={HtmlElementId.newLine}\n                name=\"newLine\"\n                type=\"checkbox\"\n                checked={this.state.newLine}\n                onChange={this.handleInputChange}\n              />\n              New Line\n            </label>\n            <br />\n            <label>\n              <input\n                id={HtmlElementId.newParagraph}\n                name=\"newParagraph\"\n                type=\"checkbox\"\n                checked={this.state.newParagraph}\n                onChange={this.handleInputChange}\n              />\n              New Paragraph\n            </label>\n          </form>\n          <div className=\"sk-button-group stretch\">\n            <button\n              type=\"button\"\n              id=\"appendTextButton\"\n              onClick={this.appendTextToNote}\n              className=\"sk-button info\"\n            >\n              <div>Append</div>\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport {\n  ChevronIconDown,\n  ChevronIconRight,\n  CopyIcon,\n  EyeIcon,\n  PencilIcon,\n  PrintIcon,\n  UndoIcon,\n} from './Icons';\n\ninterface ActionButtonTypes {\n  caption?: string;\n  className?: string;\n  fill?: string;\n  id?: string;\n  title: string;\n  onClick: () => void;\n}\n\ninterface ConditionalButtonTypes extends ActionButtonTypes {\n  condition?: boolean | undefined;\n  messageOn?: string;\n  messageOff?: string;\n}\n\nexport const ChevronToggleButton: React.FC<ConditionalButtonTypes> = ({\n  caption,\n  className,\n  condition,\n  onClick,\n  title,\n}) => (\n  <button className={className} onClick={onClick} title={title}>\n    {condition ? (\n      <ChevronIconDown role=\"button\" />\n    ) : (\n      <ChevronIconRight role=\"button\" />\n    )}\n    <p className={'chevron-button-caption'}>{caption}</p>\n  </button>\n);\n\nexport const CopyButton: React.FC<ActionButtonTypes> = ({\n  caption,\n  className,\n  fill,\n  onClick,\n  title,\n}) => (\n  <button className={className} onClick={onClick} title={title}>\n    <CopyIcon fill={fill} role={'button'} />\n    <span className=\"button-caption\">{caption}</span>\n  </button>\n);\n\nexport const EyeButton: React.FC<ConditionalButtonTypes> = ({\n  caption,\n  className,\n  condition,\n  messageOn,\n  messageOff,\n  onClick,\n  title,\n}) => (\n  <button className={className} onClick={onClick} title={title}>\n    <EyeIcon condition={condition} role={'button'} />\n    <span className=\"button-caption\">\n      {caption}:<b>&nbsp;{condition ? messageOn : messageOff}</b>\n    </span>\n  </button>\n);\n\nexport const PencilButton: React.FC<ActionButtonTypes> = ({\n  caption,\n  className,\n  fill,\n  onClick,\n  title,\n}) => (\n  <button className={className} onClick={onClick} title={title}>\n    <PencilIcon fill={fill} role={'button'} />\n    <span className=\"button-caption\">{caption}</span>\n  </button>\n);\n\nexport const PrintButton: React.FC<ActionButtonTypes> = ({\n  caption,\n  className,\n  fill,\n  id,\n  onClick,\n  title,\n}) => (\n  <button className={className} id={id} onClick={onClick} title={title}>\n    <PrintIcon fill={fill} role={'button'} />\n    <span className=\"button-caption\">{caption}</span>\n  </button>\n);\n\nexport const UndoButton: React.FC<ActionButtonTypes> = ({\n  fill,\n  id,\n  onClick,\n  title,\n}) => (\n  <button id={id} onClick={onClick} title={title}>\n    <UndoIcon fill={fill} role={'button'} />\n  </button>\n);\n","import React from 'react';\nimport prettier from 'prettier';\nimport parserMarkdown from 'prettier/parser-markdown';\nimport { EditingModes } from './AppendEditor';\nimport {\n  ChevronToggleButton,\n  CopyButton,\n  EyeButton,\n  PencilButton,\n  PrintButton,\n} from './Buttons';\n\n// Import types\nimport { HtmlElementId } from './AppendEditor';\n\nenum HtmlClassName {\n  chevronToggleButton = 'menu-button chevron-toggle-button',\n  menuButton = 'menu-button',\n  on = ' on',\n  off = ' off',\n}\n\ninterface MenuProps {\n  borderlessMode?: boolean;\n  editingMode?: string;\n  fixedHeightMode?: boolean;\n  fullWidthMode?: boolean;\n  monacoEditorLanguage: string;\n  onConfirmPrintUrl: () => void;\n  overflowMode?: boolean;\n  refreshEdit: () => void;\n  refreshView: () => void;\n  saveText: (text: string) => void;\n  showMenuOptionsEdit?: boolean;\n  //showMenuOptionsMonacoEditor?: boolean;\n  showMenuOptionsShare?: boolean;\n  showMenuOptionsView?: boolean;\n  text: string;\n  toggleBorderlessMode: () => void;\n  toggleFixedHeightMode: () => void;\n  toggleFullWidthMode: () => void;\n  toggleOverflowMode: () => void;\n  toggleShowMenu: () => void;\n  toggleShowMenuOptionsEdit: () => void;\n  //toggleShowMenuOptionsMonacoEditor?: () => void;\n  toggleShowMenuOptionsView: () => void;\n  toggleShowMenuOptionsShare: () => void;\n  viewMode?: boolean;\n}\n\ninterface MenuState {\n  message?: string;\n  displayMessageShare: boolean;\n  displayMessageEdit: boolean;\n}\n\nexport default class Menu extends React.Component<MenuProps, MenuState> {\n  clearTooltipTimer: NodeJS.Timeout | undefined;\n  constructor(props: MenuProps) {\n    super(props);\n    this.state = {\n      message: '',\n      displayMessageEdit: false,\n      displayMessageShare: false,\n    };\n  }\n\n  resetMessageTimer = () => {\n    if (this.clearTooltipTimer) {\n      clearTimeout(this.clearTooltipTimer);\n    }\n    this.clearTooltipTimer = setTimeout(() => {\n      this.setState({\n        displayMessageEdit: false,\n        displayMessageShare: false,\n      });\n    }, 5000);\n  };\n\n  showMessageEdit = () => {\n    this.setState(\n      {\n        displayMessageEdit: true,\n        displayMessageShare: false,\n      },\n      () => {\n        this.resetMessageTimer();\n      }\n    );\n  };\n  showMessageShare = () => {\n    this.setState(\n      {\n        displayMessageEdit: false,\n        displayMessageShare: true,\n      },\n      () => {\n        this.resetMessageTimer();\n      }\n    );\n  };\n\n  copyToClipboard = (text: string) => {\n    const textField = document.createElement('textarea');\n    textField.value = text;\n    document.body.appendChild(textField);\n    textField.select();\n    document.execCommand('copy');\n    this.showMessageShare();\n    textField.remove();\n  };\n\n  copyText = () => {\n    if (this.props.text) {\n      this.setState({ message: 'Copied Text to clipboard.' }, () => {\n        this.copyToClipboard(this.props.text);\n      });\n    } else {\n      this.setState({ message: 'No text to copy. Your note is empty.' }, () => {\n        this.showMessageShare();\n      });\n    }\n  };\n\n  copyHtml = () => {\n    if (!this.props.viewMode) {\n      this.setState(\n        { message: 'Unable to copy HTML. Please turn view mode on.' },\n        () => this.showMessageShare()\n      );\n    } else if (!this.props.text) {\n      this.setState({ message: 'No HTML to copy. Your note is empty.' }, () => {\n        this.showMessageShare();\n      });\n    } else {\n      const renderedNote = document.getElementById('renderedNote');\n      if (renderedNote?.firstElementChild?.innerHTML) {\n        this.setState({ message: 'Copied HTML to clipboard.' });\n        this.copyToClipboard(renderedNote?.firstElementChild.innerHTML);\n      }\n    }\n  };\n\n  formatText = () => {\n    if (\n      this.props.monacoEditorLanguage !== 'markdown' &&\n      this.props.editingMode === EditingModes.useMonacoEditor\n    ) {\n      this.setState(\n        {\n          message:\n            'Error: Your Monaco Editor language is not markdown. Formatting is only available for markdown.',\n        },\n        () => {\n          this.showMessageEdit();\n        }\n      );\n    } else if (this.props.text) {\n      this.setState(\n        { message: 'Formatted markdown text with Prettier.' },\n        () => {\n          try {\n            const formattedText = prettier.format(this.props.text, {\n              parser: 'markdown',\n              plugins: [parserMarkdown],\n            });\n            this.props.saveText(formattedText);\n            this.props.refreshEdit();\n            this.props.refreshView();\n            this.showMessageEdit();\n          } catch (e) {\n            this.setState({ message: 'Error formatting text: ' + e }, () => {\n              this.showMessageEdit();\n            });\n            console.log('Error formatting text: ' + e);\n          }\n        }\n      );\n    } else {\n      this.setState({ message: 'No text to format.' }, () => {\n        this.showMessageEdit();\n      });\n    }\n  };\n\n  uncheckBoxes = () => {\n    const { text } = this.props;\n    const checkedBoxes = new RegExp(/- \\[x\\]/gm);\n    if (checkedBoxes.test(text)) {\n      const newText = text.replace(checkedBoxes, '- [ ]');\n      this.props.saveText(newText);\n      this.props.refreshEdit();\n      this.props.refreshView();\n      this.setState({ message: 'Unchecked all checkboxes.' }, () => {\n        this.showMessageEdit();\n      });\n    } else {\n      this.setState({ message: 'No checked checkboxes found.' }, () => {\n        this.showMessageEdit();\n      });\n    }\n  };\n\n  render() {\n    // You can render any custom fallback UI\n    return [\n      <div className=\"menu-overlay\" onClick={this.props.toggleShowMenu} />,\n      <div id={'menu'}>\n        <ChevronToggleButton\n          caption={'Appearance'}\n          className={HtmlClassName.chevronToggleButton}\n          condition={this.props.showMenuOptionsView}\n          onClick={this.props.toggleShowMenuOptionsView}\n          title={'Toggle show options for the appearance of the editor'}\n        />\n        {this.props.showMenuOptionsView && [\n          <EyeButton\n            caption={'Borderless'}\n            className={\n              HtmlClassName.menuButton +\n              (this.props.borderlessMode ? HtmlClassName.on : HtmlClassName.off)\n            }\n            condition={this.props.borderlessMode}\n            messageOn={'on'}\n            messageOff={'off'}\n            onClick={this.props.toggleBorderlessMode}\n            title=\"Toggle Borderless mode. Blends borders and margins into the background for a cleaner look\"\n          />,\n          <EyeButton\n            caption={'Fixed Height'}\n            className={\n              HtmlClassName.menuButton +\n              (this.props.fixedHeightMode\n                ? HtmlClassName.on\n                : HtmlClassName.off)\n            }\n            condition={this.props.fixedHeightMode}\n            messageOn={'on'}\n            messageOff={'off'}\n            onClick={this.props.toggleFixedHeightMode}\n            title=\"Toggle Fixed Height mode. Limits the height of the content container for easier side-by-side editing\"\n          />,\n          <EyeButton\n            caption={'Full Width'}\n            className={\n              HtmlClassName.menuButton +\n              (this.props.fullWidthMode ? HtmlClassName.on : HtmlClassName.off)\n            }\n            condition={this.props.fullWidthMode}\n            messageOn={'on'}\n            messageOff={'off'}\n            onClick={this.props.toggleFullWidthMode}\n            title=\"Toggle Full Width mode for unrestricted editing. Borderless mode plus unset maximum container widths\"\n          />,\n          <EyeButton\n            caption={'Horizontal Overflow'}\n            className={\n              HtmlClassName.menuButton +\n              (this.props.overflowMode ? HtmlClassName.on : HtmlClassName.off)\n            }\n            condition={this.props.overflowMode}\n            messageOn={'visible'}\n            messageOff={'auto'}\n            onClick={this.props.toggleOverflowMode}\n            title=\"Toggle Horizontal Overflow. Visible is great for editing and viewing large tables and preformatted text. Works best with Full Width mode\"\n          />,\n        ]}\n        <ChevronToggleButton\n          caption={'Share'}\n          className={HtmlClassName.chevronToggleButton}\n          condition={this.props.showMenuOptionsShare}\n          onClick={this.props.toggleShowMenuOptionsShare}\n          title={'Toggle Show Share Options'}\n        />\n        {this.props.showMenuOptionsShare && [\n          <CopyButton\n            caption={'Copy note text'}\n            className={HtmlClassName.menuButton}\n            fill={'var(--sn-stylekit-success-color)'}\n            onClick={this.copyText}\n            title=\"Copy the text of your note to your device's clipboard\"\n          />,\n          <CopyButton\n            caption={'Copy rendered HTML'}\n            className={HtmlClassName.menuButton}\n            fill={'var(--sn-stylekit-success-color)'}\n            onClick={this.copyHtml}\n            title=\"Copy the rendered HTML from your note text to your device's clipboard\"\n          />,\n          <PrintButton\n            caption={'Print rendered note'}\n            className={'menu-button off'}\n            fill={'var(--sn-stylekit-foreground-color)'}\n            id={HtmlElementId.printButton}\n            onClick={this.props.onConfirmPrintUrl}\n            title=\"Print rendered note. Works best on Chromium browsers (e.g., MS Edge, Google Chrome). Not available on mobile.\"\n          />,\n          <div\n            className={`notification ${\n              this.state.displayMessageShare ? 'visible' : 'hidden'\n            }`}\n          >\n            <p>\n              <b>{this.state.message}</b>\n            </p>\n          </div>,\n        ]}\n        <ChevronToggleButton\n          caption={'Actions'}\n          className={HtmlClassName.chevronToggleButton}\n          condition={this.props.showMenuOptionsEdit}\n          onClick={this.props.toggleShowMenuOptionsEdit}\n          title={'Toggle show Editing Actions'}\n        />\n        {this.props.showMenuOptionsEdit && [\n          <PencilButton\n            caption={'Format markdown text'}\n            className={HtmlClassName.menuButton}\n            fill=\"var(--sn-stylekit-warning-color)\"\n            onClick={this.formatText}\n            title=\"Format markdown text with Prettier. WARNING: this may cause undesired changes to your note text. Use the Note History feature to revert unwanted changes.\"\n          />,\n          <PencilButton\n            caption={'Uncheck all checkboxes'}\n            className={HtmlClassName.menuButton}\n            fill=\"var(--sn-stylekit-danger-color)\"\n            onClick={this.uncheckBoxes}\n            title=\"Uncheck all checkboxes. DANGER: this may cause undesired changes to your note text. Use the Note History feature to revert unwanted changes.\"\n          />,\n          <div\n            className={`notification ${\n              this.state.displayMessageEdit ? 'visible' : 'hidden'\n            }`}\n          >\n            <p>\n              <b>{this.state.message}</b>\n            </p>\n          </div>,\n        ]}\n        <div className=\"extra-space\"></div>\n      </div>,\n    ];\n  }\n}\n","import React from 'react';\nimport { MonacoEditor } from './Monaco';\nimport {\n  DefaultSettings,\n  EditingModes,\n  SaveSettingsInterface,\n} from './AppendEditor';\nimport { CloseIcon, RefreshIcon } from './Icons';\nimport { ChevronToggleButton, UndoButton } from './Buttons';\n\nconst customStylesID = 'customStyles';\nconst editingModeID = 'editingMode';\nconst fontEditID = 'fontEdit';\nconst fontSizeID = 'fontSize';\nconst fontViewID = 'fontView';\nconst monacoEditorLanguageID = 'monacoEditorLanguage';\nconst resetAllSettingsID = 'resetAllSettings';\nconst saveAsDefaultID = 'saveAsDefault';\n\ninterface SettingsProps {\n  defaultSettings: DefaultSettings;\n  customStyles: string;\n  editingMode?: string;\n  fontEdit: string;\n  fontSize: string;\n  fontView: string;\n  monacoEditorLanguage: string;\n  cancelText: string;\n  confirmText: string;\n  debugMode: boolean;\n  keyMap: Map<any, any>;\n  onCancel: () => void;\n  onConfirm: (object: SaveSettingsInterface) => void;\n  title: string;\n  helpLink: string;\n}\n\ninterface SettingsState {\n  customStyles: string;\n  editingMode: string;\n  fontEdit: string;\n  fontSize: string;\n  fontView: string;\n  monacoEditorLanguage: string;\n  saveAsDefault: boolean;\n  showCustomStyles: boolean;\n  [x: string]: string | boolean;\n}\n\nconst startRegExp = new RegExp(/```css\\n/gm);\nconst cssRegExp = new RegExp(/```css/gm);\nconst endRegExp = new RegExp(/\\n```/gm);\nconst codeRegExp = new RegExp(/```/gm);\n\nexport default class Settings extends React.Component<\n  SettingsProps,\n  SettingsState\n> {\n  constructor(props: SettingsProps) {\n    super(props);\n    let monacoEditorLanguage = 'markdown';\n    if (this.props.monacoEditorLanguage) {\n      monacoEditorLanguage = this.props.monacoEditorLanguage;\n    }\n    let editingMode = 'usePlainText';\n    if (this.props.editingMode) {\n      editingMode = this.props.editingMode;\n    }\n    this.state = {\n      customStyles: this.props.customStyles,\n      editingMode,\n      fontEdit: this.props.fontEdit,\n      fontSize: this.props.fontSize,\n      fontView: this.props.fontView,\n      monacoEditorLanguage,\n      saveAsDefault: false,\n      showCustomStyles: false, // false by default for a mobile-first experience\n    };\n  }\n\n  handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const target = event.target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value,\n    });\n    if (this.props.debugMode) {\n      console.log(\n        'Settings event name: ' +\n          event.target.name +\n          ' Value: ' +\n          event.target.value\n      );\n    }\n  };\n\n  handleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    this.setState(\n      {\n        [name]: value,\n      },\n      () => {\n        if (this.props.debugMode) {\n          console.log(\n            'Saved select. Name: ' +\n              event.target.name +\n              ' Value: ' +\n              event.target.value\n          );\n        }\n      }\n    );\n  };\n\n  toggleShowCustomStyles = () => {\n    this.setState({\n      showCustomStyles: !this.state.showCustomStyles,\n    });\n  };\n\n  cleanCustomStyles = (text: string) => {\n    if (text) {\n      return text\n        .replace(startRegExp, '')\n        .replace(cssRegExp, '')\n        .replace(endRegExp, '')\n        .replace(codeRegExp, '');\n    } else {\n      return text;\n    }\n  };\n\n  saveText = (text: string) => {\n    this.setState({\n      customStyles: text,\n    });\n  };\n\n  handleSubmit = () => {\n    if (this.props.debugMode) {\n      let fontEditMessage = '';\n      let fontViewMessage = '';\n      if (this.state.fontEdit === '' || this.state.fontEdit === undefined) {\n        fontEditMessage = 'Default';\n      } else if (this.state.fontEdit) {\n        fontEditMessage = this.state.fontEdit;\n      }\n      if (this.state.fontView === '' || this.state.fontView === undefined) {\n        fontViewMessage = 'Default';\n      } else if (this.state.fontView) {\n        fontViewMessage = this.state.fontView;\n      }\n      console.log(\n        'Settings.tsx handleSubmit() triggered: ' +\n          '\\n  - Settings editingMode: ' +\n          this.state.editingMode +\n          '\\n  - Settings fontEdit: ' +\n          this.state.fontEdit +\n          '\\n  - Settings fontView: ' +\n          this.state.fontView +\n          '\\n  - Your chosen font for Edit/Append is: ' +\n          fontEditMessage +\n          '\\n  - Your chosen font for View/Print is: ' +\n          fontViewMessage +\n          '\\n'\n      );\n    }\n    this.setState(\n      {\n        // clean the custom styles prior to saving them\n        customStyles: this.cleanCustomStyles(this.state.customStyles),\n      },\n      () => {\n        if (this.props.debugMode) {\n          console.log('Your custom styles: ' + this.state.customStyles);\n        }\n        const {\n          customStyles,\n          editingMode,\n          fontEdit,\n          fontSize,\n          fontView,\n          monacoEditorLanguage,\n          saveAsDefault,\n        } = this.state;\n        this.props.onConfirm({\n          customStyles,\n          editingMode,\n          fontEdit,\n          fontSize,\n          fontView,\n          monacoEditorLanguage,\n          saveAsDefault,\n        });\n      }\n    );\n  };\n\n  loadDefaultSettings = () => {\n    const defaultSettings = this.props.defaultSettings;\n    this.setState(\n      {\n        ...defaultSettings,\n      },\n      () => {\n        this.refreshCustomStyles();\n      }\n    );\n  };\n\n  refreshCustomStyles = () => {\n    this.setState(\n      {\n        showCustomStyles: !this.state.showCustomStyles,\n      },\n      () => {\n        this.setState({\n          showCustomStyles: !this.state.showCustomStyles,\n        });\n      }\n    );\n  };\n\n  clearCustomStyles = () => {\n    this.setState(\n      {\n        customStyles: '',\n      },\n      () => {\n        this.refreshCustomStyles();\n        if (this.props.debugMode) {\n          console.log('customStyles reset: ' + this.state.customStyles);\n        }\n      }\n    );\n    const customStyles = document.getElementById(\n      customStylesID\n    ) as HTMLTextAreaElement;\n    if (customStyles) {\n      customStyles.value = '';\n      customStyles.focus();\n    }\n  };\n\n  clearFontEdit = () => {\n    this.setState({\n      fontEdit: '',\n    });\n    const fontEdit = document.getElementById(fontEditID) as HTMLTextAreaElement;\n    if (fontEdit) {\n      fontEdit.value = '';\n      fontEdit.focus();\n    }\n  };\n\n  clearFontSize = () => {\n    this.setState({\n      fontSize: '',\n    });\n    const fontSize = document.getElementById(fontSizeID) as HTMLSelectElement;\n    if (fontSize) {\n      fontSize.value = '';\n      fontSize.focus();\n    }\n  };\n\n  clearFontView = () => {\n    this.setState({\n      fontView: '',\n    });\n    const fontView = document.getElementById(fontViewID) as HTMLTextAreaElement;\n    if (fontView) {\n      fontView.value = '';\n      fontView.focus();\n    }\n  };\n\n  clearEditingMode = () => {\n    this.setState({\n      editingMode: EditingModes.usePlainText,\n    });\n  };\n\n  clearMonacoEditorLanguage = () => {\n    this.setState({\n      monacoEditorLanguage: 'markdown',\n    });\n    const monacoEditorLanguage = document.getElementById(\n      monacoEditorLanguageID\n    ) as HTMLSelectElement;\n    if (monacoEditorLanguage) {\n      monacoEditorLanguage.value = 'markdown';\n      monacoEditorLanguage.focus();\n    }\n  };\n\n  clearSaveAsDefault = () => {\n    this.setState({\n      saveAsDefault: false,\n    });\n    const saveAsDefault = document.getElementById(\n      saveAsDefaultID\n    ) as HTMLInputElement;\n    saveAsDefault.checked = false;\n    saveAsDefault.focus();\n  };\n\n  clearAllSettings = () => {\n    // We clear from bottom settings to top settings so the focus afterwards is on top\n    this.clearSaveAsDefault();\n    this.clearCustomStyles();\n    this.clearFontView();\n    this.clearFontEdit();\n    this.clearFontSize();\n    this.clearMonacoEditorLanguage();\n    this.clearEditingMode();\n    const resetAllSettings = document.getElementById(resetAllSettingsID);\n    if (resetAllSettings) {\n      resetAllSettings.focus();\n    }\n  };\n\n  onKeyDown = (e: React.KeyboardEvent) => {\n    this.props.keyMap.set(e.key, true);\n    //console.log(\"Keys pressed: \" + e.key + \"KeyMap for key: \" + keyMap.get(e.key)) + \"KeyMap for Shift: \" + keyMap.get('Shift');\n    // Save settings if Control and 's' are pressed\n    if (this.props.keyMap.get('Control') && this.props.keyMap.get('s')) {\n      e.preventDefault();\n      this.handleSubmit();\n    }\n    // Save settings if Control and Enter are pressed\n    else if (\n      this.props.keyMap.get('Control') &&\n      this.props.keyMap.get('Enter')\n    ) {\n      e.preventDefault();\n      this.handleSubmit();\n    }\n  };\n\n  onKeyUp = (e: React.KeyboardEvent) => {\n    this.props.keyMap.set(e.key, false);\n  };\n\n  onBlur = (e: React.FocusEvent) => {\n    this.props.keyMap.clear();\n  };\n\n  componentWillUnmount = () => {\n    this.props.keyMap.clear();\n  };\n\n  render() {\n    //<h3>↶</h3>\n    const { title, onCancel, confirmText, cancelText, helpLink } = this.props;\n    return (\n      <div id=\"settings\" className=\"sk-panel main settings\">\n        <div className=\"sk-panel-content\">\n          <div className=\"sk-panel-section\">\n            <datalist id=\"fonts\">\n              <option\n                value={\n                  'SFMono-Regular, Consolas, Liberation Mono, Menlo, \"Ubuntu Mono\", courier, monospace;'\n                }\n              />\n              <option value=\"Times New Roman\" />\n              <option value=\"Arial\" />\n              <option value=\"Arial Black\" />\n              <option value=\"-apple-system\" />\n              <option value=\"Bell MT\" />\n              <option value=\"Baskerville Old Face\" />\n              <option value=\"Bahnschrift Light\" />\n              <option value=\"BlinkMacSystemFont\" />\n              <option value=\"Bodoni MT\" />\n              <option value=\"Calibri\" />\n              <option value=\"Calibri Light\" />\n              <option value=\"Calisto MT\" />\n              <option value=\"Cambria\" />\n              <option value=\"Candara\" />\n              <option value=\"Candara Light\" />\n              <option value=\"Cantarell\" />\n              <option value=\"Centaur\" />\n              <option value=\"Century\" />\n              <option value=\"Century Gothic\" />\n              <option value=\"Comic Sans MS\" />\n              <option value=\"Consolas\" />\n              <option value=\"Constantia\" />\n              <option value=\"Courier New\" />\n              <option value=\"Corbel\" />\n              <option value=\"Corbel Light\" />\n              <option value=\"DengXian\" />\n              <option value=\"Ebrima\" />\n              <option value=\"Droid Sans\" />\n              <option value=\"Fira Sans\" />\n              <option value=\"Gabriola\" />\n              <option value=\"Garamond\" />\n              <option value=\"Georgia\" />\n              <option value=\"Helvetica\" />\n              <option value=\"Helvetica Neue\" />\n              <option value=\"Impact\" />\n              <option value=\"KaTeX_AMS\" />\n              <option value=\"KaTeX_Caligraphic\" />\n              <option value=\"KaTeX_Fraktur\" />\n              <option value=\"KaTeX_Main\" />\n              <option value=\"KaTeX_Math\" />\n              <option value=\"KaTeX_SansSerif\" />\n              <option value=\"KaTeX_Script\" />\n              <option value=\"KaTeX_Typewriter\" />\n              <option value=\"Lato\" />\n              <option value=\"Liberation Mono\" />\n              <option value=\"Lucida Caligraphy\" />\n              <option value=\"Lucida Sans\" />\n              <option value=\"Menlo\" />\n              <option value=\"Monaco\" />\n              <option value=\"Monospace\" />\n              <option value=\"New York\" />\n              <option value=\"Oxygen\" />\n              <option value=\"Palatino\" />\n              <option value=\"Roboto\" />\n              <option value=\"Sans-Serif\" />\n              <option value=\"Segoe UI\" />\n              <option value=\"SFMono-Regular\" />\n              <option value=\"Serif\" />\n              <option value=\"Sylfaen\" />\n              <option value=\"Tahoma\" />\n              <option value=\"Times New Roman\" />\n              <option value=\"Trebuchet MS\" />\n              <option value=\"Ubuntu\" />\n              <option value=\"Verdana\" />\n              <option value=\"Yu Gothic\" />\n            </datalist>\n            <div className=\"sk-panel-row title-section\">\n              <h1>{title}</h1>\n              <button id=\"undoDialog\" onClick={onCancel} title=\"Close\">\n                <CloseIcon role=\"button\" />\n              </button>\n            </div>\n            <section className=\"sk-panel-row settings\">\n              <div className=\"text-and-undo-button\">\n                <p>\n                  Need help? Check out the{' '}\n                  <a href={helpLink} target=\"_blank\" rel=\"noopener noreferrer\">\n                    documentation\n                  </a>\n                  . To clear all settings, click undo:&nbsp;\n                </p>\n                <UndoButton\n                  onClick={this.clearAllSettings}\n                  title=\"Reset all Settings\"\n                  id={resetAllSettingsID}\n                />\n              </div>\n            </section>\n            <section className=\"sk-panel-row settings\">\n              <div className=\"text-and-undo-button\">\n                <p>To load your personal default settings, click:&nbsp;</p>\n                <button\n                  onClick={this.loadDefaultSettings}\n                  title=\"Load personal default settings\"\n                >\n                  <RefreshIcon role=\"button\" />\n                </button>\n              </div>\n            </section>\n            <section className=\"sk-panel-row settings\">\n              <div className=\"text-and-undo-button\">\n                <p>Editing Mode: </p>\n                <UndoButton\n                  onClick={this.clearEditingMode}\n                  title=\"Reset Editing Mode to Plain Textarea\"\n                />\n              </div>\n            </section>\n            <section className=\"sk-panel-row settings\">\n              <label>\n                <input\n                  id={EditingModes.usePlainText}\n                  name={editingModeID}\n                  value={EditingModes.usePlainText}\n                  className=\"radio\"\n                  type=\"radio\"\n                  checked={this.state.editingMode === EditingModes.usePlainText}\n                  onChange={this.handleInputChange}\n                />\n                Plain Textarea: no formatting (default, mobile recommended)\n              </label>\n            </section>\n            <section className=\"sk-panel-row settings\">\n              <label>\n                <input\n                  id={EditingModes.useCodeMirror}\n                  name={editingModeID}\n                  value={EditingModes.useCodeMirror}\n                  type=\"radio\"\n                  className=\"radio\"\n                  checked={\n                    this.state.editingMode === EditingModes.useCodeMirror\n                  }\n                  onChange={this.handleInputChange}\n                />\n                CodeMirror: in-line formatting for Markdown\n              </label>\n            </section>\n            <section className=\"sk-panel-row settings\">\n              <label>\n                <input\n                  id={EditingModes.useDynamicEditor}\n                  name={editingModeID}\n                  value={EditingModes.useDynamicEditor}\n                  type=\"radio\"\n                  className=\"radio\"\n                  checked={\n                    this.state.editingMode === EditingModes.useDynamicEditor\n                  }\n                  onChange={this.handleInputChange}\n                />\n                Dynamic: live formatting for Markdown. <b>warning: </b>\n                existing markdown may break (not compatible with KaTeX, lists\n                may not render properly; desktop and mobile compatible)\n              </label>\n            </section>\n            <section className=\"sk-panel-row settings\">\n              <label htmlFor={EditingModes.useMonacoEditor}>\n                <input\n                  id={EditingModes.useMonacoEditor}\n                  name={editingModeID}\n                  value={EditingModes.useMonacoEditor}\n                  type=\"radio\"\n                  className=\"radio\"\n                  checked={\n                    this.state.editingMode === EditingModes.useMonacoEditor\n                  }\n                  onChange={this.handleInputChange}\n                />\n                Monaco: syntax highlighting for Markdown and many other\n                programming languages, intelligent auto-completion,\n                sophisticated search and replace (desktop recommended)\n              </label>\n            </section>\n            {this.state.editingMode === EditingModes.useMonacoEditor && [\n              <section className=\"sk-panel-row settings\">\n                <label htmlFor={monacoEditorLanguageID}>\n                  Monaco Editor Language:{' '}\n                </label>\n                <div className=\"input-and-undo-button\">\n                  <label>\n                    <select\n                      id={monacoEditorLanguageID}\n                      name={monacoEditorLanguageID}\n                      value={this.state.monacoEditorLanguage}\n                      onChange={this.handleSelectChange}\n                    >\n                      <option>abap</option>\n                      <option>aes</option>\n                      <option>apex</option>\n                      <option>azcli</option>\n                      <option>bat</option>\n                      <option>c</option>\n                      <option>cameligo</option>\n                      <option>clojure</option>\n                      <option>coffeescript</option>\n                      <option>cpp</option>\n                      <option>csharp</option>\n                      <option>csp</option>\n                      <option>css</option>\n                      <option>dart</option>\n                      <option>dockerfile</option>\n                      <option>fsharp</option>\n                      <option>go</option>\n                      <option>graphql</option>\n                      <option>handlebars</option>\n                      <option>hcl</option>\n                      <option>html</option>\n                      <option>ini</option>\n                      <option>java</option>\n                      <option>javascript</option>\n                      <option>json</option>\n                      <option>julia</option>\n                      <option>kotlin</option>\n                      <option>less</option>\n                      <option>lexon</option>\n                      <option>lua</option>\n                      <option>markdown</option>\n                      <option>mips</option>\n                      <option>msdax</option>\n                      <option>mysql</option>\n                      <option>objective-c</option>\n                      <option>pascal</option>\n                      <option>pascaligo</option>\n                      <option>perl</option>\n                      <option>pgsql</option>\n                      <option>php</option>\n                      <option>plaintext</option>\n                      <option>postiats</option>\n                      <option>powerquery</option>\n                      <option>powershell</option>\n                      <option>pug</option>\n                      <option>python</option>\n                      <option>r</option>\n                      <option>razor</option>\n                      <option>redis</option>\n                      <option>redshift</option>\n                      <option>restructuredtext</option>\n                      <option>ruby</option>\n                      <option>rust</option>\n                      <option>sb</option>\n                      <option>scala</option>\n                      <option>scheme</option>\n                      <option>scss</option>\n                      <option>shell</option>\n                      <option>sol</option>\n                      <option>sql</option>\n                      <option>st</option>\n                      <option>swift</option>\n                      <option>systemverilog</option>\n                      <option>tcl</option>\n                      <option>twig</option>\n                      <option>typescript</option>\n                      <option>vb</option>\n                      <option>verilog</option>\n                      <option>xml</option>\n                      <option>yaml</option>\n                    </select>\n                  </label>\n                  <UndoButton\n                    onClick={this.clearMonacoEditorLanguage}\n                    title=\"Reset Monaco Editor Language to Markdown\"\n                  />\n                </div>\n              </section>,\n            ]}\n            <section className=\"sk-panel-row settings\">\n              <label htmlFor={fontSizeID}>Choose a base font size: </label>\n              <div className=\"input-and-undo-button\">\n                <select\n                  id={fontSizeID}\n                  name={fontSizeID}\n                  value={this.state.fontSize}\n                  onChange={this.handleSelectChange}\n                >\n                  <option></option>\n                  <option>12px</option>\n                  <option>13px</option>\n                  <option>14px</option>\n                  <option>15px</option>\n                  <option>16px</option>\n                  <option>17px</option>\n                  <option>18px</option>\n                  <option>19px</option>\n                  <option>20px</option>\n                  <option>21px</option>\n                  <option>22px</option>\n                  <option>23px</option>\n                  <option>24px</option>\n                  <option>25px</option>\n                  <option>26px</option>\n                  <option>27px</option>\n                  <option>28px</option>\n                  <option>29px</option>\n                  <option>30px</option>\n                </select>\n                <UndoButton\n                  onClick={this.clearFontSize}\n                  title=\"Reset font size to 16px\"\n                />\n              </div>\n            </section>\n            {this.state.editingMode !== EditingModes.useMonacoEditor && [\n              <section className=\"sk-panel-row settings\">\n                <label htmlFor={fontEditID}>\n                  Choose a font for Edit/Append:{' '}\n                </label>\n                <div className=\"input-and-undo-button\">\n                  <input\n                    list=\"fonts\"\n                    id={fontEditID}\n                    name={fontEditID}\n                    value={this.state.fontEdit}\n                    onChange={this.handleInputChange}\n                    onKeyDown={this.onKeyDown}\n                    onKeyUp={this.onKeyUp}\n                    type=\"text\"\n                  />\n                  <UndoButton\n                    onClick={this.clearFontEdit}\n                    title=\"Reset font for Edit/Append\"\n                  />\n                </div>\n              </section>,\n            ]}\n            {this.state.editingMode !== EditingModes.useDynamicEditor && [\n              <section className=\"sk-panel-row settings\">\n                <label htmlFor={fontViewID}>\n                  Choose a font for View/Print:{' '}\n                </label>\n                <div className=\"input-and-undo-button\">\n                  <input\n                    list=\"fonts\"\n                    id={fontViewID}\n                    name={fontViewID}\n                    value={this.state.fontView}\n                    onChange={this.handleInputChange}\n                    onKeyDown={this.onKeyDown}\n                    onKeyUp={this.onKeyUp}\n                    type=\"text\"\n                  />\n                  <UndoButton\n                    onClick={this.clearFontView}\n                    title=\"Reset font for View/Print\"\n                  />\n                </div>\n              </section>,\n            ]}\n            <section className=\"sk-panel-row settings\">\n              <ChevronToggleButton\n                caption={'Add custom styles (CSS):'}\n                className=\"chevron-toggle-button\"\n                condition={this.state.showCustomStyles}\n                onClick={this.toggleShowCustomStyles}\n                title={'Toggle show add custom styles (CSS)'}\n              />\n              {this.state.showCustomStyles && [\n                <div className=\"text-and-undo-button\">\n                  <UndoButton\n                    onClick={this.clearCustomStyles}\n                    title=\"Reset custom styles (CSS)\"\n                  />\n                </div>,\n              ]}\n            </section>\n            {this.state.showCustomStyles && [\n              <section className=\"sk-panel-row settings\">\n                <MonacoEditor\n                  tabSize={2}\n                  language=\"css\"\n                  text={this.state.customStyles}\n                  onKeyDown={this.onKeyDown}\n                  onKeyUp={this.onKeyUp}\n                  saveText={this.saveText}\n                />\n              </section>,\n            ]}\n            <section className=\"sk-panel-row settings\">\n              <label htmlFor={saveAsDefaultID}>\n                Save these settings as your personal default:{' '}\n              </label>\n              <div className=\"input-and-undo-button\">\n                <label>\n                  <input\n                    id={saveAsDefaultID}\n                    name={saveAsDefaultID}\n                    type=\"checkbox\"\n                    checked={this.state.saveAsDefault}\n                    onChange={this.handleInputChange}\n                  />\n                </label>\n                <UndoButton\n                  onClick={this.clearSaveAsDefault}\n                  title=\"Clear save as default\"\n                />\n              </div>\n            </section>\n          </div>\n        </div>\n        <div className=\"sk-panel-footer\">\n          <div className=\"sk-button-group stretch\">\n            <button className=\"sk-button neutral\" onClick={onCancel}>\n              <div>{cancelText}</div>\n            </button>\n            <button className=\"sk-button info\" onClick={this.handleSubmit}>\n              <div>{confirmText}</div>\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { ErrorInfo } from 'react';\n\ninterface ErrorBoundaryState {\n  hasError: boolean;\n  error?: Error;\n  errorInfo?: ErrorInfo;\n}\n\n/**\n * Learn more about Error Boundaries here:\n * https://reactjs.org/docs/error-boundaries.html\n */\n\nexport default class ErrorBoundary extends React.Component<\n  any,\n  ErrorBoundaryState\n> {\n  constructor(props: any) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    // You can also log the error to an error reporting service\n    console.log('Error:', error, '\\nError Info:', errorInfo);\n    this.setState({\n      error,\n      errorInfo,\n    });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return (\n        <div className=\"sk-panel main\">\n          <div className=\"sk-panel-content view\">\n            <div id=\"errorBoundary\">\n              <h1>Something went wrong.</h1>\n              <p>\n                Error Name: <code>{this.state.error?.name}</code>\n              </p>\n              <p>\n                Error Message: <code>{this.state.error?.message}</code>\n              </p>\n              <p>Please see the developer console for details.</p>\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n","import React from 'react';\nimport { EditorKit, EditorKitDelegate } from 'sn-editor-kit';\nimport PrintDialog from './PrintDialog';\nimport EditNote from './EditNote';\nimport ViewNote from './ViewNote';\nimport AppendText from './AppendText';\nimport Settings from './Settings';\nimport { MonacoDiffEditor } from './Monaco';\nimport ErrorBoundary from './ErrorBoundary';\nimport Menu from './Menu';\n\nimport CodeMirror, { Editor } from 'codemirror';\nimport 'codemirror/lib/codemirror';\nimport 'codemirror/mode/gfm/gfm';\n\n// CodeMirror addons\n\n// For markdown\nimport 'codemirror/addon/edit/continuelist';\n\n// For search\nimport 'codemirror/addon/search/jump-to-line';\nimport 'codemirror/addon/search/match-highlighter';\nimport 'codemirror/addon/search/matchesonscrollbar';\nimport 'codemirror/addon/search/search';\nimport 'codemirror/addon/search/searchcursor';\nimport 'codemirror/addon/dialog/dialog';\n\n// For styling selected text\nimport 'codemirror/addon/selection/mark-selection';\nimport {\n  EyeIcon,\n  GearIcon,\n  HelpIcon,\n  MenuIcon,\n  PencilIcon,\n  PlusIcon,\n} from './Icons';\n\nimport { isLongString, renderLongMarkdown } from '../lib/renderMarkdown';\n\nexport enum HtmlElementId {\n  appendButton = 'appendButton',\n  appendTextArea = 'appendTextArea',\n  appendix = 'appendix',\n  content = 'content',\n  editButton = 'editButton',\n  editTextArea = 'editTextArea',\n  header = 'header',\n  helpButton = 'helpButton',\n  menuButton = 'menuButton',\n  newLine = 'newLine',\n  newParagraph = 'newParagraph',\n  printButton = 'printButton',\n  settingsButton = 'settingsButton',\n  view = 'view',\n  viewButton = 'viewButton',\n}\n\nexport enum HtmlClassName {\n  fixed = 'fixed',\n  fixedHeader = 'fixed-header',\n}\n\nexport enum EditingModes {\n  usePlainText = 'usePlainText',\n  useCodeMirror = 'useCodeMirror',\n  useDynamicEditor = 'useDynamicEditor',\n  useMonacoEditor = 'useMonacoEditor',\n}\n\nexport type DefaultSettings = {\n  customStyles: string;\n  editingMode: string;\n  fontEdit: string;\n  fontSize: string;\n  fontView: string;\n  monacoEditorLanguage: string;\n};\n\nexport interface SaveSettingsInterface extends DefaultSettings {\n  saveAsDefault: boolean;\n}\n\nexport type menuOptions = {\n  borderlessMode?: boolean;\n  fixedHeightMode?: boolean;\n  fullWidthMode?: boolean;\n  overflowMode?: boolean;\n  showMenuOptionsEdit?: boolean;\n  showMenuOptionsShare?: boolean;\n  showMenuOptionsView?: boolean;\n};\n\nexport interface AppendInterface {\n  text: string;\n  appendCodeMirror?: any;\n  appendNewLine: boolean;\n  appendNewParagraph: boolean;\n  appendMode: boolean;\n  appendRows: number;\n  appendText: string;\n  borderlessMode?: boolean;\n  bypassDebounce: boolean;\n  confirmPrintUrl: boolean;\n  currentState?: object;\n  customStyles: string;\n  defaultSettings: DefaultSettings;\n  editMode?: any;\n  editingMode?: string;\n  editCodeMirror?: any;\n  fontEdit: string;\n  fontSize: string;\n  fontView: string;\n  fixedHeightMode?: boolean;\n  fullWidthMode?: boolean;\n  overflowMode?: boolean;\n  keyMap?: Object;\n  monacoEditorLanguage: string;\n  printURL: boolean;\n  refreshEdit: boolean;\n  refreshView: boolean;\n  saveAsDefault?: boolean;\n  savingEditorOptions?: boolean;\n  showAppendix: boolean;\n  showDiff: boolean;\n  showHeader: boolean;\n  showHelp: boolean;\n  showMenu?: boolean;\n  showMenuOptionsEdit?: boolean;\n  showMenuOptionsShare?: boolean;\n  showMenuOptionsView?: boolean;\n  settingsMode: boolean;\n  viewMode?: boolean;\n}\n\n/**\n * Some properties are optional so\n * they do not need to be set\n * when switching between notes.\n */\n\nconst initialState = {\n  text: '',\n  appendNewLine: false,\n  appendNewParagraph: false,\n  appendMode: false,\n  appendRows: 8,\n  appendText: '',\n  bypassDebounce: false, // We keep this as false in initialState so debounce works in the demo\n  confirmPrintUrl: false,\n  customStyles: '',\n  defaultSettings: {\n    customStyles: '',\n    editingMode: 'usePlainText',\n    fontEdit: '',\n    fontSize: '',\n    fontView: '',\n    monacoEditorLanguage: 'markdown',\n  },\n  fontEdit: '',\n  fontSize: '',\n  fontView: '',\n  monacoEditorLanguage: 'markdown',\n  printURL: true,\n  refreshEdit: false,\n  refreshView: false,\n  showAppendix: true,\n  showHeader: true,\n  showHelp: false,\n  showDiff: false,\n  settingsMode: false,\n};\n\nlet last_known_scroll_position = 0;\n\nconst debugMode = false;\n\nlet keyMap = new Map();\n\nexport default class AppendEditor extends React.Component<{}, AppendInterface> {\n  editorKit: any;\n  refreshEditorTimer: NodeJS.Timeout | undefined;\n  saveTimer: NodeJS.Timeout | undefined;\n\n  constructor(props: AppendInterface) {\n    super(props);\n    this.configureEditorKit();\n    this.state = initialState;\n  }\n\n  /**\n   * This loads the first time the editor is loaded\n   * This does not load every time a new note is loaded */\n  componentDidMount = () => {\n    if (debugMode) {\n      console.log('AppendEditor.tsx: \\n - this.componentDidMount() triggered');\n    }\n    this.onViewMode();\n    this.loadDefaultMenuState();\n    document.addEventListener('scroll', this.onScroll);\n  };\n\n  componentWillUnmount = () => {\n    document.removeEventListener('scroll', this.onScroll);\n  };\n\n  configureEditorKit = () => {\n    if (debugMode) {\n      console.log('AppendEditor.tsx: \\n - this.configureEditorKit() triggered');\n    }\n    let delegate = new EditorKitDelegate({\n      /** This loads every time a different note is loaded\n       * We turn bypassDebounce to true so\n       * the editor always renders the markdown for the latest note\n       */\n      setEditorRawText: (text: string) => {\n        this.setState(\n          {\n            ...initialState,\n            bypassDebounce: true,\n            text,\n          },\n          () => {\n            if (debugMode) {\n              console.log(\n                '#################################################################################\\n' +\n                  'AppendEditor.tsx:',\n                '\\n - loaded text:',\n                text +\n                  '\\n - this.configureEditorKit() callback triggered:' +\n                  '\\n - this.state.savingsDefaultSettings: ' +\n                  this.state.savingEditorOptions +\n                  '\\n - this.state: ' +\n                  JSON.stringify(this.state, null, ' ')\n              );\n            }\n            /** Clear the debounce from the previous note and componentDidMount\n             * Then call and flush the debounce so the correct markdown will render\n             * the first time after turning the bypass off */\n            isLongString.cancel();\n            isLongString(text);\n            isLongString.flush();\n            renderLongMarkdown.cancel();\n            if (isLongString(text)) {\n              renderLongMarkdown(text);\n              renderLongMarkdown.flush();\n            }\n            /** This prevents metadata from loading when saving editor options or default settings */\n            if (!this.state.savingEditorOptions) {\n              this.loadEditorOptions();\n              this.loadDefaultSettings();\n              this.loadMetaData();\n            }\n            /** Turn the debounce bypass off\n             * This loads every time, even when saving editor options or default settings\n             * because bypassDebounce is set to true every time\n             */\n            setTimeout(() => {\n              this.setState({\n                bypassDebounce: false,\n              });\n            }, 1000);\n          }\n        );\n      },\n      clearUndoHistory: () => {},\n      getElementsBySelector: () => [],\n    });\n\n    this.editorKit = new EditorKit({\n      delegate: delegate,\n      mode: 'plaintext',\n      supportsFilesafe: false,\n    });\n  };\n\n  /** Expect this to run three times when loading a note:\n   * once when loading editor options,\n   * once when loading default settings, and\n   * once when loading meta data\n   * Use the timer to prevent the function from being executed when it is called\n   * repeatedly, as when loading a note or saving a menu option */\n  refreshEditor = () => {\n    if (isLongString(this.state.text)) {\n      if (this.refreshEditorTimer) {\n        clearTimeout(this.refreshEditorTimer);\n      }\n      this.refreshEditorTimer = setTimeout(() => {\n        if (!this.state.savingEditorOptions) {\n          this.refreshEdit();\n          this.refreshView();\n          this.activateStyles();\n        }\n      }, 20);\n    } else {\n      if (this.refreshEditorTimer) {\n        clearTimeout(this.refreshEditorTimer);\n      }\n      this.refreshEditorTimer = setTimeout(() => {\n        if (!this.state.savingEditorOptions) {\n          this.refreshEdit();\n          this.refreshView();\n          this.activateStyles();\n        }\n      }, 10);\n    }\n  };\n\n  loadDefaultSettings = () => {\n    try {\n      const defaultSettingsString = this.editorKit.internal.componentManager.componentDataValueForKey(\n        'defaultSettings'\n      );\n      const defaultEditingMode = this.editorKit.internal.componentManager.componentDataValueForKey(\n        'editingMode'\n      );\n      if (debugMode) {\n        console.log(\n          'AppendEditor.tsx: \\n loadDefaultSetting() default settings loaded: ' +\n            '\\n  - defaultSettingsString: ' +\n            defaultSettingsString,\n          '\\n    - typeof:',\n          typeof defaultSettingsString,\n          '\\n  - defaultEditingMode:',\n          defaultEditingMode,\n          '\\n    - typeof:',\n          typeof defaultEditingMode\n        );\n      }\n      if (typeof defaultSettingsString !== 'undefined') {\n        const defaultSettingsObject = JSON.parse(\n          defaultSettingsString\n        ) as DefaultSettings;\n        if (debugMode) {\n          console.log(\n            'AppendEditor.tsx: \\n loadDefaultSetting():',\n            'if (defaultSettingsString !== undefined) triggered',\n            '\\n    - typeof defaultSettings:',\n            typeof defaultSettingsObject\n          );\n        }\n        this.setState(\n          {\n            customStyles: defaultSettingsObject.customStyles,\n            editingMode: defaultSettingsObject.editingMode,\n            fontEdit: defaultSettingsObject.fontEdit,\n            fontSize: defaultSettingsObject.fontSize,\n            fontView: defaultSettingsObject.fontView,\n            monacoEditorLanguage: defaultSettingsObject.monacoEditorLanguage,\n            defaultSettings: defaultSettingsObject,\n          },\n          () => {\n            if (debugMode) {\n              console.log(\n                'AppendEditor.tsx: \\n - loadDefaultSettings() this.state.savingEditorOptions: ' +\n                  this.state.savingEditorOptions +\n                  '\\n defaultSettingsObject:',\n                defaultSettingsObject,\n                '\\n JSON.stringify(this.state.defaultSettings):',\n                JSON.stringify(this.state.defaultSettings, null, ' ')\n              );\n            }\n            this.refreshEditor();\n          }\n        );\n      } else if (defaultEditingMode !== undefined) {\n        /** This else if loads legacy default settings introduced in v1.1.0\n         * We only need to check defaultEditingMode because it is never empty if it is defined\n         * */\n        const defaultCustomStyles = this.editorKit.internal.componentManager.componentDataValueForKey(\n          'customStyles'\n        );\n        const defaultFontEdit = this.editorKit.internal.componentManager.componentDataValueForKey(\n          'fontEdit'\n        );\n        const defaultFontSize = this.editorKit.internal.componentManager.componentDataValueForKey(\n          'fontSize'\n        );\n        const defaultFontView = this.editorKit.internal.componentManager.componentDataValueForKey(\n          'fontView'\n        );\n        const defaultMonacoEditorLanguage = this.editorKit.internal.componentManager.componentDataValueForKey(\n          'monacoEditorLanguage'\n        );\n        if (debugMode) {\n          console.log(\n            'AppendEditor.tsx: \\n loadDefaultSetting():',\n            'else if (defaultEditingMode !== undefined) triggered',\n            '\\n  - default customStyles: ' + defaultCustomStyles,\n            '\\n    - typeof:',\n            typeof defaultCustomStyles +\n              '\\n  - default fontSize: ' +\n              defaultFontSize +\n              '\\n  - default fontEdit: ' +\n              defaultFontEdit +\n              '\\n  - default fontView: ' +\n              defaultFontView +\n              '\\n  - default monacoEditorLanguage: ' +\n              defaultMonacoEditorLanguage\n          );\n        }\n        this.setState(\n          {\n            customStyles: defaultCustomStyles,\n            editingMode: defaultEditingMode,\n            fontEdit: defaultFontEdit,\n            fontSize: defaultFontSize,\n            fontView: defaultFontView,\n            monacoEditorLanguage: defaultMonacoEditorLanguage,\n            defaultSettings: {\n              customStyles: defaultCustomStyles,\n              editingMode: defaultEditingMode,\n              fontEdit: defaultFontEdit,\n              fontSize: defaultFontSize,\n              fontView: defaultFontView,\n              monacoEditorLanguage: defaultMonacoEditorLanguage,\n            },\n          },\n          () => {\n            if (debugMode) {\n              console.log(\n                'AppendEditor.tsx: \\n - loadDefaultSettings() this.state.savingEditorOptions: ' +\n                  this.state.savingEditorOptions\n              );\n            }\n            this.refreshEditor();\n          }\n        );\n      } else {\n        if (debugMode) {\n          console.log(\n            'AppendEditor.tsx: loadDefaultSettings(), else, current state:',\n            JSON.stringify(this.state, null, ' ')\n          );\n        }\n        this.refreshEditor();\n      }\n    } catch (error) {\n      // Log outside debug mode\n      console.log('Error loading default settings:', error);\n    }\n  };\n\n  loadEditorOptions = () => {\n    try {\n      const menuOptionsString = this.editorKit.internal.componentManager.componentDataValueForKey(\n        'menuOptions'\n      );\n      if (typeof menuOptionsString !== 'undefined') {\n        const menuOptionsObject = JSON.parse(menuOptionsString) as menuOptions;\n        this.setState(\n          {\n            borderlessMode: menuOptionsObject.borderlessMode,\n            fixedHeightMode: menuOptionsObject.fixedHeightMode,\n            fullWidthMode: menuOptionsObject.fullWidthMode,\n            overflowMode: menuOptionsObject.overflowMode,\n            //showMenuOptionsEdit: menuOptionsObject.showMenuOptionsEdit,\n            //showMenuOptionsShare: menuOptionsObject.showMenuOptionsShare,\n            //showMenuOptionsView: menuOptionsObject.showMenuOptionsView,\n          },\n          () => {\n            this.refreshEditor();\n          }\n        );\n      }\n    } catch (error) {\n      // Log outside debug mode\n      console.log('Error loading editor options:', error);\n    }\n  };\n\n  // This loads the Settings and Append Text\n  loadMetaData = () => {\n    this.editorKit.internal.componentManager.streamContextItem((note: any) => {\n      // Load editor settings\n      if (\n        note.content.appendEditorCustomStyles ||\n        note.content.appendEditorEditingMode ||\n        note.content.appendEditorFontEdit ||\n        note.content.appendEditorFontSize ||\n        note.content.appendEditorFontView ||\n        note.content.appendEditorMonacoEditorLanguage\n      ) {\n        this.setState(\n          {\n            customStyles: note.content.appendEditorCustomStyles,\n            editingMode: note.content.appendEditorEditingMode,\n            fontEdit: note.content.appendEditorFontEdit,\n            fontSize: note.content.appendEditorFontSize,\n            fontView: note.content.appendEditorFontView,\n            monacoEditorLanguage: note.content.appendEditorMonacoEditorLanguage,\n          },\n          () => {\n            if (debugMode) {\n              console.log(\n                'AppendEditor.tsx: \\n - loadMetaData() this.state.savingEditorOptions: ' +\n                  this.state.savingEditorOptions\n              );\n            }\n            this.refreshEditor();\n            if (debugMode) {\n              console.log(\n                'editorKit metadata loaded: ' +\n                  '\\n  - loaded customStyles: ' +\n                  this.state.customStyles +\n                  '\\n  - loaded editingMode: ' +\n                  this.state.editingMode +\n                  '\\n  - loaded fontEdit: ' +\n                  this.state.fontEdit +\n                  '\\n  - loaded fontSize: ' +\n                  this.state.fontSize +\n                  '\\n  - loaded fontView: ' +\n                  this.state.fontView +\n                  '\\n  - loaded monacoEditorLanguage: ' +\n                  this.state.monacoEditorLanguage\n              );\n            }\n          }\n        );\n      }\n      // Load append settings\n      if (note.content.appendNewLine || note.content.appendNewParagraph) {\n        this.setState({\n          appendNewLine: note.content.appendNewLine,\n          appendNewParagraph: note.content.appendNewParagraph,\n        });\n      }\n      // Finally, load appendText\n      this.setState(\n        {\n          appendText: note.content.appendText,\n        },\n        () => {\n          /**If both text and appendText are empty,\n           * such as when creating a new note,\n           * and editMode is off,\n           * then open the edit mode\n           */\n          if (\n            !this.state.text &&\n            !this.state.appendText &&\n            !this.state.editMode\n          ) {\n            this.onEditMode();\n          }\n        }\n      );\n      if (debugMode) {\n        console.log(\n          '  - loaded append text: ' +\n            this.state.appendText +\n            '\\n  - loaded append newline: ' +\n            this.state.appendNewLine +\n            '\\n  - loaded append new paragraph: ' +\n            this.state.appendNewParagraph +\n            '\\n  - loaded editorKit internal appendText: ' +\n            this.editorKit.internal.note.content.appendText\n        );\n      }\n    });\n  };\n\n  saveText = (text: string) => {\n    this.saveNote(text);\n    this.setState(\n      {\n        text: text,\n      },\n      () => {\n        if (this.state.editingMode === EditingModes.useDynamicEditor) {\n          this.refreshView();\n        } else if (this.state.viewMode && isLongString(text)) {\n          /** If the note text is long, then rendering its markdown will debounce\n           * If the we stop editing for 550 milliseconds, then\n           * automatically refresh the view to force the latest markdown to render\n           * We use 550 because the debounce is 500.\n           */\n          if (this.saveTimer) {\n            clearTimeout(this.saveTimer);\n          }\n          this.saveTimer = setTimeout(() => {\n            this.refreshView();\n          }, 550);\n        }\n        if (debugMode) {\n          console.log('AppendEditor.tsx: saved text:', this.state.text);\n        }\n      }\n    );\n  };\n\n  saveNote = (text: string) => {\n    // This will work in an SN context, but breaks the standalone editor, so we need to catch the error\n    try {\n      this.editorKit.onEditorValueChanged(text);\n    } catch (error) {\n      // Log outside debug mode\n      console.log('Error saving note:', error);\n    }\n  };\n\n  // Entry operations\n\n  appendTextToNote = () => {\n    // Do nothing if there's no append text\n    if (this.state.appendText) {\n      /*\n       * We usually use this.editText() to save the main text\n       * However, we want to save the main text and clear the appendText\n       * Consecutive calls to the component manager does not work well,\n       * so we want to do both with one call to the component manager\n       * This means we need multiple versions of this function depending on what we want to save */\n      const { appendText } = this.state;\n      let textToAppend = '';\n      // We test for new paragraph first even though new line is on top and is on by default\n      if (this.state.appendNewParagraph) {\n        textToAppend = '  \\n\\n' + appendText;\n      } else if (this.state.appendNewLine) {\n        textToAppend = '  \\n' + appendText;\n      } else {\n        textToAppend = appendText;\n      }\n      this.setState(\n        {\n          text: this.state.text.concat(textToAppend),\n          appendText: '',\n        },\n        () => {\n          let note = this.editorKit.internal.note;\n          if (note) {\n            this.editorKit.internal.componentManager.saveItemWithPresave(\n              note,\n              () => {\n                note.content.text = this.state.text; // this.editorKit.internal.note.content.text\n                note.content.appendText = this.state.appendText; // this.editorKit.internal.note.content.appendText\n              }\n            );\n          }\n          this.refreshEdit();\n          // Refresh view mode if using dynamic\n          if (this.state.editingMode === EditingModes.useDynamicEditor) {\n            this.refreshView();\n          } else if (isLongString(this.state.text)) {\n            setTimeout(() => {\n              this.refreshView();\n              setTimeout(() => {\n                this.skipToBottom();\n              }, 250);\n            }, 550);\n          }\n          setTimeout(() => {\n            this.skipToBottom();\n          }, 250);\n        }\n      );\n    }\n    // Refresh appendCodeMirror\n    if (\n      this.state.appendCodeMirror &&\n      this.state.editingMode === EditingModes.useCodeMirror\n    ) {\n      this.state.appendCodeMirror.setValue('');\n    }\n  };\n\n  autoSaveAppendText = (text: string) => {\n    // This code is similar to this.onAppend();, but we only save the appendText and not the main text\n    this.setState({\n      appendText: text,\n    });\n    // This will work in an SN context, but breaks the standalone editor, so we need to catch the error\n    try {\n      let note = this.editorKit.internal.note;\n      if (note) {\n        this.editorKit.internal.componentManager.saveItemWithPresave(\n          note,\n          () => {\n            note.content.appendText = text;\n          }\n        );\n      }\n    } catch (error) {\n      // Log outside debug mode\n      console.log('Error saving appendText:', error);\n    }\n  };\n\n  autoSaveCheckBoxes = (newLine: boolean, newParagraph: boolean) => {\n    // Here we save the appendText, appendNewLine, and appendNewParagraph\n    // We have an additional function for this because we only call it when the user clicks a checkbox\n    this.setState({\n      appendNewLine: newLine,\n      appendNewParagraph: newParagraph,\n    });\n    // This will work in an SN context, but breaks the standalone editor, so we need to catch the error\n    try {\n      let note = this.editorKit.internal.note;\n      if (note) {\n        this.editorKit.internal.componentManager.saveItemWithPresave(\n          note,\n          () => {\n            note.content.appendNewLine = newLine;\n            note.content.appendNewParagraph = newParagraph;\n          }\n        );\n      }\n    } catch (error) {\n      // Log outside debug mode\n      console.log('Error saving checkboxes:', error);\n    }\n  };\n\n  refreshEdit = () => {\n    this.setState(\n      {\n        refreshEdit: !this.state.refreshEdit,\n      },\n      () => {\n        // We could also check for this.state.editMode,\n        // but it might not be loaded yet.\n        // Checking for editTextArea checks whether editMode has loaded\n        const editTextArea = document.getElementById(\n          HtmlElementId.editTextArea\n        );\n        if (\n          editTextArea &&\n          this.state.editingMode === EditingModes.useCodeMirror\n        ) {\n          this.configureCodeMirror(HtmlElementId.editTextArea);\n        }\n      }\n    );\n  };\n\n  refreshView = () => {\n    this.setState({\n      refreshView: !this.state.refreshView,\n    });\n  };\n\n  configureCodeMirror = (id: string) => {\n    if (id === HtmlElementId.editTextArea) {\n      if (debugMode) {\n        console.log('this.state.text: ' + this.state.text);\n      }\n      const editTextArea = document.getElementById(id) as HTMLTextAreaElement;\n      if (editTextArea) {\n        const editCodeMirror = CodeMirror.fromTextArea(editTextArea, {\n          autocorrect: true,\n          autocapitalize: true,\n          extraKeys: {\n            Enter: 'newlineAndIndentContinueMarkdownList',\n            'Alt-F': 'findPersistent',\n          },\n          lineNumbers: false,\n          lineWrapping: true,\n          mode: 'gfm',\n          spellcheck: true,\n          //@ts-ignore\n          styleSelectedText: true,\n          tabindex: 0,\n          theme: 'default',\n          value: this.state.text,\n        });\n        editCodeMirror.setSize('100%', '100%');\n        editCodeMirror.on('change', () => {\n          const editCodeMirrorText = editCodeMirror.getValue();\n          if (debugMode) {\n            console.log('editCodeMirror value: ' + editCodeMirrorText);\n          }\n          editCodeMirror.save();\n          this.saveText(editCodeMirrorText);\n        });\n        editCodeMirror.on('keydown', (cm: Editor, event: KeyboardEvent) => {\n          this.onKeyDown(event);\n          this.onKeyDownEditTextArea(event);\n          this.onKeyDownTextArea(event);\n        });\n        editCodeMirror.on('keyup', (cm: Editor, event: KeyboardEvent) => {\n          this.onKeyUp(event);\n        });\n        this.setState({\n          editCodeMirror: editCodeMirror,\n        });\n      }\n    } else if (id === HtmlElementId.appendTextArea) {\n      const appendTextArea = document.getElementById(\n        HtmlElementId.appendTextArea\n      ) as HTMLTextAreaElement;\n      if (appendTextArea) {\n        const appendCodeMirror = CodeMirror.fromTextArea(appendTextArea, {\n          autocorrect: true,\n          autocapitalize: true,\n          extraKeys: {\n            Enter: 'newlineAndIndentContinueMarkdownList',\n            'Alt-F': 'findPersistent',\n          },\n          lineNumbers: false,\n          lineWrapping: true,\n          mode: 'gfm',\n          spellcheck: true,\n          //@ts-ignore\n          styleSelectedText: true,\n          tabindex: 0,\n          theme: 'default',\n          value: this.state.appendText,\n        });\n        appendCodeMirror.setSize('100%', '100%');\n        appendCodeMirror.on('change', () => {\n          const appendCodeMirrorText = appendCodeMirror.getValue();\n          appendCodeMirror.save();\n          this.autoSaveAppendText(appendCodeMirrorText);\n        });\n        appendCodeMirror.on('keydown', (cm: Editor, event: KeyboardEvent) => {\n          this.onKeyDown(event);\n          this.onKeyDownAppendTextArea(event);\n          this.onKeyDownTextArea(event);\n        });\n        appendCodeMirror.on('keyup', (cm: Editor, event: KeyboardEvent) => {\n          this.onKeyUp(event);\n        });\n        this.setState({\n          appendCodeMirror: appendCodeMirror,\n        });\n      }\n    }\n  };\n\n  makeContentEditable = () => {\n    const content = document.getElementById(HtmlElementId.content);\n    if (content) {\n      content.setAttribute('contenteditable', 'true');\n      content.setAttribute('spellcheck', 'true');\n    }\n    const appendix = document.getElementById(HtmlElementId.appendix);\n    if (appendix) {\n      appendix.setAttribute('contenteditable', 'true');\n      appendix.setAttribute('spellcheck', 'true');\n    }\n    // Change contenteditable to false for rendered note\n    const renderedNote = document.getElementById('renderedNote');\n    if (renderedNote) {\n      renderedNote.setAttribute('contenteditable', 'false');\n    }\n    const appendCustom = document.getElementById('appendCustom');\n    if (appendCustom) {\n      appendCustom.setAttribute('contenteditable', 'false');\n    }\n  };\n\n  removeContentEditable = (id: string) => {\n    const container = document.getElementById(id);\n    if (container) {\n      container.setAttribute('contenteditable', 'false');\n    }\n  };\n\n  // Event Handlers\n  onEditMode = () => {\n    // if Append box is empty, close it and open Edit mode\n    // if Edit mode is on, then close it, open View mode, and Append mode\n    if (!this.state.editMode) {\n      if (this.state.appendMode && !this.state.appendText) {\n        this.setState({\n          appendMode: false,\n        });\n      }\n      this.setState(\n        {\n          editMode: true,\n        },\n        () => {\n          const editTextArea = document.getElementById(\n            HtmlElementId.editTextArea\n          );\n          if (editTextArea) {\n            editTextArea.focus();\n            if (this.state.editingMode === EditingModes.useCodeMirror) {\n              this.configureCodeMirror(HtmlElementId.editTextArea);\n            }\n          }\n        }\n      );\n    } else if (this.state.editMode) {\n      /**If edit mode is on and Monaco Editor is off,\n       * then turn edit mode off and turn view mode on.\n       * This automatically renders the text. We do not\n       * do this when Monaco is on because refreshing edit Mode\n       * with Monaco Editor off allows us to resize the Monaco Editor.\n       */\n      if (!(this.state.editingMode === EditingModes.useMonacoEditor)) {\n        this.setState({\n          viewMode: true,\n        });\n      }\n      if (this.state.editCodeMirror) {\n        this.state.editCodeMirror.toTextArea();\n      }\n      this.setState(\n        {\n          editMode: false,\n        },\n        () => {\n          // if not using append mode, focus on editButton\n          if (!this.state.appendMode) {\n            const editButton = document.getElementById(\n              HtmlElementId.editButton\n            );\n            if (editButton) {\n              editButton.focus();\n            }\n          }\n        }\n      );\n    }\n  };\n\n  onAppendMode = (scrollDown = true, closeEdit = true, focus = true) => {\n    if (!this.state.appendMode) {\n      if (closeEdit) {\n        this.setState({\n          editMode: false,\n        });\n      }\n      this.setState(\n        {\n          appendMode: true,\n        },\n        () => {\n          if (scrollDown) {\n            this.scrollToBottom();\n          }\n          if (focus) {\n            const appendTextArea = document.getElementById(\n              HtmlElementId.appendTextArea\n            );\n            if (appendTextArea) {\n              appendTextArea.focus();\n              if (this.state.editingMode === EditingModes.useCodeMirror) {\n                this.configureCodeMirror(HtmlElementId.appendTextArea);\n              }\n            }\n          }\n        }\n      );\n    } else if (this.state.appendMode) {\n      if (this.state.appendCodeMirror) {\n        this.state.appendCodeMirror.toTextArea();\n      }\n      this.setState(\n        {\n          appendMode: false,\n        },\n        () => {\n          if (this.state.editingMode === EditingModes.useMonacoEditor) {\n            this.refreshEdit();\n          }\n          if (focus) {\n            const appendButton = document.getElementById(\n              HtmlElementId.appendButton\n            );\n            if (appendButton) {\n              appendButton.focus();\n            }\n          }\n        }\n      );\n    }\n  };\n\n  onViewMode = () => {\n    if (!this.state.viewMode) {\n      this.setState(\n        {\n          viewMode: true,\n        },\n        () => {\n          if (this.state.editingMode === EditingModes.useMonacoEditor) {\n            this.refreshEdit();\n          }\n          if (this.state.appendMode && !this.state.editMode) {\n            this.skipToBottom();\n          }\n        }\n      );\n    }\n    if (this.state.viewMode) {\n      this.setState(\n        {\n          viewMode: false,\n        },\n        () => {\n          if (this.state.editingMode === EditingModes.useMonacoEditor) {\n            this.refreshEdit();\n          }\n          if (!this.state.editMode && !this.state.appendMode) {\n            this.onEditMode();\n          }\n        }\n      );\n    }\n  };\n\n  toggleShowHelp = () => {\n    this.setState(\n      {\n        showHelp: !this.state.showHelp,\n      },\n      () => {\n        this.refreshView();\n        const helpButton = document.getElementById(HtmlElementId.helpButton);\n        if (helpButton) {\n          helpButton.focus();\n        }\n      }\n    );\n  };\n\n  toggleShowMenu = () => {\n    this.setState(\n      {\n        showMenu: !this.state.showMenu,\n      },\n      () => {\n        const menuButton = document.getElementById(HtmlElementId.menuButton);\n        if (menuButton) {\n          menuButton.focus();\n        }\n      }\n    );\n  };\n\n  loadDefaultMenuState = () => {\n    this.setState({\n      showMenuOptionsEdit: false,\n      showMenuOptionsShare: true,\n      showMenuOptionsView: true,\n    });\n  };\n\n  toggleShowMenuOptionsEdit = () => {\n    this.setState({ showMenuOptionsEdit: !this.state.showMenuOptionsEdit });\n  };\n\n  toggleShowMenuOptionsShare = () => {\n    this.setState({ showMenuOptionsShare: !this.state.showMenuOptionsShare });\n  };\n\n  toggleShowMenuOptionsView = () => {\n    this.setState({ showMenuOptionsView: !this.state.showMenuOptionsView });\n  };\n\n  toggleBorderlessMode = () => {\n    this.setState(\n      {\n        borderlessMode: !this.state.borderlessMode,\n      },\n      () => {\n        this.activateFixedHeader();\n        this.saveMenuOptions();\n      }\n    );\n  };\n\n  toggleFixedHeightMode = () => {\n    this.setState(\n      {\n        fixedHeightMode: !this.state.fixedHeightMode,\n      },\n      () => {\n        this.activateFixedHeader();\n        this.saveMenuOptions();\n      }\n    );\n  };\n\n  toggleFullWidthMode = () => {\n    this.setState(\n      {\n        fullWidthMode: !this.state.fullWidthMode,\n      },\n      () => {\n        this.activateFixedHeader();\n        this.saveMenuOptions();\n      }\n    );\n  };\n\n  toggleOverflowMode = () => {\n    this.setState(\n      {\n        overflowMode: !this.state.overflowMode,\n      },\n      () => {\n        this.activateFixedHeader();\n        this.saveMenuOptions();\n      }\n    );\n  };\n\n  saveMenuOptions = () => {\n    let currentMenuOptions: menuOptions;\n    currentMenuOptions = {\n      borderlessMode: this.state.borderlessMode,\n      fixedHeightMode: this.state.fixedHeightMode,\n      fullWidthMode: this.state.fullWidthMode,\n      overflowMode: this.state.overflowMode,\n      /**These are turned off to prevent excess re-rendering of the note when opening/closing the menu */\n      //showMenuOptionsEdit: this.state.showMenuOptionsEdit,\n      //showMenuOptionsShare: this.state.showMenuOptionsShare,\n      //showMenuOptionsView: this.state.showMenuOptionsView,\n    };\n    this.saveEditorOption('menuOptions', JSON.stringify(currentMenuOptions));\n  };\n\n  saveEditorOption = (\n    optionKey: string,\n    optionValue: string | boolean | undefined\n  ) => {\n    this.setState(\n      {\n        savingEditorOptions: true,\n      },\n      () => {\n        try {\n          this.editorKit.internal.componentManager.setComponentDataValueForKey(\n            optionKey,\n            optionValue\n          );\n          /** this.configureEditorKit() is triggered\n           * every time setComponentDataValueForKey is triggered, but\n           * savingEditorOptions prevents the callback from triggering.\n           * Then, after the timeout, the new default settings or options can\n           * take into effect immediately.\n           * However, if you switch the note within the timeout, you will get an error.\n           * I have tried 150 and 200 but they both are not long enough. 250 is short enough\n           * to work, but not long enough to be easily noticeable.\n           * We do not load editor options because they are optional and persist through\n           * this.configureEditorKit().\n           * */\n          setTimeout(() => {\n            this.setState(\n              {\n                savingEditorOptions: false,\n              },\n              () => {\n                this.loadDefaultSettings();\n                this.loadMetaData();\n              }\n            );\n          }, 250);\n        } catch (error) {\n          console.log(\n            'Error saving editor option. Your optionKey:',\n            optionKey,\n            '\\n - Your optionValue: ',\n            optionValue,\n            '\\n - The error: ',\n            error\n          );\n          this.setState(\n            {\n              savingEditorOptions: false,\n            },\n            () => {\n              /** We use refreshEditor() if there's an error (such as in the demo)\n               * But not in the actual editor because loadDefaultSettings and loadMetaData\n               * will run refreshEditor() twice, and if there's no issue saving editor options,\n               * then there's probably no issue loading default settings and metadata.\n               * */\n              this.refreshEditor();\n              this.loadDefaultSettings();\n              this.loadMetaData();\n            }\n          );\n        }\n      }\n    );\n  };\n\n  onSettingsMode = () => {\n    // Here we save the current state. We reload the current state if we cancel\n    if (!this.state.settingsMode) {\n      this.removeFixedHeader();\n      this.setState(\n        {\n          currentState: this.state,\n        },\n        () => {\n          this.setState(\n            {\n              appendMode: false,\n              editMode: false,\n              fullWidthMode: false,\n              fixedHeightMode: false,\n              settingsMode: true,\n              showAppendix: false, // Hides the scroll up/down buttons\n              showHeader: false,\n              showMenu: false,\n              viewMode: false,\n            },\n            () => {\n              const undoDialog = document.getElementById('undoDialog');\n              if (undoDialog) {\n                undoDialog.focus();\n              }\n            }\n          );\n        }\n      );\n    } else if (this.state.settingsMode) {\n      this.setState(\n        {\n          ...this.state.currentState,\n          settingsMode: false,\n        },\n        () => {\n          this.refreshEdit();\n          const settingsButton = document.getElementById(\n            HtmlElementId.settingsButton\n          );\n          if (settingsButton) {\n            settingsButton.focus();\n          }\n        }\n      );\n    }\n  };\n\n  // We don't save the current state and reload it after confirm settings are saved\n  // This requires us to manually reload editMode and appendMode\n  // This is important for settings, especially useCodeMirror\n  onSaveSettings = ({\n    customStyles,\n    editingMode,\n    fontEdit,\n    fontSize,\n    fontView,\n    monacoEditorLanguage,\n    saveAsDefault,\n  }: SaveSettingsInterface) => {\n    this.setState(\n      {\n        customStyles,\n        editingMode,\n        fontEdit,\n        fontSize,\n        fontView,\n        monacoEditorLanguage,\n        showAppendix: true,\n        showHeader: true,\n        settingsMode: false,\n        viewMode: true,\n      },\n      () => {\n        this.refreshEditor();\n        const settingsButton = document.getElementById(\n          HtmlElementId.settingsButton\n        );\n        if (settingsButton) {\n          settingsButton.focus();\n        }\n      }\n    );\n    let note = this.editorKit.internal.note;\n    if (note) {\n      if (debugMode) {\n        console.log(\n          'AppendEditor.tsx: \\n - onSaveSettings() this.editorKit.internal.componentManager.saveItemWithPresave() triggered'\n        );\n      }\n      this.editorKit.internal.componentManager.saveItemWithPresave(note, () => {\n        note.content.appendEditorCustomStyles = customStyles;\n        note.content.appendEditorEditingMode = editingMode;\n        note.content.appendEditorFontEdit = fontEdit;\n        note.content.appendEditorFontSize = fontSize;\n        note.content.appendEditorFontView = fontView;\n        note.content.appendEditorMonacoEditorLanguage = monacoEditorLanguage;\n      });\n      if (debugMode) {\n        console.log(\n          'AppendEditor.tsx: \\n - onSaveSettings() this.editorKit.internal.componentManager.saveItemWithPresave() completed'\n        );\n      }\n    }\n    if (saveAsDefault) {\n      this.setState(\n        {\n          defaultSettings: {\n            customStyles,\n            editingMode,\n            fontEdit,\n            fontSize,\n            fontView,\n            monacoEditorLanguage,\n          },\n        },\n        () => {\n          if (debugMode) {\n            console.log(\n              'AppendEditor.tsx: \\n - onSaveSettings() this.state.savingEditorOptions: ' +\n                this.state.savingEditorOptions +\n                '\\n JSON.stringify(this.state.defaultSettings):',\n              JSON.stringify(this.state.defaultSettings)\n            );\n          }\n          this.saveEditorOption(\n            'defaultSettings',\n            JSON.stringify(this.state.defaultSettings)\n          );\n        }\n      );\n    }\n  };\n\n  activateStyles = () => {\n    if (debugMode) {\n      console.log('AppendEditor.tsx: \\n - this.activateStyles() triggered');\n    }\n    const sheetToBeRemoved = document.getElementById('customStyleSheet');\n    if (sheetToBeRemoved) {\n      const sheetParent = sheetToBeRemoved.parentNode;\n      if (sheetParent) {\n        sheetParent.removeChild(sheetToBeRemoved);\n      }\n    }\n    // Follow the order that appears in the Settings to make the Settings cascade\n    let fontSizeStyle = '';\n    if (this.state.fontSize) {\n      fontSizeStyle =\n        '.CodeMirror, .DynamicEditor, .MonacoEditorContainer, .ProseMirror, #editTextArea, #appendTextArea, #renderedNote {font-size: ' +\n        this.state.fontSize +\n        ';}\\n';\n    }\n    let fontEditStyle = '';\n    if (this.state.fontEdit) {\n      fontEditStyle =\n        '.CodeMirror, .DynamicEditor, .ProseMirror, #editTextArea, #appendTextArea {font-family: ' +\n        this.state.fontEdit +\n        ';}\\n';\n    }\n    let fontViewStyle = '';\n    if (this.state.fontView) {\n      fontViewStyle =\n        '#renderedNote {font-family: ' + this.state.fontView + ';}\\n';\n    }\n    if (\n      this.state.customStyles ||\n      this.state.fontEdit ||\n      this.state.fontSize ||\n      this.state.fontView\n    ) {\n      const sheet = document.createElement('style');\n      sheet.setAttribute('id', 'customStyleSheet');\n      // Follow the order that appears in the Settings to make the Settings cascade\n      sheet.innerHTML =\n        fontSizeStyle + fontEditStyle + fontViewStyle + this.state.customStyles;\n      document.body.appendChild(sheet);\n    }\n  };\n\n  onCancelPrint = () => {\n    this.setState(\n      {\n        confirmPrintUrl: false,\n      },\n      () => {\n        const printButton = document.getElementById(HtmlElementId.printButton);\n        if (printButton) {\n          printButton.focus();\n        }\n      }\n    );\n  };\n\n  onConfirmPrintUrl = () => {\n    this.setState(\n      {\n        confirmPrintUrl: true,\n      },\n      () => {\n        const undoDialog = document.getElementById('undoDialog');\n        if (undoDialog) {\n          undoDialog.focus();\n        }\n      }\n    );\n  };\n\n  onPrintUrlTrue = () => {\n    this.setState(\n      {\n        confirmPrintUrl: false,\n        printURL: true,\n      },\n      () => {\n        this.printRenderedHtml();\n      }\n    );\n  };\n\n  onPrintUrlFalse = () => {\n    this.setState(\n      {\n        confirmPrintUrl: false,\n        printURL: false,\n      },\n      () => {\n        this.printRenderedHtml();\n      }\n    );\n  };\n\n  printRenderedHtml = () => {\n    window.print();\n    const printButton = document.getElementById(HtmlElementId.printButton);\n    if (printButton) {\n      printButton.focus();\n    }\n  };\n\n  goDown = () => {\n    document.body.scrollTop = 10000000; // for Safari\n    if (this.state.editMode) {\n      const editTextArea = document.getElementById(HtmlElementId.editTextArea);\n      if (editTextArea) {\n        editTextArea.scrollTop = 10000000;\n      }\n    }\n    if (this.state.appendMode) {\n      const appendTextArea = document.getElementById(\n        HtmlElementId.appendTextArea\n      );\n      if (appendTextArea) {\n        appendTextArea.scrollTop = 10000000;\n      }\n    }\n    if (this.state.fixedHeightMode) {\n      const view = document.getElementById(HtmlElementId.view);\n      if (view) {\n        view.scrollTop = 10000000;\n      }\n    }\n    const view = document.getElementById(HtmlElementId.view);\n    if (view) {\n      view.scrollTop = 10000000;\n    }\n  };\n\n  scrollToBottom = () => {\n    this.goDown();\n    const appendix = document.getElementById(HtmlElementId.appendix);\n    if (appendix) {\n      appendix.scrollIntoView({\n        behavior: 'smooth',\n        block: 'end', // Bottom\n        inline: 'nearest',\n      });\n    }\n  };\n\n  // Skip to Bottom is fast \"auto\" behavior instead of \"smooth\" behavior\n  skipToBottom = () => {\n    this.goDown();\n    const appendix = document.getElementById(HtmlElementId.appendix);\n    if (appendix) {\n      appendix.scrollIntoView({\n        behavior: 'auto',\n        block: 'end', // Bottom\n        inline: 'nearest',\n      });\n    }\n  };\n\n  goUp = () => {\n    document.body.scrollTop = 0; // for Safari\n    if (this.state.editMode) {\n      const editTextArea = document.getElementById(HtmlElementId.editTextArea);\n      if (editTextArea) {\n        editTextArea.scrollTop = 0;\n      }\n    }\n    if (this.state.appendMode) {\n      const appendTextArea = document.getElementById(\n        HtmlElementId.appendTextArea\n      );\n      if (appendTextArea) {\n        appendTextArea.scrollTop = 0;\n      }\n    }\n    if (this.state.fixedHeightMode) {\n      const view = document.getElementById(HtmlElementId.view);\n      if (view) {\n        view.scrollTop = 0;\n      }\n    }\n  };\n\n  scrollToTop = () => {\n    this.goUp();\n    const top = document.getElementById('top');\n    if (top) {\n      top.scrollIntoView({\n        behavior: 'smooth',\n        block: 'start', // Top\n        inline: 'nearest',\n      });\n    }\n  };\n\n  // Need both content and appendix for mobile\n  // Skip to Bottom is fast \"auto\" behavior instead of \"smooth\" behavior\n  skipToTop = () => {\n    this.goUp();\n    const top = document.getElementById('top');\n    if (top) {\n      top.scrollIntoView({\n        behavior: 'auto',\n        block: 'start', // Top\n        inline: 'nearest',\n      });\n    }\n  };\n\n  onKeyDown = (e: React.KeyboardEvent | KeyboardEvent) => {\n    keyMap.set(e.key, true);\n    // Click the top Append if 'Control' and 'e' are pressed\n    if (keyMap.get('Control') && keyMap.get('e')) {\n      e.preventDefault();\n      this.onEditMode();\n    }\n    // Click the top Append if 'Control' and 'u' are pressed\n    else if (\n      keyMap.get('Control') &&\n      !keyMap.get('Alt') &&\n      (keyMap.get('u') || keyMap.get('m'))\n    ) {\n      e.preventDefault();\n      this.onAppendMode();\n    }\n    // Click view if 'Control' and 'p' are pressed\n    else if (keyMap.get('Control') && !keyMap.get('Alt') && keyMap.get('p')) {\n      e.preventDefault();\n      this.onViewMode();\n    } else if (keyMap.get('Control') && keyMap.get('.')) {\n      e.preventDefault();\n      this.setState({\n        appendRows: this.state.appendRows + 1,\n      });\n    } else if (keyMap.get('Control') && keyMap.get(',')) {\n      e.preventDefault();\n      if (this.state.appendRows > 5) {\n        this.setState({\n          appendRows: this.state.appendRows - 1,\n        });\n      }\n    } else if (keyMap.get('Control') && keyMap.get('<')) {\n      // Edit only mode\n      e.preventDefault();\n      this.setState(\n        {\n          appendMode: false,\n          editMode: false,\n          viewMode: false,\n        },\n        () => {\n          this.onEditMode();\n        }\n      );\n    } else if (keyMap.get('Control') && keyMap.get('>')) {\n      // Append only mode\n      e.preventDefault();\n      this.setState(\n        {\n          appendMode: false,\n          editMode: false,\n          viewMode: false,\n        },\n        () => {\n          this.onAppendMode();\n        }\n      );\n    } else if (keyMap.get('Control') && keyMap.get('[')) {\n      e.preventDefault();\n      this.skipToTop();\n    } else if (keyMap.get('Control') && keyMap.get(']')) {\n      e.preventDefault();\n      this.skipToBottom();\n    } else if (\n      keyMap.get('Control') &&\n      !keyMap.get('Alt') &&\n      !keyMap.get('Shift') &&\n      keyMap.get('w')\n    ) {\n      keyMap.delete('w');\n    }\n  };\n\n  onKeyDownAppendTextArea = (e: React.KeyboardEvent | KeyboardEvent) => {\n    // Close Append Mode if 'Escape' is pressed\n    if (keyMap.get('Escape')) {\n      e.preventDefault();\n      keyMap.delete('Escape');\n      this.onAppendMode();\n    }\n    // Save note if Control and Enter are pressed\n    else if (keyMap.get('Control') && keyMap.get('Enter')) {\n      e.preventDefault();\n      if (this.state.editingMode === EditingModes.useCodeMirror) {\n        this.appendTextToNote();\n      }\n    }\n    // Save note if Control and S are pressed\n    else if (keyMap.get('Control') && keyMap.get('s')) {\n      e.preventDefault();\n      if (this.state.editingMode === EditingModes.useCodeMirror) {\n        this.appendTextToNote();\n      }\n    }\n    // Toggle Append New Line if Ctrl + Alt + N are pressed\n    else if (\n      keyMap.get('Control') &&\n      !keyMap.get('Shift') &&\n      keyMap.get('Alt') &&\n      keyMap.get('n')\n    ) {\n      e.preventDefault();\n      const newLine = document.getElementById(HtmlElementId.newLine);\n      if (newLine) {\n        newLine.click();\n      }\n    }\n    // Toggle Append New Line if Ctrl + Alt + P are pressed\n    else if (\n      keyMap.get('Control') &&\n      !keyMap.get('Shift') &&\n      keyMap.get('Alt') &&\n      keyMap.get('p')\n    ) {\n      e.preventDefault();\n      const newParagraph = document.getElementById(HtmlElementId.newParagraph);\n      if (newParagraph) {\n        newParagraph.click();\n      }\n    }\n  };\n\n  onKeyDownEditTextArea = (e: React.KeyboardEvent | KeyboardEvent) => {\n    // Close EditMode if 'Escape' is pressed\n    if (keyMap.get('Escape')) {\n      e.preventDefault();\n      keyMap.set('Escape', false);\n      this.onEditMode();\n    }\n  };\n\n  onKeyDownTextArea = (e: React.KeyboardEvent | KeyboardEvent) => {\n    // Add two spaces and line break if Shift and Enter are pressed\n    if (keyMap.get('Shift') && keyMap.get('Enter')) {\n      e.preventDefault();\n      document.execCommand('insertText', false, '  \\n');\n    }\n    // Add two stars if Control + b are pressed\n    else if (keyMap.get('Control') && keyMap.get('b')) {\n      e.preventDefault();\n      document.execCommand('insertText', false, '**');\n    }\n    // Add header when pressing Control + H\n    else if (keyMap.get('Control') && keyMap.get('h')) {\n      e.preventDefault();\n      document.execCommand('insertText', false, '#');\n    }\n    // Add image code if Control + Alt and i are pressed\n    else if (keyMap.get('Control') && keyMap.get('Alt') && keyMap.get('i')) {\n      e.preventDefault();\n      document.execCommand('insertText', false, '![]()');\n    }\n    // Add one stars if Control + i is pressed\n    else if (keyMap.get('Control') && keyMap.get('i')) {\n      e.preventDefault();\n      document.execCommand('insertText', false, '*');\n    }\n    // Add inline code if Control + Alt and k are pressed\n    else if (keyMap.get('Control') && keyMap.get('Alt') && keyMap.get('k')) {\n      e.preventDefault();\n      document.execCommand('insertText', false, '`');\n    }\n    // Add link if Control + k are pressed\n    else if (keyMap.get('Control') && keyMap.get('k')) {\n      e.preventDefault();\n      document.execCommand('insertText', false, '[]()');\n    }\n    // Add ordered list item if Control + Alt + l are pressed\n    else if (keyMap.get('Control') && keyMap.get('Alt') && keyMap.get('l')) {\n      e.preventDefault();\n      document.execCommand('insertText', false, '\\n1. ');\n    }\n    // Add unordered list item if Control + l are pressed\n    else if (keyMap.get('Control') && keyMap.get('l')) {\n      e.preventDefault();\n      document.execCommand('insertText', false, '\\n- ');\n    }\n    // Add strike through if Control + Alt + u are pressed\n    else if (keyMap.get('Control') && keyMap.get('Alt') && keyMap.get('u')) {\n      e.preventDefault();\n      document.execCommand('insertText', false, '~~');\n    }\n    // Add quote Control + q, Control + ' or Control + \" are pressed\n    else if (\n      (keyMap.get('Control') && keyMap.get('q')) ||\n      (keyMap.get('Control') && keyMap.get(\"'\")) ||\n      (keyMap.get('Control') && keyMap.get('\"'))\n    ) {\n      e.preventDefault();\n      document.execCommand('insertText', false, '\\n> ');\n    }\n  };\n\n  onKeyUp = (e: React.KeyboardEvent | KeyboardEvent) => {\n    keyMap.delete(e.key);\n  };\n\n  onBlur = (e: React.FocusEvent) => {\n    keyMap.clear();\n  };\n\n  onScroll = (e: Event) => {\n    if (!this.state.settingsMode) {\n      if (window.scrollY < last_known_scroll_position) {\n        // If scrolling up, fix header\n        this.activateFixedHeader();\n      } else if (\n        // If scrolling down, unfix header\n        window.scrollY > last_known_scroll_position &&\n        !this.state.showMenu\n      ) {\n        this.removeFixedHeader();\n      }\n      last_known_scroll_position = window.scrollY;\n    }\n  };\n\n  activateFixedHeader = () => {\n    const header = document.getElementById(HtmlElementId.header);\n    const content = document.getElementById(HtmlElementId.content);\n    // Activate only if we have both\n    if (header && content) {\n      header.classList.add(HtmlClassName.fixed);\n      content.classList.add(HtmlClassName.fixedHeader);\n    }\n  };\n\n  removeFixedHeader = () => {\n    const header = document.getElementById(HtmlElementId.header);\n    const content = document.getElementById(HtmlElementId.content);\n    /** Remove both even if you don't have both\n     * This is needed for loading settings\n     */\n    if (header) {\n      header.classList.remove(HtmlClassName.fixed);\n    }\n    if (content) {\n      content.classList.remove(HtmlClassName.fixedHeader);\n    }\n  };\n\n  render() {\n    return [\n      <span id=\"top\"></span>,\n      <div\n        tabIndex={0}\n        className=\"sn-component\"\n        onKeyDown={this.onKeyDown}\n        onKeyUp={this.onKeyUp}\n        onBlur={this.onBlur}\n      >\n        {this.state.showHeader && [\n          <div id={HtmlElementId.header} className={'header'}>\n            <div className=\"sk-button-group\">\n              <button\n                type=\"button\"\n                id={HtmlElementId.editButton}\n                onClick={this.onEditMode}\n                title=\"Toggle Edit Mode\"\n                className={'sk-button ' + (this.state.editMode ? 'on' : 'off')}\n              >\n                <PencilIcon condition={this.state.editMode} role=\"button\" />\n              </button>\n              <button\n                type=\"button\"\n                id={HtmlElementId.viewButton}\n                onClick={this.onViewMode}\n                title=\"Toggle View Mode\"\n                className={'sk-button ' + (this.state.viewMode ? 'on' : 'off')}\n              >\n                <EyeIcon condition={this.state.viewMode} role=\"button\" />\n              </button>\n              <button\n                type=\"button\"\n                id={HtmlElementId.appendButton}\n                onClick={() => this.onAppendMode()}\n                title=\"Toggle Append Mode\"\n                className={\n                  'sk-button ' + (this.state.appendMode ? 'on' : 'off')\n                }\n              >\n                <PlusIcon condition={this.state.appendMode} role={'button'} />\n              </button>\n              <div className=\"sk-button divider\">\n                <svg\n                  role=\"img\"\n                  aria-label=\"Vertical line divider\"\n                  width=\"1\"\n                  height=\"24\"\n                  viewBox=\"0 0 1 24\"\n                  fill=\"none\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <rect\n                    width=\"1\"\n                    height=\"24\"\n                    fill={'var(--sn-stylekit-foreground-color)'}\n                  />\n                </svg>\n              </div>\n              <button\n                type=\"button\"\n                id={HtmlElementId.helpButton}\n                onClick={this.toggleShowHelp}\n                title=\"Help\"\n                className={'sk-button ' + (this.state.showHelp ? 'on' : 'off')}\n              >\n                <HelpIcon condition={this.state.showHelp} role={'button'} />\n              </button>\n              <button\n                type=\"button\"\n                id={HtmlElementId.settingsButton}\n                onClick={this.onSettingsMode}\n                title=\"Settings\"\n                className={\n                  'sk-button ' + (this.state.settingsMode ? 'on' : 'off')\n                }\n              >\n                <GearIcon condition={this.state.settingsMode} role=\"button\" />\n              </button>\n              <div className=\"sk-button divider\">\n                <svg\n                  role=\"img\"\n                  aria-label=\"Vertical line divider\"\n                  width=\"1\"\n                  height=\"24\"\n                  viewBox=\"0 0 1 24\"\n                  fill=\"none\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <rect\n                    width=\"1\"\n                    height=\"24\"\n                    fill={'var(--sn-stylekit-foreground-color)'}\n                  />\n                </svg>\n              </div>\n              <button\n                type=\"button\"\n                id=\"scrollToBottomButtonHeader\"\n                onClick={this.skipToBottom}\n                title=\"Scroll to Bottom\"\n                className={'sk-button off'}\n              >\n                <svg\n                  role=\"button\"\n                  aria-label=\"Arrow pointing down for scroll to bottom button\"\n                  width=\"20\"\n                  height=\"20\"\n                  viewBox=\"0 0 20 20\"\n                  fill=\"none\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    d=\"M6.17622 7.15015L10.0012 10.9751L13.8262 7.15015L15.0012 8.33348L10.0012 13.3335L5.00122 8.33348L6.17622 7.15015Z\"\n                    fill={'var(--sn-stylekit-foreground-color)'}\n                  />\n                </svg>\n              </button>\n              <button\n                type=\"button\"\n                id=\"scrollToTopButtonHeader\"\n                onClick={this.skipToTop}\n                title=\"Scroll to Top\"\n                className={'sk-button off'}\n              >\n                <svg\n                  role=\"button\"\n                  aria-label=\"Arrow pointing up for scroll to top button\"\n                  width=\"20\"\n                  height=\"20\"\n                  viewBox=\"0 0 20 20\"\n                  fill=\"none\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    d=\"M13.826 13.3335L10.001 9.5085L6.17597 13.3335L5.00097 12.1502L10.001 7.15017L15.001 12.1502L13.826 13.3335Z\"\n                    fill={'var(--sn-stylekit-foreground-color)'}\n                  />\n                </svg>\n              </button>\n              <button\n                type=\"button\"\n                id={HtmlElementId.menuButton}\n                onClick={this.toggleShowMenu}\n                title=\"Toggle Menu\"\n                className={'sk-button ' + (this.state.showMenu ? 'on' : 'off')}\n              >\n                <MenuIcon condition={this.state.showMenu} role=\"button\" />\n              </button>\n            </div>\n          </div>,\n        ]}\n        <div\n          id={HtmlElementId.content}\n          className={\n            'content' +\n            (this.state.borderlessMode ? ' borderless' : '') +\n            (this.state.fixedHeightMode ? ' fixed-height' : '') +\n            (this.state.fullWidthMode ? ' full-width' : '') +\n            (this.state.overflowMode ? ' overflow' : '')\n          }\n        >\n          {this.state.showMenu && (\n            <Menu\n              borderlessMode={this.state.borderlessMode}\n              editingMode={this.state.editingMode}\n              fixedHeightMode={this.state.fixedHeightMode}\n              fullWidthMode={this.state.fullWidthMode}\n              monacoEditorLanguage={this.state.monacoEditorLanguage}\n              onConfirmPrintUrl={this.onConfirmPrintUrl}\n              overflowMode={this.state.overflowMode}\n              refreshEdit={this.refreshEdit}\n              refreshView={this.refreshView}\n              saveText={this.saveText}\n              showMenuOptionsEdit={this.state.showMenuOptionsEdit}\n              showMenuOptionsShare={this.state.showMenuOptionsShare}\n              showMenuOptionsView={this.state.showMenuOptionsView}\n              text={this.state.text}\n              toggleBorderlessMode={this.toggleBorderlessMode}\n              toggleFixedHeightMode={this.toggleFixedHeightMode}\n              toggleFullWidthMode={this.toggleFullWidthMode}\n              toggleOverflowMode={this.toggleOverflowMode}\n              toggleShowMenu={this.toggleShowMenu}\n              toggleShowMenuOptionsEdit={this.toggleShowMenuOptionsEdit}\n              toggleShowMenuOptionsShare={this.toggleShowMenuOptionsShare}\n              toggleShowMenuOptionsView={this.toggleShowMenuOptionsView}\n              viewMode={this.state.viewMode}\n            />\n          )}\n          {this.state.settingsMode && (\n            <Settings\n              cancelText=\"Cancel\"\n              confirmText=\"Save\"\n              customStyles={this.state.customStyles}\n              debugMode={debugMode}\n              defaultSettings={this.state.defaultSettings}\n              editingMode={this.state.editingMode}\n              fontEdit={this.state.fontEdit}\n              fontSize={this.state.fontSize}\n              fontView={this.state.fontView}\n              helpLink={'https://appendeditor.com/#settings'}\n              keyMap={keyMap}\n              onConfirm={this.onSaveSettings}\n              onCancel={this.onSettingsMode}\n              title={`Append Editor Settings`}\n              monacoEditorLanguage={this.state.monacoEditorLanguage}\n            />\n          )}\n          {this.state.editMode && !this.state.refreshEdit && (\n            <EditNote\n              debugMode={debugMode}\n              editingMode={this.state.editingMode}\n              fontSize={this.state.fontSize}\n              keyMap={keyMap}\n              monacoEditorLanguage={this.state.monacoEditorLanguage}\n              onKeyDown={this.onKeyDown}\n              onKeyDownEditTextArea={this.onKeyDownEditTextArea}\n              onKeyDownTextArea={this.onKeyDownTextArea}\n              onKeyUp={this.onKeyUp}\n              saveText={this.saveText}\n              text={this.state.text}\n              viewMode={this.state.viewMode}\n            />\n          )}\n          {this.state.editMode && this.state.refreshEdit && (\n            <EditNote\n              debugMode={debugMode}\n              editingMode={this.state.editingMode}\n              fontSize={this.state.fontSize}\n              keyMap={keyMap}\n              monacoEditorLanguage={this.state.monacoEditorLanguage}\n              onKeyDown={this.onKeyDown}\n              onKeyDownEditTextArea={this.onKeyDownEditTextArea}\n              onKeyDownTextArea={this.onKeyDownTextArea}\n              onKeyUp={this.onKeyUp}\n              saveText={this.saveText}\n              text={this.state.text}\n              viewMode={this.state.viewMode}\n            />\n          )}\n          {this.state.viewMode && !this.state.refreshView && (\n            <ErrorBoundary>\n              <ViewNote\n                bypassDebounce={this.state.bypassDebounce}\n                debugMode={debugMode}\n                editingMode={this.state.editingMode}\n                monacoEditorLanguage={this.state.monacoEditorLanguage}\n                printURL={this.state.printURL}\n                showHelp={this.state.showHelp}\n                saveText={this.saveText}\n                text={this.state.text}\n              />\n            </ErrorBoundary>\n          )}\n          {this.state.viewMode && this.state.refreshView && (\n            <ErrorBoundary>\n              <ViewNote\n                debugMode={debugMode}\n                bypassDebounce={this.state.bypassDebounce}\n                editingMode={this.state.editingMode}\n                monacoEditorLanguage={this.state.monacoEditorLanguage}\n                printURL={this.state.printURL}\n                showHelp={this.state.showHelp}\n                saveText={this.saveText}\n                text={this.state.text}\n              />\n            </ErrorBoundary>\n          )}\n          {this.state.confirmPrintUrl && (\n            <PrintDialog\n              title={`Would you like to print URLs?`}\n              onUndo={this.onCancelPrint}\n              onConfirm={this.onPrintUrlTrue}\n              onCancel={this.onPrintUrlFalse}\n              helpLink={'https://appendeditor.com/#printing'}\n              confirmText=\"Yes, print URLs\"\n              cancelText=\"No, thanks\"\n            />\n          )}\n          {this.state.showDiff && [\n            <MonacoDiffEditor\n              text={this.state.text}\n              modifiedText={this.state.appendText}\n              saveText={this.saveText}\n            />,\n          ]}\n        </div>\n        {this.state.showAppendix && [\n          <div\n            id={HtmlElementId.appendix}\n            className={\n              'appendix' +\n              (this.state.borderlessMode ? ' borderless' : '') +\n              (this.state.fullWidthMode ? ' full-width' : '')\n            }\n          >\n            {this.state.appendMode && (\n              <AppendText\n                appendTextToNote={this.appendTextToNote}\n                autoSaveAppendText={this.autoSaveAppendText}\n                autoSaveCheckBoxes={this.autoSaveCheckBoxes}\n                debugMode={debugMode}\n                editingMode={this.state.editingMode}\n                fontSize={this.state.fontSize}\n                keyMap={keyMap}\n                appendNewLine={this.state.appendNewLine}\n                appendNewParagraph={this.state.appendNewParagraph}\n                monacoEditorLanguage={this.state.monacoEditorLanguage}\n                onKeyDown={this.onKeyDown}\n                onKeyDownAppendTextArea={this.onKeyDownAppendTextArea}\n                onKeyDownTextArea={this.onKeyDownTextArea}\n                onKeyUp={this.onKeyUp}\n                appendRows={this.state.appendRows}\n                text={this.state.appendText}\n              />\n            )}\n            <button\n              className=\"sk-button info\"\n              id=\"scrollToTopButton\"\n              onClick={this.scrollToTop}\n              title=\"Scroll to Top\"\n              type=\"button\"\n            >\n              <div> ▲ </div>\n            </button>\n            <button\n              className=\"sk-button info\"\n              id=\"scrollToBottomButton\"\n              onClick={this.scrollToBottom}\n              title=\"Scroll to Bottom\"\n              type=\"button\"\n            >\n              <div> ▼ </div>\n            </button>\n          </div>,\n        ]}\n      </div>,\n    ];\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\nimport reportWebVitals from './reportWebVitals';\n\nimport AppendEditor from './components/AppendEditor';\nimport './stylesheets/main.scss';\nReactDOM.render(\n  <React.StrictMode>\n    <AppendEditor />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}