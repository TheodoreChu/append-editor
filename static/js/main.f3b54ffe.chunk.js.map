{"version":3,"sources":["serviceWorker.ts","reportWebVitals.ts","components/PrintDialog.tsx","components/Monaco.tsx","components/EditNote.tsx","components/ViewNote.tsx","components/AppendText.tsx","components/Settings.tsx","components/AppendEditor.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ConfirmDialog","title","onUndo","onConfirm","onCancel","confirmText","cancelText","helpLink","className","id","onClick","width","height","viewBox","fill","xmlns","d","href","target","rel","MonacoEditorContainerID","MonacoDiffEditorContainerID","self","MonacoEnvironment","getWorkerUrl","_moduleId","label","MonacoEditor","editor","fontSize","language","saveText","tabSize","text","theme","viewMode","divEl","useRef","scrollBeyondLastLine","useEffect","current","monaco","create","parseInt","replace","value","join","autoClosingOvertype","formatOnPaste","formatOnType","wordWrap","wrappingStrategy","onKeyDown","e","keyCode","console","log","code","ctrlKey","preventDefault","onKeyUp","onDidChangeModelContent","getValue","dispose","ref","MonacoDiffEditor","diffEditor","modifiedText","originalModel","createModel","modifiedModel","createDiffEditor","originalEditable","readOnly","setModel","original","modified","onDidChangeContent","EditNote","props","handleInputChange","event","setState","state","onKeyDownEditTextArea","onKeyDownTextArea","keyMap","delete","key","this","printMode","useMonacoEditor","MonacoEditorLanguage","name","placeholder","rows","spellCheck","onChange","style","fontFamily","fontEdit","React","Component","defaultProps","gfm","require","breaks","math","rehypeKatex","highlight","emoji","externalLinks","toc","footnotes","slug","raw","processor","unified","use","parse","maxDepth","inlineNotes","remark2rehype","allowDangerousHtml","ignoreMissing","rehype2react","createElement","languageProcessor","ViewNote","onToggleShowFeelings","showFeelings","onToggleShowMoreQuestions","showMoreQuestions","onToggleShowFeedback","showFeedback","onToggleShowHelp","helpButton","document","getElementById","click","showHelp","printURL","textAlign","role","aria-label","onToggle","fontView","processSync","result","appendTextAreaID","AppendText","type","checked","autoSaveCheckBoxes","handleTextAreaChange","autoSaveAppendText","appendTextToNote","appendTextArea","focus","newLine","newParagraph","set","debugMode","get","onKeyDownAppendTextArea","appendNewLine","appendNewParagraph","appendRows","editingModeID","fontEditID","fontSizeID","fontViewID","useCodeMirrorID","useMonacoEditorID","usePlainTextID","MonacoEditorLanguageID","resetAllSettingsID","startRegExp","RegExp","cssRegExp","endRegExp","codeRegExp","Settings","initialEditingMode","useCodeMirror","handleSelectChange","toggleShowCustomStyles","showCustomStyles","cleanCustomStyles","customStyles","handleSubmit","fontEditMessage","fontViewMessage","undefined","clearCustomStyles","clearFontEdit","clearFontSize","clearFontView","clearEditingMode","editingMode","clearMonacoEditorLanguage","clearAllSettings","resetAllSettings","onBlur","clear","componentWillUnmount","htmlFor","list","appendButtonID","editButtonID","helpButtonID","printButtonID","settingsButtonID","headerID","contentID","appendixID","editTextAreaID","initialState","appendMode","appendText","confirmPrintURL","loadedMetaData","refreshEdit","refreshView","showAppendix","showHeader","showDiff","settingsMode","Map","AppendEditor","editorKit","componentDidMount","configureEditorKit","delegate","EditorKitDelegate","setEditorRawText","activateStyles","clearUndoHistory","getElementsBySelector","EditorKit","mode","supportsFilesafe","loadMetaData","internal","componentManager","streamContextItem","note","content","appendEditorCustomStyles","appendEditorFontEdit","appendEditorFontSize","appendEditorFontView","appendEditorMonacoEditorLanguage","appendEditorUseCodeMirror","appendEditorUseMonacoEditor","saveNote","onEditorValueChanged","error","textToAppend","concat","saveItemWithPresave","appendCodeMirror","setValue","editTextArea","configureCodeMirror","onRefreshView","editCodeMirror","CodeMirror","fromTextArea","autocorrect","autocapitalize","extraKeys","Enter","lineNumbers","lineWrapping","spellcheck","styleSelectedText","tabindex","setSize","on","editCodeMirrorText","save","cm","appendCodeMirrorText","makeContentEditable","setAttribute","appendix","renderedNote","appendCustom","removeContentEditable","container","onEditMode","editMode","toTextArea","editButton","onAppendMode","scrollDown","closeEdit","appendButton","scrollToBottom","onPrintMode","print","printButton","onViewMode","skipToBottom","onToggleShowMenu","showMenu","onSettingsMode","currentState","settingsButton","undoDialog","onSaveSettings","sheetToBeRemoved","sheetParent","parentNode","removeChild","sheet","fontEditStyle","fontSizeStyle","fontViewStyle","innerHTML","body","appendChild","onCancelPrint","onConfirmPrintURL","printURLTrue","printURLFalse","scrollTop","scrollIntoView","behavior","block","inline","scrollToTop","header","skipToTop","execCommand","tabIndex","fill-rule","clip-rule","PrintDialog","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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AAnB,UACE,wBAAOsM,QAAS/B,GAAhB,oCAC0B,OAE1B,gCACE,gCACE,yBACEtK,GAAIsK,GACJlF,KAAMkF,GACNlI,MAAO4C,KAAKN,MAAMS,qBAClBK,SAAUR,KAAKgG,mBAJjB,UAME,0CACA,yCACA,0CACA,2CACA,yCACA,uCACA,8CACA,6CACA,kDACA,yCACA,4CACA,yCACA,yCACA,0CACA,gDACA,4CACA,wCACA,6CACA,gDACA,yCACA,0CACA,yCACA,0CACA,gDACA,0CACA,2CACA,4CACA,0CACA,2CACA,yCACA,8CACA,0CACA,2CACA,2CACA,iDACA,4CACA,+CACA,0CACA,2CACA,yCACA,+CACA,8CACA,gDACA,gDACA,yCACA,4CACA,uCACA,2CACA,2CACA,8CACA,sDACA,0CACA,0CACA,wCACA,2CACA,4CACA,0CACA,2CACA,yCACA,yCACA,wCACA,2CACA,mDACA,yCACA,0CACA,gDACA,wCACA,6CACA,yCACA,+CAGJ,wBACE/K,QAAS+E,KAAK+G,0BACdvM,MAAM,2CAFR,SAIE,sBAAMO,UAAU,cAAhB,SACE,qBACEG,MAAM,KACNC,OAAO,KACPC,QAAQ,YACRC,KAAK,OACLC,MAAM,6BALR,SAOE,sBACEC,EAAE,kPACFF,KAAM,qDAQpB,0BAASN,UAAU,wBAAnB,UACE,uBAAOsM,QAASpC,EAAhB,uCACA,gCACE,yBACEjK,GAAIiK,EACJ7E,KAAM6E,EACN7H,MAAO4C,KAAKN,MAAMtD,SAClBoE,SAAUR,KAAKgG,mBAJjB,UAME,2BACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,6CAEF,wBACE/K,QAAS+E,KAAK2G,cACdnM,MAAM,0BAFR,SAIE,sBAAMO,UAAU,cAAhB,SACE,qBACEG,MAAM,KACNC,OAAO,KACPC,QAAQ,YACRC,KAAK,OACLC,MAAM,6BALR,SAOE,sBACEC,EAAE,kPACFF,KAAM,oDAOlB,0BAASN,UAAU,wBAAnB,UACE,wBAAOsM,QAASr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","file":"static/js/main.f3b54ffe.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// import { Method } from '@testing-library/react';\nimport React from 'react';\n\nconst ConfirmDialog = ({\n  title,\n  onUndo,\n  onConfirm,\n  onCancel,\n  confirmText,\n  cancelText,\n  helpLink,\n}: {\n  title: string;\n  onUndo: any;\n  onConfirm: any;\n  onCancel: any;\n  confirmText: string;\n  cancelText: string;\n  helpLink: string;\n}) => (\n  <div className=\"note-overlay\">\n    <div className=\"note-dialog sk-panel\">\n      <div className=\"sk-panel-content\">\n        <div className=\"sk-panel-section\">\n          <div className=\"sk-panel-row\">\n            <div className=\"sk-h1\">\n              <h3>{title}</h3>\n            </div>\n            <button id=\"undoDialog\" onClick={onUndo} title=\"Close\">\n              <svg\n                width=\"20\"\n                height=\"20\"\n                viewBox=\"0 0 20 20\"\n                fill=\"none\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n              >\n                <path\n                  d=\"M15.2459 5.92917C15.5704 5.6047 15.5704 5.07864 15.2459 4.75417C14.9214 4.4297 14.3954 4.4297 14.0709 4.75417L10.0001 8.82501L5.92925 4.75417C5.60478 4.4297 5.07872 4.4297 4.75425 4.75417C4.42978 5.07864 4.42978 5.6047 4.75425 5.92917L8.82508 10L4.75425 14.0708C4.42978 14.3953 4.42978 14.9214 4.75425 15.2458C5.07872 15.5703 5.60478 15.5703 5.92925 15.2458L10.0001 11.175L14.0709 15.2458C14.3954 15.5703 14.9214 15.5703 15.2459 15.2458C15.5704 14.9214 15.5704 14.3953 15.2459 14.0708L11.1751 10L15.2459 5.92917Z\"\n                  fill={'var(--sn-stylekit-foreground-color)'}\n                />\n              </svg>\n            </button>\n          </div>\n          <div className=\"sk-panel-row\">\n            <div className=\"sk-h2\">\n              Need help deciding? Check out the{' '}\n              <a href={helpLink} target=\"_blank\" rel=\"noopener noreferrer\">\n                documentation\n              </a>\n              .\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"sk-panel-footer\">\n        <div className=\"sk-button-group stretch\">\n          <button className=\"sk-button neutral\" onClick={onCancel}>\n            <div className=\"sk-label\">{cancelText}</div>\n          </button>\n          <button className=\"sk-button info\" onClick={onConfirm}>\n            <div className=\"sk-label\">{confirmText}</div>\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nexport default ConfirmDialog;\n","/**\n * This component is derived from the \"browser-esm-webpack-typescript-react\" found\n * at https://github.com/microsoft/monaco-editor-samples,\n * which is released under MIT, Copyright (c) 2016 Microsoft Corporation.\n * This modified version is released under AGPL-3.0 as indicated in the README.md\n * in the root directory. A copy of AGPL-3.0 is available there.\n * */\nimport React, { useRef, useEffect } from 'react';\nimport * as monaco from 'monaco-editor';\n\nconst debugMode = false;\nconst MonacoEditorContainerID = 'MonacoEditorContainer';\nconst MonacoDiffEditorContainerID = 'MonacoDiffEditorContainer';\n\n/*eslint no-restricted-globals: [\"error\", \"event\", \"monaco\"]*/\n// @ts-ignore\nself.MonacoEnvironment = {\n  getWorkerUrl: function (_moduleId: any, label: string) {\n    if (label === 'json') {\n      return './json.worker.bundle.js';\n    }\n    if (label === 'css') {\n      return './css.worker.bundle.js';\n    }\n    if (label === 'html') {\n      return './html.worker.bundle.js';\n    }\n    if (label === 'typescript' || label === 'javascript') {\n      return './ts.worker.bundle.js';\n    }\n    return './editor.worker.bundle.js';\n  },\n};\n\nconst onKeyDown = (keyCode: string, debugMode = false) => {\n  if (debugMode) {\n    console.log('IKeyboardEvent Up: ' + keyCode);\n  }\n};\n\nconst onKeyUp = (keyCode: string, debugMode = false) => {\n  if (debugMode) {\n    console.log('IKeyboardEvent Up: ' + keyCode);\n  }\n};\n\ninterface MonacoEditorTypes {\n  fontSize?: string;\n  id?: string;\n  language?: string;\n  onKeyDown?: Function;\n  onKeyUp?: Function;\n  saveText?: Function;\n  tabSize?: number;\n  text: string;\n  theme?: string;\n  viewMode?: boolean;\n}\n\nexport const MonacoEditor: React.FC<MonacoEditorTypes> = ({\n  fontSize = '16',\n  id = MonacoEditorContainerID,\n  language = 'markdown',\n  saveText,\n  tabSize = 2,\n  text,\n  theme = 'vs-dark',\n  viewMode = false,\n}) => {\n  const divEl = useRef<HTMLDivElement>(null);\n  let editor: monaco.editor.IStandaloneCodeEditor;\n\n  if (fontSize === '') {\n    fontSize = '16px';\n  }\n\n  let scrollBeyondLastLine = true;\n  if (viewMode) {\n    scrollBeyondLastLine = false;\n  }\n\n  useEffect(() => {\n    if (divEl.current) {\n      editor = monaco.editor.create(divEl.current, {\n        // These are variable: customizable by user or dependent on props\n        fontSize: parseInt(fontSize.replace('px', '')),\n        language: language,\n        tabSize: tabSize,\n        theme: theme,\n        scrollBeyondLastLine: scrollBeyondLastLine,\n        value: [text].join('\\n'),\n\n        // These are not customizable\n        autoClosingOvertype: 'auto',\n        formatOnPaste: true,\n        formatOnType: true,\n        wordWrap: 'on',\n        wrappingStrategy: 'advanced',\n      });\n\n      // Keyboard Events\n      editor.onKeyDown((e: monaco.IKeyboardEvent) => {\n        onKeyDown(e.code, debugMode);\n        if (e.ctrlKey && e.code === 'KeyS') {\n          e.preventDefault();\n        }\n      });\n      editor.onKeyUp((e: monaco.IKeyboardEvent) => {\n        onKeyUp(e.code, debugMode);\n      });\n\n      // Content Change Events\n      editor.onDidChangeModelContent(\n        (e: monaco.editor.IModelContentChangedEvent) => {\n          if (saveText) {\n            saveText(editor.getValue());\n          }\n        }\n      );\n    }\n    return () => {\n      editor.dispose();\n    };\n  }, []);\n  return <div id={id} className={MonacoEditorContainerID} ref={divEl}></div>;\n};\n\ninterface MonacoDiffEditorTypes extends MonacoEditorTypes {\n  modifiedText: string;\n}\n\nexport const MonacoDiffEditor: React.FC<MonacoDiffEditorTypes> = ({\n  fontSize = '16',\n  id = MonacoDiffEditorContainerID,\n  language = 'markdown',\n  saveText,\n  text,\n  modifiedText,\n  theme = 'vs-dark',\n}) => {\n  const divEl = useRef<HTMLDivElement>(null);\n  let diffEditor: monaco.editor.IStandaloneDiffEditor;\n\n  if (fontSize === '') {\n    fontSize = '16px';\n  }\n\n  useEffect(() => {\n    if (divEl.current) {\n      const originalModel = monaco.editor.createModel(\n        [text].join('\\n'),\n        language\n      );\n      const modifiedModel = monaco.editor.createModel(\n        [modifiedText].join('\\n'),\n        language\n      );\n\n      diffEditor = monaco.editor.createDiffEditor(divEl.current, {\n        // Same settings as above\n        // These are variable: customizable by user or dependent on props\n        fontSize: parseInt(fontSize.replace('px', '')),\n        theme: theme,\n\n        // These are not customizable\n        autoClosingOvertype: 'auto',\n        formatOnPaste: true,\n        formatOnType: true,\n        wordWrap: 'on',\n        wrappingStrategy: 'advanced',\n\n        // Specific to Diff Editor\n        originalEditable: true, // for left panel\n        readOnly: true, // for right panel\n      });\n      diffEditor.setModel({\n        original: originalModel,\n        modified: modifiedModel,\n      });\n\n      // Content Change Events\n      originalModel.onDidChangeContent(\n        (e: monaco.editor.IModelContentChangedEvent) => {\n          if (saveText) {\n            saveText(originalModel.getValue());\n          }\n        }\n      );\n    }\n    return () => {\n      diffEditor.dispose();\n    };\n  }, []);\n  return (\n    <div id={id} className={MonacoDiffEditorContainerID} ref={divEl}></div>\n  );\n};\n","import React from 'react';\nimport { AppendInterface } from './AppendEditor';\nimport { MonacoEditor } from './Monaco';\n\nconst editTextAreaID = 'editTextArea';\n\ninterface PropsState extends AppendInterface {\n  keyMap: any;\n  debugMode: boolean;\n  onKeyDown: Function;\n  onKeyUp: Function;\n  onKeyDownEditTextArea: Function;\n  onKeyDownTextArea: Function;\n  saveText: Function;\n}\n\ninterface ChildState {\n  text: string;\n}\n\nexport default class EditNote extends React.Component<any, ChildState> {\n  static defaultProps = {\n    // none\n  };\n\n  constructor(props: PropsState) {\n    super(props);\n\n    this.state = {\n      text: this.props.text,\n    };\n  }\n\n  handleInputChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const target = event.target;\n    const value = target.value;\n\n    this.setState(\n      {\n        text: value,\n      },\n      () => {\n        this.props.saveText(this.state.text);\n      }\n    );\n  };\n\n  saveText = (text: string) => {\n    this.setState(\n      {\n        text,\n      },\n      () => {\n        this.props.saveText(this.state.text);\n      }\n    );\n  };\n\n  onKeyDown = (e: React.KeyboardEvent) => {\n    this.props.onKeyDown(e);\n    this.props.onKeyDownEditTextArea(e);\n    this.props.onKeyDownTextArea(e);\n  };\n\n  onKeyUp = (event: React.KeyboardEvent) => {\n    this.props.keyMap.delete(event.key);\n    this.props.onKeyUp(event);\n  };\n\n  render() {\n    const { text } = this.state;\n    return (\n      <div\n        className={\n          'sk-panel main edit ' +\n          (this.props.printMode\n            ? 'printModeOn'\n            : this.props.useMonacoEditor\n            ? 'MonacoEditor printModeOff'\n            : 'printModeOff')\n        }\n      >\n        <div\n          className={\n            'sk-panel-content edit ' +\n            (this.props.useMonacoEditor ? 'MonacoEditor' : '')\n          }\n        >\n          {this.props.useMonacoEditor ? (\n            <MonacoEditor\n              fontSize={this.props.fontSize}\n              language={this.props.MonacoEditorLanguage}\n              saveText={this.saveText}\n              text={text}\n              viewMode={this.props.viewMode}\n            />\n          ) : (\n            <textarea\n              id={editTextAreaID}\n              name=\"text\"\n              className=\"sk-input contrast textarea editnote\"\n              placeholder=\"Welcome to the Append Editor! 😄\"\n              rows={15}\n              spellCheck=\"true\"\n              value={text}\n              onChange={this.handleInputChange}\n              onKeyDown={this.onKeyDown}\n              onKeyUp={this.onKeyUp}\n              style={{ fontFamily: this.props.fontEdit }}\n            />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport unified from 'unified';\nimport parse from 'remark-parse';\nimport remark2rehype from 'remark-rehype';\nimport rehype2react from 'rehype-react';\n\nimport { AppendInterface } from './AppendEditor';\n\nconst gfm = require('remark-gfm');\nconst breaks = require('remark-breaks');\nconst math = require('remark-math');\nconst rehypeKatex = require('rehype-katex');\nconst highlight = require('rehype-highlight');\nconst emoji = require('remark-emoji');\nconst externalLinks = require('remark-external-links');\nconst toc = require('remark-toc');\nconst footnotes = require('remark-footnotes');\nconst slug = require('remark-slug');\nconst raw = require('rehype-raw');\n\nconst processor = unified()\n  .use(parse)\n  .use(gfm)\n  .use(breaks)\n  .use(slug)\n  .use(toc, { maxDepth: 6 })\n  .use(externalLinks)\n  .use(footnotes, { inlineNotes: true })\n  .use(remark2rehype, { allowDangerousHtml: true })\n  .use(raw)\n  .use(math)\n  .use(rehypeKatex)\n  .use(highlight, { ignoreMissing: true })\n  .use(emoji)\n  .use(rehype2react, { createElement: React.createElement });\n\nconst languageProcessor = unified()\n  .use(parse)\n  .use(remark2rehype, { allowDangerousHtml: true })\n  .use(highlight, { ignoreMissing: true })\n  .use(rehype2react, { createElement: React.createElement });\n\ninterface PropsState extends AppendInterface {\n  keyMap: any;\n}\n\ninterface ChildState {\n  showHelp: boolean;\n  showFeelings: boolean;\n  showMoreQuestions: boolean;\n  showFeedback: boolean;\n}\n\nexport default class ViewNote extends React.Component<any, ChildState> {\n  constructor(props: PropsState) {\n    super(props);\n\n    this.state = {\n      showHelp: this.props.showHelp,\n      showFeelings: false,\n      showMoreQuestions: false,\n      showFeedback: false,\n    };\n    //this.onChange = this.onChange.bind(this);\n  }\n\n  onToggleShowFeelings = () => {\n    this.setState({\n      showFeelings: !this.state.showFeelings,\n    });\n  };\n\n  onToggleShowMoreQuestions = () => {\n    this.setState({\n      showMoreQuestions: !this.state.showMoreQuestions,\n    });\n  };\n\n  onToggleShowFeedback = () => {\n    this.setState({\n      showFeedback: !this.state.showFeedback,\n    });\n  };\n\n  onToggleShowHelp = () => {\n    const helpButton = document.getElementById('helpButton');\n    if (helpButton) {\n      helpButton.click();\n    }\n  };\n\n  render() {\n    const { text } = this.props;\n\n    return (\n      <div\n        className={\n          'sk-panel main view ' +\n          (this.props.printMode ? 'printModeOn' : 'printModeOff') +\n          (this.props.printURL ? ' printURL' : ' printURLOff')\n        }\n      >\n        <div className=\"sk-panel-content view\">\n          <div className=\"sk-panel-section\">\n            <div className=\"note-entry\">\n              <div className=\"note-details\">\n                <div className=\"note-info\">\n                  {!text && [\n                    <div className=\"note-content\">\n                      <div style={{ textAlign: 'center' }}>\n                        <details>\n                          <summary>\n                            Welcome to the Append Editor!{' '}\n                            <span role=\"img\" aria-label=\"wave emoji\">\n                              👋\n                            </span>{' '}\n                            Your note is empty.{' '}\n                            <span role=\"img\" aria-label=\"smile emoji\">\n                              🙂\n                            </span>\n                          </summary>\n                          <br></br>\n                          Click <strong>Edit</strong> (\n                          <svg\n                            role=\"img\"\n                            aria-label=\"Pencil icon to toggle edit mode\"\n                            width=\"20\"\n                            height=\"20\"\n                            viewBox=\"0 0 20 20\"\n                            fill=\"none\"\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                          >\n                            <path\n                              d=\"M11.7167 7.5L12.5 8.28333L4.93333 15.8333H4.16667V15.0667L11.7167 7.5ZM14.7167 2.5C14.5083 2.5 14.2917 2.58333 14.1333 2.74167L12.6083 4.26667L15.7333 7.39167L17.2583 5.86667C17.5833 5.54167 17.5833 5 17.2583 4.69167L15.3083 2.74167C15.1417 2.575 14.9333 2.5 14.7167 2.5ZM11.7167 5.15833L2.5 14.375V17.5H5.625L14.8417 8.28333L11.7167 5.15833Z\"\n                              fill={'var(--sn-stylekit-foreground-color)'}\n                            />\n                          </svg>\n                          ) at the top{' '}\n                          <span role=\"img\" aria-label=\"up arrow emoji\">\n                            ⬆️\n                          </span>{' '}\n                          or <strong>Append</strong> at the bottom{' '}\n                          <span role=\"img\" aria-label=\"down arrow emoji\">\n                            ⬇️\n                          </span>{' '}\n                          to add to your note.{' '}\n                          <span role=\"img\" aria-label=\"paper and pencil emoji\">\n                            📝\n                          </span>\n                          <br></br>\n                          <br></br>\n                          Click&nbsp;\n                          <svg\n                            role=\"button\"\n                            aria-label=\"toggle show help\"\n                            onClick={this.onToggleShowHelp}\n                            width=\"20\"\n                            height=\"20\"\n                            viewBox=\"0 0 20 20\"\n                            fill=\"none\"\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                          >\n                            <path\n                              d=\"M9.16675 15.0001H10.8334V13.3334H9.16675V15.0001ZM10.0001 1.66675C8.90573 1.66675 7.8221 1.8823 6.81105 2.30109C5.80001 2.71987 4.88135 3.3337 4.10753 4.10753C2.54472 5.67033 1.66675 7.78995 1.66675 10.0001C1.66675 12.2102 2.54472 14.3298 4.10753 15.8926C4.88135 16.6665 5.80001 17.2803 6.81105 17.6991C7.8221 18.1179 8.90573 18.3334 10.0001 18.3334C12.2102 18.3334 14.3298 17.4554 15.8926 15.8926C17.4554 14.3298 18.3334 12.2102 18.3334 10.0001C18.3334 8.90573 18.1179 7.8221 17.6991 6.81105C17.2803 5.80001 16.6665 4.88135 15.8926 4.10753C15.1188 3.3337 14.2002 2.71987 13.1891 2.30109C12.1781 1.8823 11.0944 1.66675 10.0001 1.66675ZM10.0001 16.6668C6.32508 16.6668 3.33342 13.6751 3.33342 10.0001C3.33342 6.32508 6.32508 3.33342 10.0001 3.33342C13.6751 3.33342 16.6668 6.32508 16.6668 10.0001C16.6668 13.6751 13.6751 16.6668 10.0001 16.6668ZM10.0001 5.00008C9.11603 5.00008 8.26818 5.35127 7.64306 5.97639C7.01794 6.60151 6.66675 7.44936 6.66675 8.33342H8.33342C8.33342 7.89139 8.50901 7.46747 8.82157 7.1549C9.13413 6.84234 9.55806 6.66675 10.0001 6.66675C10.4421 6.66675 10.866 6.84234 11.1786 7.1549C11.4912 7.46747 11.6667 7.89139 11.6667 8.33342C11.6667 10.0001 9.16675 9.79175 9.16675 12.5001H10.8334C10.8334 10.6251 13.3334 10.4167 13.3334 8.33342C13.3334 7.44936 12.9822 6.60151 12.3571 5.97639C11.732 5.35127 10.8841 5.00008 10.0001 5.00008Z\"\n                              fill={\n                                this.state.showHelp\n                                  ? 'var(--sn-stylekit-info-color)'\n                                  : 'var(--sn-stylekit-foreground-color)'\n                              }\n                            />\n                          </svg>\n                          &nbsp;in the top menu to learn more about this editor.\n                          <br></br>\n                          <br></br>\n                          Happy note-taking!{' '}\n                          <span role=\"img\" aria-label=\"smile emoji\">\n                            😄\n                          </span>\n                        </details>\n                      </div>\n                    </div>,\n                  ]}\n                  {this.state.showHelp && [\n                    <div className=\"note-content\">\n                      <hr></hr>\n                      <h2>Append Editor Help</h2>\n                      <p>\n                        The Append Editor is an <b>unofficial</b>{' '}\n                        <a\n                          href=\"https://standardnotes.org/help/77/what-are-editors\"\n                          target=\"_blank\"\n                          rel=\"nofollow noreferrer noopener\"\n                        >\n                          Custom Editor\n                        </a>{' '}\n                        for{' '}\n                        <a\n                          href=\"https://standardnotes.org/\"\n                          target=\"_blank\"\n                          rel=\"nofollow noreferrer noopener\"\n                        >\n                          Standard Notes\n                        </a>\n                        , a free,{' '}\n                        <a\n                          href=\"https://standardnotes.org/knowledge/5/what-is-free-and-open-source-software\"\n                          target=\"_blank\"\n                          rel=\"nofollow noreferrer noopener\"\n                        >\n                          open-source\n                        </a>\n                        , and{' '}\n                        <a\n                          href=\"https://standardnotes.org/knowledge/2/what-is-end-to-end-encryption\"\n                          target=\"_blank\"\n                          rel=\"nofollow noreferrer noopener\"\n                        >\n                          end-to-end encrypted\n                        </a>{' '}\n                        notes app. The source code is available on{' '}\n                        <a\n                          href=\"https://github.com/TheodoreChu/append-editor\"\n                          target=\"_blank\"\n                          rel=\"nofollow noreferrer noopener\"\n                        >\n                          GitHub\n                        </a>\n                        .\n                      </p>\n                      <h3>How do I use the Append Editor?</h3>\n                      <p>\n                        This editor supports{' '}\n                        <a\n                          href=\"https://guides.github.com/features/mastering-markdown/\"\n                          target=\"_blank\"\n                          rel=\"nofollow noreferrer noopener\"\n                        >\n                          Markdown\n                        </a>\n                        ,{' '}\n                        <a\n                          href=\"https://katex.org/docs/support_table.html\"\n                          target=\"_blank\"\n                          rel=\"nofollow noreferrer noopener\"\n                        >\n                          KaTeX\n                        </a>\n                        , and{' '}\n                        <a\n                          href=\"https://github.com/ikatyang/emoji-cheat-sheet/blob/master/README.md\"\n                          target=\"_blank\"\n                          rel=\"nofollow noreferrer noopener\"\n                        >\n                          emoji codes\n                        </a>\n                        , syntax highlighting, in-line HTML, table of contents,\n                        footnotes, auto-linking, printing, and more. For the\n                        full list of features and keyboard shortcuts, please\n                        visit the documentation at{' '}\n                        <a\n                          href=\"https://appendeditor.com\"\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                        >\n                          appendeditor.com\n                        </a>\n                        .\n                      </p>\n                      <h3>\n                        How do I Install the Append Editor in Standard Notes?\n                      </h3>\n                      <ol>\n                        <li>\n                          Download, install, and sign in to the Standard Notes{' '}\n                          <a\n                            href=\"https://standardnotes.org/download\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                          >\n                            Desktop\n                          </a>{' '}\n                          app.\n                        </li>\n                        <li>\n                          In the bottom left corner of the app, click{' '}\n                          <b>Extensions</b>.\n                        </li>\n                        <li>\n                          Click <b>Import Extensions</b> and paste the following\n                          link into the input box. If you want to use the alpha\n                          version, replace <code>beta</code> with{' '}\n                          <code>alpha</code>:{' '}\n                          <code>\n                            <a\n                              href=\"https://raw.githubusercontent.com/TheodoreChu/append-editor/develop/public/beta.ext.json\"\n                              target=\"_blank\"\n                              rel=\"noopener noreferrer\"\n                            >\n                              https://raw.githubusercontent.com/TheodoreChu/append-editor/develop/public/beta.ext.json\n                            </a>\n                          </code>\n                        </li>\n                      </ol>\n                      <h3>What do I write about?</h3>\n                      Here are some questions to help you get started:\n                      <ul>\n                        <li>How are you? What's happening?</li>\n                        <li>What might be affecting your mood?</li>\n                        <li>\n                          Which feelings fit your mood and to what extent?\n                        </li>\n                        <details onToggle={this.onToggleShowFeelings}>\n                          <summary>\n                            {!this.state.showFeelings && [\n                              <p className=\"link\">Show feelings</p>,\n                            ]}\n                            {this.state.showFeelings && [\n                              <p className=\"link\">Hide feelings</p>,\n                            ]}\n                          </summary>\n                          <li>\n                            <b>Positive Feelings:</b> bold, calm, cheerful,\n                            confident, content, eager, ecstatic, energized,\n                            engaged, enthusiastic, excited, grateful, happy,\n                            humorous, inspired, joyful, light, lively, loving,\n                            motivated, optimistic, passionate, peaceful,\n                            playful, proud, reassured, refreshed, relaxed,\n                            relieved, satisfied, secure, surprised, thrilled,\n                            wonderful\n                          </li>\n                          <li>\n                            <b>Negative Feelings:</b> afraid, angry, annoyed,\n                            anxious, ashamed, bored, burnt out, confused,\n                            demoralized, depressed, disappointed, disgusted,\n                            distraught, embarrassed, empty, exhausted,\n                            frustrated, furious, guilty, heavy, insecure,\n                            irritated, jealous, jittery, lethargic, lonely,\n                            nervous, numb, resentful, sad, self-conscious,\n                            sleepy, stressed, tired, winded, worried\n                          </li>\n                        </details>\n                        <li>\n                          What thoughts are contributing to the way you're\n                          feeling?\n                        </li>\n                        <details onToggle={this.onToggleShowMoreQuestions}>\n                          <summary>\n                            {!this.state.showMoreQuestions && [\n                              <p className=\"link\">Show more questions</p>,\n                            ]}\n                            {this.state.showMoreQuestions && [\n                              <p className=\"link\">Show fewer questions</p>,\n                            ]}\n                          </summary>\n                        </details>\n                        {this.state.showMoreQuestions && [\n                          <div>\n                            <li>\n                              What do you hope your life will look like in a\n                              week? a month? a year?\n                            </li>\n                            <li>\n                              What can you do today to make your life the way\n                              you want it?\n                            </li>\n                            <li>\n                              How will you feel when you've realized the goals\n                              that you have for yourself?\n                            </li>\n                            <li>\n                              Who or what do you feel grateful for and why?\n                            </li>\n                            <li>What did you enjoy about today?</li>\n                          </div>,\n                        ]}\n                      </ul>\n                      <details onToggle={this.onToggleShowFeedback}>\n                        <summary>\n                          <p className=\"link\">Need more help?</p>\n                        </summary>\n                        {this.state.showFeedback && [\n                          <p>\n                            Feel free to{' '}\n                            <a\n                              href=\"https://appendeditor.com/contact\"\n                              target=\"_blank\"\n                              rel=\"noopener noreferrer\"\n                            >\n                              reach out\n                            </a>{' '}\n                            if you have any questions, comments, concerns, or\n                            feedback.{' '}\n                            <span role=\"img\" aria-label=\"wave emoji\">\n                              👋\n                            </span>\n                            <br />\n                            If you find any bugs or have a feature request,\n                            please{' '}\n                            <a\n                              href=\"https://github.com/TheodoreChu/append-editor/issues\"\n                              target=\"_blank\"\n                              rel=\"noopener noreferrer\"\n                            >\n                              open an issue on GitHub\n                            </a>\n                            .{' '}\n                            <span role=\"img\" aria-label=\"smile emoji\">\n                              🙂\n                            </span>\n                            <br />\n                            You are using version <code>1.1.0-alpha.9</code>.\n                            The release notes are available on{' '}\n                            <a\n                              href=\"https://github.com/TheodoreChu/append-editor/releases\"\n                              target=\"_blank\"\n                              rel=\"noopener noreferrer\"\n                            >\n                              GitHub\n                            </a>\n                            .\n                          </p>,\n                        ]}\n                      </details>\n                      Click&nbsp;\n                      <svg\n                        role=\"button\"\n                        aria-label=\"toggle show help\"\n                        onClick={this.onToggleShowHelp}\n                        width=\"20\"\n                        height=\"20\"\n                        viewBox=\"0 0 20 20\"\n                        fill=\"none\"\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                      >\n                        <path\n                          d=\"M9.16675 15.0001H10.8334V13.3334H9.16675V15.0001ZM10.0001 1.66675C8.90573 1.66675 7.8221 1.8823 6.81105 2.30109C5.80001 2.71987 4.88135 3.3337 4.10753 4.10753C2.54472 5.67033 1.66675 7.78995 1.66675 10.0001C1.66675 12.2102 2.54472 14.3298 4.10753 15.8926C4.88135 16.6665 5.80001 17.2803 6.81105 17.6991C7.8221 18.1179 8.90573 18.3334 10.0001 18.3334C12.2102 18.3334 14.3298 17.4554 15.8926 15.8926C17.4554 14.3298 18.3334 12.2102 18.3334 10.0001C18.3334 8.90573 18.1179 7.8221 17.6991 6.81105C17.2803 5.80001 16.6665 4.88135 15.8926 4.10753C15.1188 3.3337 14.2002 2.71987 13.1891 2.30109C12.1781 1.8823 11.0944 1.66675 10.0001 1.66675ZM10.0001 16.6668C6.32508 16.6668 3.33342 13.6751 3.33342 10.0001C3.33342 6.32508 6.32508 3.33342 10.0001 3.33342C13.6751 3.33342 16.6668 6.32508 16.6668 10.0001C16.6668 13.6751 13.6751 16.6668 10.0001 16.6668ZM10.0001 5.00008C9.11603 5.00008 8.26818 5.35127 7.64306 5.97639C7.01794 6.60151 6.66675 7.44936 6.66675 8.33342H8.33342C8.33342 7.89139 8.50901 7.46747 8.82157 7.1549C9.13413 6.84234 9.55806 6.66675 10.0001 6.66675C10.4421 6.66675 10.866 6.84234 11.1786 7.1549C11.4912 7.46747 11.6667 7.89139 11.6667 8.33342C11.6667 10.0001 9.16675 9.79175 9.16675 12.5001H10.8334C10.8334 10.6251 13.3334 10.4167 13.3334 8.33342C13.3334 7.44936 12.9822 6.60151 12.3571 5.97639C11.732 5.35127 10.8841 5.00008 10.0001 5.00008Z\"\n                          fill={\n                            this.state.showHelp\n                              ? 'var(--sn-stylekit-info-color)'\n                              : 'var(--sn-stylekit-foreground-color)'\n                          }\n                        />\n                      </svg>\n                      &nbsp;in the top menu to close this section.\n                      <hr></hr>\n                    </div>,\n                  ]}\n                  <div\n                    id=\"renderedNote\"\n                    className=\"note-content\"\n                    style={{ fontFamily: this.props.fontView }}\n                  >\n                    {this.props.useMonacoEditor &&\n                    this.props.MonacoEditorLanguage !== 'markdown' &&\n                    text\n                      ? (languageProcessor.processSync(\n                          '```' +\n                            this.props.MonacoEditorLanguage +\n                            '\\n' +\n                            text +\n                            '\\n```'\n                        ).result as any)\n                      : (processor.processSync(text).result as any)}\n                  </div>\n                </div>\n              </div>\n              <div className=\"note-options\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { AppendInterface } from './AppendEditor';\nimport { MonacoEditor } from './Monaco';\n\nconst appendTextAreaID = 'appendTextArea';\nconst newLineID = 'newLine';\nconst newParagraphID = 'newParagraph';\n\ninterface PropsState extends AppendInterface {\n  appendTextToNote: Function;\n  keyMap: any;\n  debugMode: boolean;\n  autoSaveAppendText: Function;\n  autoSaveCheckBoxes: Function;\n  onKeyDown: Function;\n  onKeyUp: Function;\n  onKeyDownAppendTextArea: Function;\n  onKeyDownTextArea: Function;\n}\n\ninterface ChildState {\n  text: string;\n  newLine: boolean;\n  newParagraph: boolean;\n  [x: string]: string | boolean;\n}\n\nexport default class AppendText extends React.Component<any, ChildState> {\n  static defaultProps = {\n    // none\n  };\n\n  constructor(props: PropsState) {\n    super(props);\n\n    this.state = {\n      text: this.props.text,\n      newLine: this.props.appendNewLine,\n      newParagraph: this.props.appendNewParagraph,\n      useMonacoEditor: this.props.useMonacoEditor,\n    };\n  }\n\n  handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const target = event.target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    const name = target.name;\n    this.setState(\n      {\n        [name]: value,\n      },\n      () => {\n        // This callback saves the checkboxes\n        this.autoSaveCheckBoxes();\n      }\n    );\n  };\n\n  // This is an almost duplicate of the above editor. Here we don't save the checkboxes to improve performance\n  handleTextAreaChange = (event: any) => {\n    const target = event.target;\n    const value = target.value;\n    this.setState(\n      {\n        text: value,\n      },\n      () => {\n        // This callback saves the append text\n        this.autoSaveAppendText();\n      }\n    );\n  };\n\n  saveText = (text: string) => {\n    this.setState(\n      {\n        text,\n      },\n      () => {\n        this.props.autoSaveAppendText(this.state.text);\n      }\n    );\n  };\n\n  appendTextToNote = () => {\n    this.props.appendTextToNote();\n    this.setState({\n      text: '',\n    });\n    const appendTextArea = document.getElementById(appendTextAreaID);\n    if (appendTextArea) {\n      appendTextArea.focus();\n    }\n    // Refresh Monaco Editor after appending text to note\n    if (this.state.useMonacoEditor) {\n      this.setState(\n        {\n          useMonacoEditor: false,\n        },\n        () => {\n          this.setState({\n            useMonacoEditor: true,\n          });\n        }\n      );\n    }\n  };\n\n  autoSaveAppendText = () => {\n    const text = this.state.text;\n    this.props.autoSaveAppendText(text);\n  };\n\n  autoSaveCheckBoxes = () => {\n    const newLine = this.state.newLine;\n    const newParagraph = this.state.newParagraph;\n    this.props.autoSaveCheckBoxes(newLine, newParagraph);\n  };\n\n  onKeyDown = (e: React.KeyboardEvent) => {\n    this.props.keyMap.set(e.key, true);\n    if (this.props.debugMode) {\n      console.log(\n        'Keys pressed: ' +\n          e.key +\n          'KeyMap for key: ' +\n          this.props.keyMap.get(e.key)\n      );\n      console.log('Append Text Value: ' + this.state.text);\n    }\n\n    this.props.onKeyDown(e);\n    this.props.onKeyDownAppendTextArea(e);\n    this.props.onKeyDownTextArea(e);\n    // Append Text if Ctrl and 'Enter' are pressed\n    if (this.props.keyMap.get('Control') && this.props.keyMap.get('Enter')) {\n      e.preventDefault();\n      this.appendTextToNote();\n    }\n    // Append Text if Ctrl and 's' are pressed\n    else if (this.props.keyMap.get('Control') && this.props.keyMap.get('s')) {\n      e.preventDefault();\n      this.appendTextToNote();\n    }\n  };\n\n  onKeyUp = (event: React.KeyboardEvent) => {\n    this.props.keyMap.delete(event.key);\n    this.props.onKeyUp(event);\n  };\n\n  render() {\n    const { text } = this.state;\n\n    return (\n      <div\n        className={\n          'sk-panel main appendix ' +\n          (this.props.printMode\n            ? 'printModeOn'\n            : this.props.useMonacoEditor\n            ? 'MonacoEditor printModeOff'\n            : 'printModeOff')\n        }\n      >\n        <div\n          className={\n            'sk-panel-content edit ' +\n            (this.props.useMonacoEditor ? 'MonacoEditor' : '')\n          }\n        >\n          {this.state.useMonacoEditor ? (\n            // We use this.state instead of this.props so we can easily refresh it on Append\n            <MonacoEditor\n              fontSize={this.props.fontSize}\n              language={this.props.MonacoEditorLanguage}\n              saveText={this.saveText}\n              text={text}\n            />\n          ) : (\n            <textarea\n              id={appendTextAreaID}\n              name=\"text\"\n              className=\"sk-input contrast textarea append\"\n              placeholder=\"Append to your note\"\n              rows={this.props.appendRows}\n              spellCheck=\"true\"\n              value={text}\n              onChange={this.handleTextAreaChange}\n              onKeyDown={this.onKeyDown}\n              onKeyUp={this.onKeyUp}\n              style={{ fontFamily: this.props.fontEdit }}\n            />\n          )}\n        </div>\n        <div className=\"sk-panel-row\">\n          <form className=\"checkBoxForm\">\n            <label>\n              <input\n                id={newLineID}\n                name=\"newLine\"\n                type=\"checkbox\"\n                checked={this.state.newLine}\n                onChange={this.handleInputChange}\n              />\n              New Line\n            </label>\n            <br />\n            <label>\n              <input\n                id={newParagraphID}\n                name=\"newParagraph\"\n                type=\"checkbox\"\n                checked={this.state.newParagraph}\n                onChange={this.handleInputChange}\n              />\n              New Paragraph\n            </label>\n          </form>\n          <div className=\"sk-button-group stretch\">\n            <button\n              type=\"button\"\n              id=\"appendTextButton\"\n              onClick={this.appendTextToNote}\n              className=\"sk-button info\"\n            >\n              <div className=\"sk-label\">Append</div>\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { AppendInterface } from './AppendEditor';\nimport { MonacoEditor } from './Monaco';\n\nconst editingModeID = 'editingMode';\nconst fontEditID = 'fontEdit';\nconst fontSizeID = 'fontSize';\nconst fontViewID = 'fontView';\nconst useCodeMirrorID = 'useCodeMirror';\nconst useMonacoEditorID = 'useMonacoEditor';\nconst usePlainTextID = 'usePlainText';\nconst MonacoEditorLanguageID = 'MonacoEditorLanguage';\nconst customStylesID = 'customStyles';\nconst resetAllSettingsID = 'resetAllSettings';\n\ninterface PropsState extends AppendInterface {\n  onConfirm: Function;\n  debugMode: boolean;\n  keyMap: any;\n  onCancel: any;\n  title: string;\n  helpLink: string;\n  confirmText: string;\n  cancelText: string;\n}\n\ninterface ChildState {\n  customStyles: string;\n  editingMode: 'usePlainText' | 'useMonacoEditor' | 'useCodeMirror';\n  fontEdit: string;\n  fontSize: string;\n  fontView: string;\n  MonacoEditorLanguage: string;\n  useCodeMirror: boolean;\n  showCustomStyles: boolean;\n  useMonacoEditor: boolean;\n  [x: string]: string | boolean;\n}\n\nconst startRegExp = new RegExp(/```css\\n/gm);\nconst cssRegExp = new RegExp(/```css/gm);\nconst endRegExp = new RegExp(/\\n```/gm);\nconst codeRegExp = new RegExp(/```/gm);\n\nexport default class Settings extends React.Component<any, ChildState> {\n  constructor(props: PropsState) {\n    super(props);\n    let initialEditingMode:\n      | 'usePlainText'\n      | 'useMonacoEditor'\n      | 'useCodeMirror';\n    initialEditingMode = usePlainTextID;\n    if (this.props.useCodeMirror) {\n      initialEditingMode = useCodeMirrorID;\n    } else if (this.props.useMonacoEditor) {\n      initialEditingMode = useMonacoEditorID;\n    }\n    this.state = {\n      customStyles: this.props.customStyles,\n      editingMode: initialEditingMode,\n      fontEdit: this.props.fontEdit,\n      fontSize: this.props.fontSize,\n      fontView: this.props.fontView,\n      MonacoEditorLanguage: this.props.MonacoEditorLanguage,\n      useCodeMirror: this.props.useCodeMirror,\n      useMonacoEditor: this.props.useMonacoEditor,\n      showCustomStyles: false, // false by default for a mobile-first experience\n    };\n    //this.handleInputChange = this.handleInputChange.bind(this);\n    //this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const target = event.target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value,\n    });\n    if (name === editingModeID) {\n      if (value === useMonacoEditorID) {\n        this.setState({\n          useCodeMirror: false,\n          useMonacoEditor: true,\n        });\n      } else if (value === useCodeMirrorID) {\n        this.setState({\n          useCodeMirror: true,\n          useMonacoEditor: false,\n        });\n      } else {\n        this.setState({\n          useCodeMirror: false,\n          useMonacoEditor: false,\n        });\n      }\n    }\n    if (this.props.debugMode) {\n      console.log(\n        'Settings event name: ' +\n          event.target.name +\n          ' Value: ' +\n          event.target.value\n      );\n    }\n  };\n\n  handleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    this.setState(\n      {\n        [name]: value,\n      },\n      () => {\n        if (this.props.debugMode) {\n          console.log(\n            'Saved select. Name: ' +\n              event.target.name +\n              ' Value: ' +\n              event.target.value\n          );\n        }\n      }\n    );\n  };\n\n  toggleShowCustomStyles = () => {\n    this.setState({\n      showCustomStyles: !this.state.showCustomStyles,\n    });\n  };\n\n  cleanCustomStyles = (text: string) => {\n    return text\n      .replace(startRegExp, '')\n      .replace(cssRegExp, '')\n      .replace(endRegExp, '')\n      .replace(codeRegExp, '');\n  };\n\n  saveText = (text: string) => {\n    this.setState({\n      customStyles: text,\n    });\n  };\n\n  handleSubmit = () => {\n    if (this.props.debugMode) {\n      let fontEditMessage = '';\n      let fontViewMessage = '';\n      console.log('Settings fontEdit: ' + this.state.fontEdit);\n      console.log('Settings fontView: ' + this.state.fontView);\n      if (this.state.fontEdit === '' || this.state.fontEdit === undefined) {\n        fontEditMessage = 'Default';\n      } else if (this.state.fontEdit) {\n        fontEditMessage = this.state.fontEdit;\n      }\n      if (this.state.fontView === '' || this.state.fontView === undefined) {\n        fontViewMessage = 'Default';\n      } else if (this.state.fontView) {\n        fontViewMessage = this.state.fontView;\n      }\n      console.log(\n        'Your useMonacoEditor is: ' +\n          this.state.useMonacoEditor +\n          '\\n' +\n          'Your useCodeMirror is: ' +\n          this.state.useCodeMirror +\n          '\\n' +\n          'Your chosen font for Edit/Append is: ' +\n          fontEditMessage +\n          '\\n' +\n          'Your chosen font for View/Print is: ' +\n          fontViewMessage +\n          '\\n'\n      );\n    }\n    this.setState(\n      {\n        // clean the custom styles prior to saving them\n        customStyles: this.cleanCustomStyles(this.state.customStyles),\n      },\n      () => {\n        if (this.props.debugMode) {\n          console.log('Your custom styles: ' + this.state.customStyles);\n        }\n        const {\n          customStyles,\n          fontEdit,\n          fontSize,\n          fontView,\n          MonacoEditorLanguage,\n          useCodeMirror,\n          useMonacoEditor,\n        } = this.state;\n        this.props.onConfirm(\n          { customStyles },\n          { fontEdit },\n          { fontSize },\n          { fontView },\n          { MonacoEditorLanguage },\n          { useCodeMirror },\n          { useMonacoEditor }\n        );\n      }\n    );\n  };\n\n  clearCustomStyles = () => {\n    this.setState(\n      {\n        customStyles: '',\n      },\n      () => {\n        this.setState(\n          {\n            showCustomStyles: !this.state.showCustomStyles,\n          },\n          () => {\n            this.setState({\n              showCustomStyles: !this.state.showCustomStyles,\n            });\n            if (this.props.debugMode) {\n              console.log('customStyles reset: ' + this.state.customStyles);\n            }\n          }\n        );\n      }\n    );\n    const customStyles = document.getElementById(\n      customStylesID\n    ) as HTMLTextAreaElement;\n    if (customStyles) {\n      customStyles.value = '';\n      customStyles.focus();\n    }\n  };\n\n  clearFontEdit = () => {\n    this.setState({\n      fontEdit: '',\n    });\n    const fontEdit = document.getElementById(fontEditID) as HTMLTextAreaElement;\n    if (fontEdit) {\n      fontEdit.value = '';\n      fontEdit.focus();\n    }\n  };\n\n  clearFontSize = () => {\n    this.setState({\n      fontSize: '',\n    });\n    const fontSize = document.getElementById(fontSizeID) as HTMLSelectElement;\n    if (fontSize) {\n      fontSize.value = '';\n      fontSize.focus();\n    }\n  };\n\n  clearFontView = () => {\n    this.setState({\n      fontView: '',\n    });\n    const fontView = document.getElementById(fontViewID) as HTMLTextAreaElement;\n    if (fontView) {\n      fontView.value = '';\n      fontView.focus();\n    }\n  };\n\n  clearEditingMode = () => {\n    this.setState({\n      editingMode: usePlainTextID,\n      useCodeMirror: false,\n      useMonacoEditor: false,\n    });\n  };\n\n  clearMonacoEditorLanguage = () => {\n    this.setState({\n      MonacoEditorLanguage: 'markdown',\n    });\n    const MonacoEditorLanguage = document.getElementById(\n      MonacoEditorLanguageID\n    ) as HTMLSelectElement;\n    if (MonacoEditorLanguage) {\n      MonacoEditorLanguage.value = 'markdown';\n      MonacoEditorLanguage.focus();\n    }\n  };\n\n  clearAllSettings = () => {\n    // We clear from bottom settings to top settings so the focus afterwards is on top\n    this.clearCustomStyles();\n    this.clearFontView();\n    this.clearFontEdit();\n    this.clearFontSize();\n    this.clearMonacoEditorLanguage();\n    this.clearEditingMode();\n    const resetAllSettings = document.getElementById(resetAllSettingsID);\n    if (resetAllSettings) {\n      resetAllSettings.focus();\n    }\n  };\n\n  onKeyDown = (e: React.KeyboardEvent) => {\n    this.props.keyMap.set(e.key, true);\n    //console.log(\"Keys pressed: \" + e.key + \"KeyMap for key: \" + keyMap.get(e.key)) + \"KeyMap for Shift: \" + keyMap.get('Shift');\n    // Save settings if Control and 's' are pressed\n    if (this.props.keyMap.get('Control') && this.props.keyMap.get('s')) {\n      e.preventDefault();\n      this.handleSubmit();\n    }\n    // Save settings if Control and Enter are pressed\n    else if (\n      this.props.keyMap.get('Control') &&\n      this.props.keyMap.get('Enter')\n    ) {\n      e.preventDefault();\n      this.handleSubmit();\n    }\n  };\n\n  onKeyUp = (e: React.KeyboardEvent) => {\n    this.props.keyMap.set(e.key, false);\n  };\n\n  onBlur = (e: React.FocusEvent) => {\n    this.props.keyMap.clear();\n  };\n\n  componentWillUnmount = () => {\n    this.props.keyMap.clear();\n  };\n\n  render() {\n    //<h3>↶</h3>\n    const { title, onCancel, confirmText, cancelText, helpLink } = this.props;\n    return (\n      <div id=\"settings\" className=\"sk-panel main settings\">\n        <div className=\"sk-panel-content\">\n          <div className=\"sk-panel-section\">\n            <datalist id=\"fonts\">\n              ,\n              <option\n                value={\n                  'SFMono-Regular, Consolas, Liberation Mono, Menlo, \"Ubuntu Mono\", courier, monospace;'\n                }\n              />\n              <option value=\"Times New Roman\" />\n              <option value=\"Arial\" />\n              <option value=\"Arial Black\" />\n              <option value=\"-apple-system\" />\n              <option value=\"Bell MT\" />\n              <option value=\"Baskerville Old Face\" />\n              <option value=\"Bahnschrift Light\" />\n              <option value=\"BlinkMacSystemFont\" />\n              <option value=\"Bodoni MT\" />\n              <option value=\"Calibri\" />\n              <option value=\"Calibri Light\" />\n              <option value=\"Calisto MT\" />\n              <option value=\"Cambria\" />\n              <option value=\"Candara\" />\n              <option value=\"Candara Light\" />\n              <option value=\"Cantarell\" />\n              <option value=\"Centaur\" />\n              <option value=\"Century\" />\n              <option value=\"Century Gothic\" />\n              <option value=\"Comic Sans MS\" />\n              <option value=\"Consolas\" />\n              <option value=\"Constantia\" />\n              <option value=\"Courier New\" />\n              <option value=\"Corbel\" />\n              <option value=\"Corbel Light\" />\n              <option value=\"DengXian\" />\n              <option value=\"Ebrima\" />\n              <option value=\"Droid Sans\" />\n              <option value=\"Fira Sans\" />\n              <option value=\"Gabriola\" />\n              <option value=\"Garamond\" />\n              <option value=\"Georgia\" />\n              <option value=\"Helvetica\" />\n              <option value=\"Helvetica Neue\" />\n              <option value=\"Impact\" />\n              <option value=\"KaTeX_AMS\" />\n              <option value=\"KaTeX_Caligraphic\" />\n              <option value=\"KaTeX_Fraktur\" />\n              <option value=\"KaTeX_Main\" />\n              <option value=\"KaTeX_Math\" />\n              <option value=\"KaTeX_SansSerif\" />\n              <option value=\"KaTeX_Script\" />\n              <option value=\"KaTeX_Typewriter\" />\n              <option value=\"Lato\" />\n              <option value=\"Liberation Mono\" />\n              <option value=\"Lucida Caligraphy\" />\n              <option value=\"Lucida Sans\" />\n              <option value=\"Menlo\" />\n              <option value=\"Monaco\" />\n              <option value=\"Monospace\" />\n              <option value=\"New York\" />\n              <option value=\"Oxygen\" />\n              <option value=\"Palatino\" />\n              <option value=\"Roboto\" />\n              <option value=\"Sans-Serif\" />\n              <option value=\"Segoe UI\" />\n              <option value=\"SFMono-Regular\" />\n              <option value=\"Serif\" />\n              <option value=\"Sylfaen\" />\n              <option value=\"Tahoma\" />\n              <option value=\"Times New Roman\" />\n              <option value=\"Trebuchet MS\" />\n              <option value=\"Ubuntu\" />\n              <option value=\"Verdana\" />\n              <option value=\"Yu Gothic\" />\n            </datalist>\n            <div className=\"sk-panel-row title-section\">\n              <h1>{title}</h1>\n              <button id=\"undoDialog\" onClick={onCancel} title=\"Close\">\n                <svg\n                  width=\"20\"\n                  height=\"20\"\n                  viewBox=\"0 0 20 20\"\n                  fill=\"none\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    d=\"M15.2459 5.92917C15.5704 5.6047 15.5704 5.07864 15.2459 4.75417C14.9214 4.4297 14.3954 4.4297 14.0709 4.75417L10.0001 8.82501L5.92925 4.75417C5.60478 4.4297 5.07872 4.4297 4.75425 4.75417C4.42978 5.07864 4.42978 5.6047 4.75425 5.92917L8.82508 10L4.75425 14.0708C4.42978 14.3953 4.42978 14.9214 4.75425 15.2458C5.07872 15.5703 5.60478 15.5703 5.92925 15.2458L10.0001 11.175L14.0709 15.2458C14.3954 15.5703 14.9214 15.5703 15.2459 15.2458C15.5704 14.9214 15.5704 14.3953 15.2459 14.0708L11.1751 10L15.2459 5.92917Z\"\n                    fill={'var(--sn-stylekit-foreground-color)'}\n                  />\n                </svg>\n              </button>\n            </div>\n            <section className=\"sk-panel-row settings\">\n              <div className=\"text-and-undo-button\">\n                <p>\n                  Need help? Check out the{' '}\n                  <a href={helpLink} target=\"_blank\" rel=\"noopener noreferrer\">\n                    documentation\n                  </a>\n                  . For the default settings, click undo:&nbsp;\n                </p>\n                <button\n                  onClick={this.clearAllSettings}\n                  title=\"Reset all Settings\"\n                  id={resetAllSettingsID}\n                >\n                  <span className=\"undo-button\">\n                    <svg\n                      width=\"20\"\n                      height=\"20\"\n                      viewBox=\"0 0 20 20\"\n                      fill=\"none\"\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                    >\n                      <path\n                        d=\"M10.1812 7.66667C8.36883 7.66667 6.72741 8.33333 5.46214 9.4L3 7V13H9.15535L6.67953 10.5867C7.63019 9.81333 8.84074 9.33333 10.1812 9.33333C12.6023 9.33333 14.661 10.8733 15.3791 13L17 12.48C16.0493 9.68667 13.3615 7.66667 10.1812 7.66667Z\"\n                        fill={'var(--sn-stylekit-foreground-color)'}\n                      />\n                    </svg>\n                  </span>\n                </button>\n              </div>\n            </section>\n            <section className=\"sk-panel-row settings\">\n              <div className=\"text-and-undo-button\">\n                <p>Editing Mode: </p>\n                <button\n                  onClick={this.clearEditingMode}\n                  title=\"Reset Editing Mode to Plain Textarea\"\n                >\n                  <span className=\"undo-button\">\n                    <svg\n                      width=\"20\"\n                      height=\"20\"\n                      viewBox=\"0 0 20 20\"\n                      fill=\"none\"\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                    >\n                      <path\n                        d=\"M10.1812 7.66667C8.36883 7.66667 6.72741 8.33333 5.46214 9.4L3 7V13H9.15535L6.67953 10.5867C7.63019 9.81333 8.84074 9.33333 10.1812 9.33333C12.6023 9.33333 14.661 10.8733 15.3791 13L17 12.48C16.0493 9.68667 13.3615 7.66667 10.1812 7.66667Z\"\n                        fill={'var(--sn-stylekit-foreground-color)'}\n                      />\n                    </svg>\n                  </span>\n                </button>\n              </div>\n            </section>\n            <section className=\"sk-panel-row settings\">\n              <label>\n                <input\n                  id={usePlainTextID}\n                  name={editingModeID}\n                  value={usePlainTextID}\n                  className=\"radio\"\n                  type=\"radio\"\n                  checked={this.state.editingMode === usePlainTextID}\n                  onChange={this.handleInputChange}\n                />\n                Plain Textarea: no formatting (default, mobile recommended)\n              </label>\n            </section>\n            <section className=\"sk-panel-row settings\">\n              <label>\n                <input\n                  id={useCodeMirrorID}\n                  name={editingModeID}\n                  value={useCodeMirrorID}\n                  type=\"radio\"\n                  className=\"radio\"\n                  checked={this.state.editingMode === useCodeMirrorID}\n                  onChange={this.handleInputChange}\n                />\n                CodeMirror: in-line formatting for Markdown\n              </label>\n            </section>\n            <section className=\"sk-panel-row settings\">\n              <label htmlFor={useMonacoEditorID}>\n                <input\n                  id={useMonacoEditorID}\n                  name={editingModeID}\n                  value={useMonacoEditorID}\n                  type=\"radio\"\n                  className=\"radio\"\n                  checked={this.state.editingMode === useMonacoEditorID}\n                  onChange={this.handleInputChange}\n                />\n                Monaco Editor: in-line formatting for many languages (desktop\n                recommended)\n              </label>\n            </section>\n            {this.state.useMonacoEditor && [\n              <section className=\"sk-panel-row settings\">\n                <label htmlFor={MonacoEditorLanguageID}>\n                  Monaco Editor Language:{' '}\n                </label>\n                <div>\n                  <label>\n                    <select\n                      id={MonacoEditorLanguageID}\n                      name={MonacoEditorLanguageID}\n                      value={this.state.MonacoEditorLanguage}\n                      onChange={this.handleSelectChange}\n                    >\n                      <option>abap</option>\n                      <option>aes</option>\n                      <option>apex</option>\n                      <option>azcli</option>\n                      <option>bat</option>\n                      <option>c</option>\n                      <option>cameligo</option>\n                      <option>clojure</option>\n                      <option>coffeescript</option>\n                      <option>cpp</option>\n                      <option>csharp</option>\n                      <option>csp</option>\n                      <option>css</option>\n                      <option>dart</option>\n                      <option>dockerfile</option>\n                      <option>fsharp</option>\n                      <option>go</option>\n                      <option>graphql</option>\n                      <option>handlebars</option>\n                      <option>hcl</option>\n                      <option>html</option>\n                      <option>ini</option>\n                      <option>java</option>\n                      <option>javascript</option>\n                      <option>json</option>\n                      <option>julia</option>\n                      <option>kotlin</option>\n                      <option>less</option>\n                      <option>lexon</option>\n                      <option>lua</option>\n                      <option>markdown</option>\n                      <option>mips</option>\n                      <option>msdax</option>\n                      <option>mysql</option>\n                      <option>objective-c</option>\n                      <option>pascal</option>\n                      <option>pascaligo</option>\n                      <option>perl</option>\n                      <option>pgsql</option>\n                      <option>php</option>\n                      <option>plaintext</option>\n                      <option>postiats</option>\n                      <option>powerquery</option>\n                      <option>powershell</option>\n                      <option>pug</option>\n                      <option>python</option>\n                      <option>r</option>\n                      <option>razor</option>\n                      <option>redis</option>\n                      <option>redshift</option>\n                      <option>restructuredtext</option>\n                      <option>ruby</option>\n                      <option>rust</option>\n                      <option>sb</option>\n                      <option>scala</option>\n                      <option>scheme</option>\n                      <option>scss</option>\n                      <option>shell</option>\n                      <option>sol</option>\n                      <option>sql</option>\n                      <option>st</option>\n                      <option>swift</option>\n                      <option>systemverilog</option>\n                      <option>tcl</option>\n                      <option>twig</option>\n                      <option>typescript</option>\n                      <option>vb</option>\n                      <option>verilog</option>\n                      <option>xml</option>\n                      <option>yaml</option>\n                    </select>\n                  </label>\n                  <button\n                    onClick={this.clearMonacoEditorLanguage}\n                    title=\"Reset Monaco Editor Language to Markdown\"\n                  >\n                    <span className=\"undo-button\">\n                      <svg\n                        width=\"20\"\n                        height=\"20\"\n                        viewBox=\"0 0 20 20\"\n                        fill=\"none\"\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                      >\n                        <path\n                          d=\"M10.1812 7.66667C8.36883 7.66667 6.72741 8.33333 5.46214 9.4L3 7V13H9.15535L6.67953 10.5867C7.63019 9.81333 8.84074 9.33333 10.1812 9.33333C12.6023 9.33333 14.661 10.8733 15.3791 13L17 12.48C16.0493 9.68667 13.3615 7.66667 10.1812 7.66667Z\"\n                          fill={'var(--sn-stylekit-foreground-color)'}\n                        />\n                      </svg>\n                    </span>\n                  </button>\n                </div>\n              </section>,\n            ]}\n            <section className=\"sk-panel-row settings\">\n              <label htmlFor={fontSizeID}>Choose a base font size: </label>\n              <div>\n                <select\n                  id={fontSizeID}\n                  name={fontSizeID}\n                  value={this.state.fontSize}\n                  onChange={this.handleSelectChange}\n                >\n                  <option></option>\n                  <option>12px</option>\n                  <option>13px</option>\n                  <option>14px</option>\n                  <option>15px</option>\n                  <option>16px</option>\n                  <option>17px</option>\n                  <option>18px</option>\n                  <option>19px</option>\n                  <option>20px</option>\n                  <option>21px</option>\n                  <option>22px</option>\n                  <option>23px</option>\n                  <option>24px</option>\n                  <option>25px</option>\n                  <option>26px</option>\n                  <option>27px</option>\n                  <option>28px</option>\n                  <option>29px</option>\n                  <option>30px</option>\n                </select>\n                <button\n                  onClick={this.clearFontSize}\n                  title=\"Reset font size to 16px\"\n                >\n                  <span className=\"undo-button\">\n                    <svg\n                      width=\"20\"\n                      height=\"20\"\n                      viewBox=\"0 0 20 20\"\n                      fill=\"none\"\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                    >\n                      <path\n                        d=\"M10.1812 7.66667C8.36883 7.66667 6.72741 8.33333 5.46214 9.4L3 7V13H9.15535L6.67953 10.5867C7.63019 9.81333 8.84074 9.33333 10.1812 9.33333C12.6023 9.33333 14.661 10.8733 15.3791 13L17 12.48C16.0493 9.68667 13.3615 7.66667 10.1812 7.66667Z\"\n                        fill={'var(--sn-stylekit-foreground-color)'}\n                      />\n                    </svg>\n                  </span>\n                </button>\n              </div>\n            </section>\n            <section className=\"sk-panel-row settings\">\n              <label htmlFor={fontEditID}>\n                Choose a font for Edit/Append:{' '}\n              </label>\n              <div>\n                <input\n                  list=\"fonts\"\n                  id={fontEditID}\n                  name={fontEditID}\n                  value={this.state.fontEdit}\n                  onChange={this.handleInputChange}\n                  onKeyDown={this.onKeyDown}\n                  onKeyUp={this.onKeyUp}\n                  type=\"text\"\n                />\n                <button\n                  onClick={this.clearFontEdit}\n                  title=\"Reset font for Edit/Append\"\n                >\n                  <span className=\"undo-button\">\n                    <svg\n                      width=\"20\"\n                      height=\"20\"\n                      viewBox=\"0 0 20 20\"\n                      fill=\"none\"\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                    >\n                      <path\n                        d=\"M10.1812 7.66667C8.36883 7.66667 6.72741 8.33333 5.46214 9.4L3 7V13H9.15535L6.67953 10.5867C7.63019 9.81333 8.84074 9.33333 10.1812 9.33333C12.6023 9.33333 14.661 10.8733 15.3791 13L17 12.48C16.0493 9.68667 13.3615 7.66667 10.1812 7.66667Z\"\n                        fill={'var(--sn-stylekit-foreground-color)'}\n                      />\n                    </svg>\n                  </span>\n                </button>\n              </div>\n            </section>\n            <section className=\"sk-panel-row settings\">\n              <label htmlFor={fontViewID}>Choose a font for View/Print: </label>\n              <div>\n                <input\n                  list=\"fonts\"\n                  id={fontViewID}\n                  name={fontViewID}\n                  value={this.state.fontView}\n                  onChange={this.handleInputChange}\n                  onKeyDown={this.onKeyDown}\n                  onKeyUp={this.onKeyUp}\n                  type=\"text\"\n                />\n                <button\n                  onClick={this.clearFontView}\n                  title=\"Reset font for View/Print\"\n                >\n                  <span className=\"undo-button\">\n                    <svg\n                      width=\"20\"\n                      height=\"20\"\n                      viewBox=\"0 0 20 20\"\n                      fill=\"none\"\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                    >\n                      <path\n                        d=\"M10.1812 7.66667C8.36883 7.66667 6.72741 8.33333 5.46214 9.4L3 7V13H9.15535L6.67953 10.5867C7.63019 9.81333 8.84074 9.33333 10.1812 9.33333C12.6023 9.33333 14.661 10.8733 15.3791 13L17 12.48C16.0493 9.68667 13.3615 7.66667 10.1812 7.66667Z\"\n                        fill={'var(--sn-stylekit-foreground-color)'}\n                      />\n                    </svg>\n                  </span>\n                </button>\n              </div>\n            </section>\n            <section className=\"sk-panel-row settings\">\n              <button\n                className=\"toggle-button\"\n                onClick={this.toggleShowCustomStyles}\n              >\n                {this.state.showCustomStyles ? (\n                  <span className=\"chevron-button\">\n                    <svg\n                      width=\"20\"\n                      height=\"20\"\n                      viewBox=\"0 0 20 20\"\n                      fill=\"none\"\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                    >\n                      <path\n                        d=\"M6.17622 7.15015L10.0012 10.9751L13.8262 7.15015L15.0012 8.33348L10.0012 13.3335L5.00122 8.33348L6.17622 7.15015Z\"\n                        fill={'var(--sn-stylekit-foreground-color)'}\n                      />\n                    </svg>\n                  </span>\n                ) : (\n                  <span className=\"chevron-button\">\n                    <svg\n                      width=\"20\"\n                      height=\"20\"\n                      viewBox=\"0 0 20 20\"\n                      fill=\"none\"\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                    >\n                      <path\n                        d=\"M6.90918 14.0667L10.7342 10.2417L6.90918 6.4167L8.09251 5.2417L13.0925 10.2417L8.09251 15.2417L6.90918 14.0667Z\"\n                        fill={'var(--sn-stylekit-foreground-color)'}\n                      />\n                    </svg>\n                  </span>\n                )}\n                <p className={'button-caption'}>Add custom styles (CSS):</p>\n              </button>\n              {this.state.showCustomStyles && [\n                <div className=\"text-and-undo-button\">\n                  <button\n                    onClick={this.clearCustomStyles}\n                    title=\"Reset custom styles (CSS)\"\n                  >\n                    <span className=\"undo-button\">\n                      <svg\n                        width=\"20\"\n                        height=\"20\"\n                        viewBox=\"0 0 20 20\"\n                        fill=\"none\"\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                      >\n                        <path\n                          d=\"M10.1812 7.66667C8.36883 7.66667 6.72741 8.33333 5.46214 9.4L3 7V13H9.15535L6.67953 10.5867C7.63019 9.81333 8.84074 9.33333 10.1812 9.33333C12.6023 9.33333 14.661 10.8733 15.3791 13L17 12.48C16.0493 9.68667 13.3615 7.66667 10.1812 7.66667Z\"\n                          fill={'var(--sn-stylekit-foreground-color)'}\n                        />\n                      </svg>\n                    </span>\n                  </button>\n                </div>,\n              ]}\n            </section>\n            {this.state.showCustomStyles && [\n              <section className=\"sk-panel-row settings\">\n                <MonacoEditor\n                  tabSize={2}\n                  language=\"css\"\n                  text={this.state.customStyles}\n                  onKeyDown={this.onKeyDown}\n                  onKeyUp={this.onKeyUp}\n                  saveText={this.saveText}\n                />\n              </section>,\n            ]}\n          </div>\n        </div>\n        <div className=\"sk-panel-footer\">\n          <div className=\"sk-button-group stretch\">\n            <button className=\"sk-button neutral\" onClick={onCancel}>\n              <div className=\"sk-label\">{cancelText}</div>\n            </button>\n            <button className=\"sk-button info\" onClick={this.handleSubmit}>\n              <div className=\"sk-label\">{confirmText}</div>\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { EditorKit, EditorKitDelegate } from 'sn-editor-kit';\nimport PrintDialog from './PrintDialog';\nimport EditNote from './EditNote';\nimport ViewNote from './ViewNote';\nimport AppendText from './AppendText';\nimport Settings from './Settings';\nimport { MonacoDiffEditor } from './Monaco';\n\nimport CodeMirror, { Editor } from 'codemirror';\nimport 'codemirror/lib/codemirror';\nimport 'codemirror/mode/gfm/gfm';\nimport 'codemirror/mode/javascript/javascript';\nimport 'codemirror/mode/xml/xml';\n\n// CodeMirror addons\n\n// For markdown\nimport 'codemirror/addon/edit/continuelist';\n\n// For search\nimport 'codemirror/addon/search/jump-to-line';\nimport 'codemirror/addon/search/match-highlighter';\nimport 'codemirror/addon/search/matchesonscrollbar';\nimport 'codemirror/addon/search/search';\nimport 'codemirror/addon/search/searchcursor';\nimport 'codemirror/addon/dialog/dialog';\n\n// For styling selected text\nimport 'codemirror/addon/selection/mark-selection';\n\nconst appendButtonID = 'appendButton';\nconst editButtonID = 'editButton';\nconst helpButtonID = 'helpButton';\nconst printButtonID = 'printButton';\nconst settingsButtonID = 'settingsButton';\nconst viewButtonID = 'viewButton';\n\nconst headerID = 'header';\nconst contentID = 'content';\nconst appendixID = 'appendix';\n\nconst editTextAreaID = 'editTextArea';\nconst appendTextAreaID = 'appendTextArea';\n\nconst newLineID = 'newLine';\nconst newParagraphID = 'newParagraph';\n\n/**\n * Some properties are optional so\n * they do not need to be set\n * when switching between notes.\n */\n\nconst initialState = {\n  text: '',\n  appendNewLine: false,\n  appendNewParagraph: false,\n  appendMode: false,\n  appendRows: 8,\n  appendText: '',\n  confirmPrintURL: false,\n  customStyles: '',\n  fontEdit: '',\n  fontSize: '',\n  fontView: '',\n  loadedMetaData: false,\n  MonacoEditorLanguage: 'markdown',\n  printMode: false,\n  printURL: true,\n  refreshEdit: false,\n  refreshView: false,\n  showAppendix: true,\n  showHeader: true,\n  showHelp: false,\n  showDiff: false,\n  settingsMode: false,\n  useCodeMirror: false,\n  useMonacoEditor: false,\n};\n\nconst debugMode = false;\n\nlet keyMap = new Map();\n\nexport interface AppendInterface {\n  text: string;\n  appendCodeMirror?: any;\n  appendNewLine: boolean;\n  appendNewParagraph: boolean;\n  appendMode: boolean;\n  appendRows: number;\n  appendText: string;\n  confirmPrintURL: boolean;\n  currentState?: object;\n  customStyles: string;\n  editMode?: any;\n  editCodeMirror?: any;\n  fontEdit: string;\n  fontSize: string;\n  fontView: string;\n  keyMap?: Object;\n  loadedMetaData: boolean;\n  MonacoEditorLanguage: string;\n  printMode: boolean;\n  printURL: boolean;\n  refreshEdit: boolean;\n  refreshView: boolean;\n  showAppendix: boolean;\n  showDiff: boolean;\n  showHeader: boolean;\n  showHelp: boolean;\n  showMenu?: boolean;\n  settingsMode: boolean;\n  useCodeMirror: boolean;\n  useMonacoEditor: boolean;\n  viewMode?: boolean;\n}\n\nexport default class AppendEditor extends React.Component<{}, AppendInterface> {\n  editorKit: any;\n\n  constructor(props: AppendInterface) {\n    super(props);\n    this.configureEditorKit();\n    this.state = initialState;\n  }\n\n  componentDidMount = () => {\n    if (!this.state.text && !this.state.appendText) {\n      this.setState({ viewMode: true });\n    }\n  };\n\n  configureEditorKit = () => {\n    let delegate = new EditorKitDelegate({\n      setEditorRawText: (text: string) => {\n        this.setState(\n          {\n            ...initialState,\n            text,\n          },\n          () => {\n            this.refreshEdit();\n            this.activateStyles();\n          }\n        );\n      },\n      clearUndoHistory: () => {},\n      getElementsBySelector: () => [],\n    });\n\n    this.editorKit = new EditorKit({\n      delegate: delegate,\n      mode: 'plaintext',\n      supportsFilesafe: false,\n    });\n  };\n\n  // This loads the Append Text, settings, and useCodeMirror\n  loadMetaData = () => {\n    this.editorKit.internal.componentManager.streamContextItem((note: any) => {\n      // Load editor settings\n      if (\n        note.content.appendEditorCustomStyles ||\n        note.content.appendEditorFontEdit ||\n        note.content.appendEditorFontSize ||\n        note.content.appendEditorFontView ||\n        note.content.appendEditorMonacoEditorLanguage ||\n        note.content.appendEditorUseCodeMirror ||\n        note.content.appendEditorUseMonacoEditor\n      ) {\n        this.setState(\n          {\n            customStyles: note.content.appendEditorCustomStyles,\n            fontEdit: note.content.appendEditorFontEdit,\n            fontSize: note.content.appendEditorFontSize,\n            fontView: note.content.appendEditorFontView,\n            MonacoEditorLanguage: note.content.appendEditorMonacoEditorLanguage,\n            useCodeMirror: note.content.appendEditorUseCodeMirror,\n            useMonacoEditor: note.content.appendEditorUseMonacoEditor,\n          },\n          () => {\n            this.refreshEdit();\n            this.activateStyles();\n          }\n        );\n      }\n      // Load append settings\n      if (note.content.appendNewLine || note.content.appendNewParagraph) {\n        this.setState({\n          appendNewLine: note.content.appendNewLine,\n          appendNewParagraph: note.content.appendNewParagraph,\n        });\n      }\n      // Finally, load appendText\n      this.setState({\n        appendText: note.content.appendText,\n        loadedMetaData: true,\n      });\n      if (debugMode) {\n        console.log('loaded append text: ' + this.state.appendText);\n        console.log('loaded append newline: ' + this.state.appendNewLine);\n        console.log(\n          'loaded append new paragraph: ' + this.state.appendNewParagraph\n        );\n        console.log(\n          'internal appendText: ' +\n            this.editorKit.internal.note.content.appendText\n        );\n      }\n    });\n  };\n\n  saveText = (text: string) => {\n    this.saveNote(text);\n    this.setState(\n      {\n        text: text,\n      },\n      () => {\n        if (debugMode) {\n          console.log('saved text in AppendEditor.tsx: ' + this.state.text);\n        }\n      }\n    );\n  };\n\n  saveNote = (text: string) => {\n    // This will work in an SN context, but breaks the standalone editor, so we need to catch the error\n    try {\n      this.editorKit.onEditorValueChanged(text);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  // Entry operations\n\n  appendTextToNote = () => {\n    // Do nothing if there's no append text\n    if (this.state.appendText) {\n      /*\n       * We usually use this.editText() to save the main text\n       * However, we want to save the main text and clear the appendText\n       * Consecutive calls to the component manager does not work well,\n       * so we want to do both with one call to the component manager\n       * This means we need multiple versions of this function depending on what we want to save */\n      const { appendText } = this.state;\n      let textToAppend = '';\n      // We test for new paragraph first even though new line is on top and is on by default\n      if (this.state.appendNewParagraph) {\n        textToAppend = '  \\n\\n' + appendText;\n      } else if (this.state.appendNewLine) {\n        textToAppend = '  \\n' + appendText;\n      } else {\n        textToAppend = appendText;\n      }\n      this.setState(\n        {\n          text: this.state.text.concat(textToAppend),\n          appendText: '',\n        },\n        () => {\n          let note = this.editorKit.internal.note;\n          if (note) {\n            this.editorKit.internal.componentManager.saveItemWithPresave(\n              note,\n              () => {\n                note.content.text = this.state.text; // this.editorKit.internal.note.content.text\n                note.content.appendText = this.state.appendText; // this.editorKit.internal.note.content.appendText\n              }\n            );\n          }\n          this.refreshEdit();\n        }\n      );\n    }\n    // Refresh appendCodeMirror\n    if (this.state.appendCodeMirror && this.state.useCodeMirror) {\n      this.state.appendCodeMirror.setValue('');\n    }\n  };\n\n  autoSaveAppendText = (text: string) => {\n    // This code is similar to this.onAppend();, but we only save the appendText and not the main text\n    this.setState({\n      appendText: text,\n    });\n    // This will work in an SN context, but breaks the standalone editor, so we need to catch the error\n    try {\n      let note = this.editorKit.internal.note;\n      if (note) {\n        this.editorKit.internal.componentManager.saveItemWithPresave(\n          note,\n          () => {\n            note.content.appendText = text;\n          }\n        );\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  autoSaveCheckBoxes = (newLine: boolean, newParagraph: boolean) => {\n    // Here we save the appendText, appendNewLine, and appendNewParagraph\n    // We have an additional function for this because we only call it when the user clicks a checkbox\n    this.setState({\n      appendNewLine: newLine,\n      appendNewParagraph: newParagraph,\n    });\n    // This will work in an SN context, but breaks the standalone editor, so we need to catch the error\n    try {\n      let note = this.editorKit.internal.note;\n      if (note) {\n        this.editorKit.internal.componentManager.saveItemWithPresave(\n          note,\n          () => {\n            note.content.appendNewLine = newLine;\n            note.content.appendNewParagraph = newParagraph;\n          }\n        );\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  refreshEdit = () => {\n    this.setState(\n      {\n        refreshEdit: !this.state.refreshEdit,\n      },\n      () => {\n        // We could also check for this.state.editMode,\n        // but it might not be loaded yet.\n        // Checking for editTextArea checks whether editMode has loaded\n        const editTextArea = document.getElementById(editTextAreaID);\n        if (this.state.useCodeMirror && editTextArea) {\n          this.configureCodeMirror(editTextAreaID);\n        }\n      }\n    );\n  };\n\n  onRefreshView = () => {\n    this.setState({\n      refreshView: !this.state.refreshView,\n    });\n  };\n\n  configureCodeMirror = (id: string) => {\n    if (id === editTextAreaID) {\n      if (debugMode) {\n        console.log('this.state.text: ' + this.state.text);\n      }\n      const editTextArea = document.getElementById(id) as HTMLTextAreaElement;\n      if (editTextArea) {\n        const editCodeMirror = CodeMirror.fromTextArea(editTextArea, {\n          autocorrect: true,\n          autocapitalize: true,\n          extraKeys: {\n            Enter: 'newlineAndIndentContinueMarkdownList',\n            'Alt-F': 'findPersistent',\n          },\n          lineNumbers: false,\n          lineWrapping: true,\n          mode: 'gfm',\n          spellcheck: true,\n          //@ts-ignore\n          styleSelectedText: true,\n          tabindex: 0,\n          theme: 'default',\n          value: this.state.text,\n        });\n        editCodeMirror.setSize('100%', '100%');\n        editCodeMirror.on('change', () => {\n          const editCodeMirrorText = editCodeMirror.getValue();\n          if (debugMode) {\n            console.log('editCodeMirror value: ' + editCodeMirrorText);\n          }\n          editCodeMirror.save();\n          this.saveText(editCodeMirrorText);\n        });\n        editCodeMirror.on('keydown', (cm: Editor, event: KeyboardEvent) => {\n          this.onKeyDown(event);\n          this.onKeyDownEditTextArea(event);\n          this.onKeyDownTextArea(event);\n        });\n        editCodeMirror.on('keyup', (cm: Editor, event: KeyboardEvent) => {\n          this.onKeyUp(event);\n        });\n        this.setState({\n          editCodeMirror: editCodeMirror,\n        });\n      }\n    } else if (id === appendTextAreaID) {\n      const appendTextArea = document.getElementById(\n        appendTextAreaID\n      ) as HTMLTextAreaElement;\n      if (appendTextArea) {\n        const appendCodeMirror = CodeMirror.fromTextArea(appendTextArea, {\n          autocorrect: true,\n          autocapitalize: true,\n          extraKeys: {\n            Enter: 'newlineAndIndentContinueMarkdownList',\n            'Alt-F': 'findPersistent',\n          },\n          lineNumbers: false,\n          lineWrapping: true,\n          mode: 'gfm',\n          spellcheck: true,\n          //@ts-ignore\n          styleSelectedText: true,\n          tabindex: 0,\n          theme: 'default',\n          value: this.state.appendText,\n        });\n        appendCodeMirror.setSize('100%', '100%');\n        appendCodeMirror.on('change', () => {\n          const appendCodeMirrorText = appendCodeMirror.getValue();\n          appendCodeMirror.save();\n          this.autoSaveAppendText(appendCodeMirrorText);\n        });\n        appendCodeMirror.on('keydown', (cm: Editor, event: KeyboardEvent) => {\n          this.onKeyDown(event);\n          this.onKeyDownAppendTextArea(event);\n          this.onKeyDownTextArea(event);\n        });\n        appendCodeMirror.on('keyup', (cm: Editor, event: KeyboardEvent) => {\n          this.onKeyUp(event);\n        });\n        this.setState({\n          appendCodeMirror: appendCodeMirror,\n        });\n      }\n    }\n  };\n\n  makeContentEditable = () => {\n    const content = document.getElementById(contentID);\n    if (content) {\n      content.setAttribute('contenteditable', 'true');\n      content.setAttribute('spellcheck', 'true');\n    }\n    const appendix = document.getElementById(appendixID);\n    if (appendix) {\n      appendix.setAttribute('contenteditable', 'true');\n      appendix.setAttribute('spellcheck', 'true');\n    }\n    // Change contenteditable to false for rendered note\n    const renderedNote = document.getElementById('renderedNote');\n    if (renderedNote) {\n      renderedNote.setAttribute('contenteditable', 'false');\n    }\n    const appendCustom = document.getElementById('appendCustom');\n    if (appendCustom) {\n      appendCustom.setAttribute('contenteditable', 'false');\n    }\n  };\n\n  removeContentEditable = (id: string) => {\n    const container = document.getElementById(id);\n    if (container) {\n      container.setAttribute('contenteditable', 'false');\n    }\n  };\n\n  // Event Handlers\n  onEditMode = () => {\n    // if Append box is empty, close it and open Edit mode\n    // if Edit mode is on, then close it, open View mode, and Append mode\n    if (!this.state.editMode) {\n      if (this.state.appendMode) {\n        const appendTextArea = document.getElementById(\n          appendTextAreaID\n        ) as HTMLInputElement;\n        if (\n          (appendTextArea && !appendTextArea.value) ||\n          !this.state.appendText\n        ) {\n          this.setState({\n            appendMode: false,\n          });\n        }\n      }\n      this.setState(\n        {\n          editMode: true,\n        },\n        () => {\n          const editTextArea = document.getElementById(editTextAreaID);\n          if (editTextArea) {\n            editTextArea.focus();\n          }\n          if (this.state.useCodeMirror && editTextArea) {\n            this.configureCodeMirror(editTextAreaID);\n          }\n        }\n      );\n    } else if (this.state.editMode) {\n      /**If edit mode is on and\n       * print mode is off, and Monaco Editor is off,\n       * then turn edit mode off and turn view mode on.\n       * This automatically renders the text. We do not\n       * do this when Monaco is on because refreshing edit Mode\n       * with Monaco Editor off allows resizing the Monaco Editor.\n       */\n      if (!this.state.printMode && !this.state.useMonacoEditor) {\n        this.setState({\n          viewMode: true,\n        });\n      }\n      if (this.state.editCodeMirror) {\n        this.state.editCodeMirror.toTextArea();\n      }\n      this.setState(\n        {\n          editMode: false,\n        },\n        () => {\n          // if not using append mode, focus on editButton\n          if (!this.state.appendMode) {\n            const editButton = document.getElementById(editButtonID);\n            if (editButton) {\n              editButton.focus();\n            }\n          }\n        }\n      );\n    }\n  };\n\n  onAppendMode = (scrollDown = true, closeEdit = true, focus = true) => {\n    if (!this.state.appendMode) {\n      if (closeEdit) {\n        this.setState({\n          editMode: false,\n        });\n      }\n      this.setState(\n        {\n          appendMode: true,\n        },\n        () => {\n          if (scrollDown) {\n            this.scrollToBottom();\n          }\n          if (focus) {\n            const appendTextArea = document.getElementById(appendTextAreaID);\n            if (appendTextArea) {\n              appendTextArea.focus();\n            }\n          }\n          if (this.state.useCodeMirror) {\n            this.configureCodeMirror(appendTextAreaID);\n          }\n        }\n      );\n    } else if (this.state.appendMode) {\n      if (this.state.appendCodeMirror) {\n        this.state.appendCodeMirror.toTextArea();\n      }\n      this.setState(\n        {\n          appendMode: false,\n        },\n        () => {\n          if (this.state.useMonacoEditor) {\n            this.refreshEdit();\n          }\n          if (focus) {\n            const appendButton = document.getElementById(appendButtonID);\n            if (appendButton) {\n              appendButton.focus();\n            }\n          }\n        }\n      );\n    }\n  };\n\n  onPrintMode = () => {\n    this.setState(\n      {\n        showHeader: false,\n        showAppendix: false,\n        editMode: false,\n        printMode: true,\n        viewMode: false,\n        refreshView: !this.state.refreshView,\n      },\n      () => {\n        window.print();\n        this.setState(\n          {\n            showHeader: true,\n            showAppendix: true,\n          },\n          () => {\n            const printButton = document.getElementById(printButtonID);\n            if (printButton) {\n              printButton.focus();\n            }\n          }\n        );\n      }\n    );\n  };\n\n  onViewMode = () => {\n    if (!this.state.viewMode) {\n      this.setState(\n        {\n          viewMode: true,\n          printMode: false,\n        },\n        () => {\n          if (this.state.useMonacoEditor) {\n            this.refreshEdit();\n          }\n          if (this.state.appendMode && !this.state.editMode) {\n            this.skipToBottom();\n          }\n        }\n      );\n    }\n    if (this.state.viewMode) {\n      this.setState(\n        {\n          viewMode: false,\n        },\n        () => {\n          if (this.state.useMonacoEditor) {\n            this.refreshEdit();\n          }\n          if (!this.state.editMode && !this.state.appendMode) {\n            this.onEditMode();\n          }\n        }\n      );\n    }\n  };\n\n  onToggleShowHelp = () => {\n    this.setState(\n      {\n        showHelp: !this.state.showHelp,\n      },\n      () => {\n        this.onRefreshView();\n        const helpButton = document.getElementById(helpButtonID);\n        if (helpButton) {\n          helpButton.focus();\n        }\n      }\n    );\n  };\n\n  onToggleShowMenu = () => {\n    this.setState({\n      showMenu: !this.state.showMenu,\n    });\n  };\n\n  onSettingsMode = () => {\n    // Here we save the current state. We reload the current state if we cancel\n    if (!this.state.settingsMode) {\n      this.setState(\n        {\n          currentState: this.state,\n        },\n        () => {\n          this.setState(\n            {\n              showAppendix: false, // Hides the scroll up/down buttons\n              showHeader: false,\n              appendMode: false,\n              editMode: false,\n              printMode: false,\n              viewMode: false,\n              settingsMode: true,\n            },\n            () => {\n              const undoDialog = document.getElementById('undoDialog');\n              if (undoDialog) {\n                undoDialog.focus();\n              }\n            }\n          );\n        }\n      );\n    } else if (this.state.settingsMode) {\n      this.setState(\n        {\n          ...this.state.currentState,\n          settingsMode: false,\n        },\n        () => {\n          this.refreshEdit();\n          const settingsButton = document.getElementById(settingsButtonID);\n          if (settingsButton) {\n            settingsButton.focus();\n          }\n        }\n      );\n    }\n  };\n\n  // We don't save the current state and reload it after confirm settings are saved\n  // This requires us to manually reload editMode and appendMode\n  // This is important for settings, especially useCodeMirror\n  onSaveSettings = (\n    { customStyles }: AppendInterface,\n    { fontEdit }: AppendInterface,\n    { fontSize }: AppendInterface,\n    { fontView }: AppendInterface,\n    { MonacoEditorLanguage }: AppendInterface,\n    { useCodeMirror }: AppendInterface,\n    { useMonacoEditor }: AppendInterface\n  ) => {\n    this.setState(\n      {\n        customStyles,\n        fontEdit,\n        fontSize,\n        fontView,\n        MonacoEditorLanguage,\n        useCodeMirror,\n        useMonacoEditor,\n        showAppendix: true,\n        showHeader: true,\n        settingsMode: false,\n        viewMode: true,\n      },\n      () => {\n        this.activateStyles();\n        const settingsButton = document.getElementById(settingsButtonID);\n        if (settingsButton) {\n          settingsButton.focus();\n        }\n      }\n    );\n    let note = this.editorKit.internal.note;\n    if (note) {\n      this.editorKit.internal.componentManager.saveItemWithPresave(note, () => {\n        note.content.appendEditorCustomStyles = customStyles;\n        note.content.appendEditorFontEdit = fontEdit;\n        note.content.appendEditorFontSize = fontSize;\n        note.content.appendEditorFontView = fontView;\n        note.content.appendEditorMonacoEditorLanguage = MonacoEditorLanguage;\n        note.content.appendEditorUseCodeMirror = useCodeMirror;\n        note.content.appendEditorUseMonacoEditor = useMonacoEditor;\n      });\n    }\n  };\n\n  activateStyles = () => {\n    const sheetToBeRemoved = document.getElementById('customStyleSheet');\n    if (sheetToBeRemoved) {\n      const sheetParent = sheetToBeRemoved.parentNode;\n      if (sheetParent) {\n        sheetParent.removeChild(sheetToBeRemoved);\n      }\n    }\n    const sheet = document.createElement('style');\n    sheet.setAttribute('id', 'customStyleSheet');\n\n    const fontEditStyle =\n      '.CodeMirror, #editTextArea, #appendTextArea {font-family: ' +\n      this.state.fontEdit +\n      ';}';\n    const fontSizeStyle =\n      '.CodeMirror, #editTextArea, #appendTextArea, #renderedNote {font-size: ' +\n      this.state.fontSize +\n      ';}';\n    const fontViewStyle =\n      '#renderedNote {font-family: ' + this.state.fontView + ';}';\n    sheet.innerHTML =\n      this.state.customStyles +\n      '\\n' +\n      fontEditStyle +\n      '\\n' +\n      fontSizeStyle +\n      '\\n' +\n      fontViewStyle +\n      '\\n';\n\n    document.body.appendChild(sheet);\n  };\n\n  onCancelPrint = () => {\n    this.setState(\n      {\n        confirmPrintURL: false,\n      },\n      () => {\n        const printButton = document.getElementById('printButton');\n        if (printButton) {\n          printButton.focus();\n        }\n      }\n    );\n  };\n\n  onConfirmPrintURL = () => {\n    if (!this.state.printMode) {\n      this.setState(\n        {\n          confirmPrintURL: true,\n        },\n        () => {\n          const undoDialog = document.getElementById('undoDialog');\n          if (undoDialog) {\n            undoDialog.focus();\n          }\n        }\n      );\n    } else if (this.state.printMode) {\n      this.setState(\n        {\n          printMode: false,\n          viewMode: true,\n        },\n        () => {\n          const printButton = document.getElementById('printButton');\n          if (printButton) {\n            printButton.focus();\n          }\n        }\n      );\n    }\n  };\n\n  printURLTrue = () => {\n    this.setState({\n      confirmPrintURL: false,\n      printURL: true,\n    });\n    this.onPrintMode();\n  };\n\n  printURLFalse = () => {\n    this.setState({\n      confirmPrintURL: false,\n      printURL: false,\n    });\n    this.onPrintMode();\n  };\n\n  // Need both content and appendix for mobile\n  scrollToBottom = () => {\n    document.body.scrollTop = 10000000; // for Safari\n    if (this.state.editMode) {\n      const editTextArea = document.getElementById(editTextAreaID);\n      if (editTextArea) {\n        editTextArea.scrollTop = 10000000;\n      }\n    }\n    if (this.state.appendMode) {\n      const appendTextArea = document.getElementById(appendTextAreaID);\n      if (appendTextArea) {\n        appendTextArea.scrollTop = 10000000;\n      }\n    }\n    const content = document.getElementById(contentID);\n    const appendix = document.getElementById(appendixID);\n    if (content) {\n      content.scrollIntoView({\n        behavior: 'smooth',\n        block: 'end',\n        inline: 'nearest',\n      }); // Bottom\n    }\n    if (appendix) {\n      appendix.scrollIntoView({\n        behavior: 'smooth',\n        block: 'end',\n        inline: 'nearest',\n      }); // Bottom\n    }\n  };\n\n  // Need both content and appendix for mobile\n  // Skip to Bottom is fast \"auto\" behavior instead of \"smooth\" behavior\n  skipToBottom = () => {\n    document.body.scrollTop = 10000000; // for Safari\n    if (this.state.editMode) {\n      const editTextArea = document.getElementById(editTextAreaID);\n      if (editTextArea) {\n        editTextArea.scrollTop = 10000000;\n      }\n    }\n    if (this.state.appendMode) {\n      const appendTextArea = document.getElementById(appendTextAreaID);\n      if (appendTextArea) {\n        appendTextArea.scrollTop = 10000000;\n      }\n    }\n    // We have both content and appendix so the skip works in PrintMode\n    const content = document.getElementById(contentID);\n    const appendix = document.getElementById(appendixID);\n    if (content) {\n      content.scrollIntoView({\n        behavior: 'auto',\n        block: 'end',\n        inline: 'nearest',\n      }); // Bottom\n    }\n    if (appendix) {\n      appendix.scrollIntoView({\n        behavior: 'auto',\n        block: 'end',\n        inline: 'nearest',\n      }); // Bottom\n    }\n  };\n\n  scrollToTop = () => {\n    if (this.state.editMode) {\n      const editTextArea = document.getElementById(editTextAreaID);\n      if (editTextArea) {\n        editTextArea.scrollTop = 0;\n      }\n    }\n    if (this.state.appendMode) {\n      const appendTextArea = document.getElementById(appendTextAreaID);\n      if (appendTextArea) {\n        appendTextArea.scrollTop = 0;\n      }\n    }\n    document.body.scrollTop = 0; // for Safari\n    const content = document.getElementById(contentID);\n    const header = document.getElementById(headerID);\n    if (content) {\n      content.scrollIntoView({\n        behavior: 'smooth',\n        block: 'start',\n        inline: 'nearest',\n      }); // Top\n    }\n    if (header) {\n      header.scrollIntoView({\n        behavior: 'smooth',\n        block: 'start',\n        inline: 'nearest',\n      }); // Top\n    }\n  };\n\n  // Need both content and appendix for mobile\n  // Skip to Bottom is fast \"auto\" behavior instead of \"smooth\" behavior\n  skipToTop = () => {\n    if (this.state.editMode) {\n      const editTextArea = document.getElementById(editTextAreaID);\n      if (editTextArea) {\n        editTextArea.scrollTop = 0;\n      }\n    }\n    if (this.state.appendMode) {\n      const appendTextArea = document.getElementById(appendTextAreaID);\n      if (appendTextArea) {\n        appendTextArea.scrollTop = 0;\n      }\n    }\n    document.body.scrollTop = 0; // for Safari\n    const content = document.getElementById(contentID);\n    const header = document.getElementById(headerID);\n    if (content) {\n      content.scrollIntoView({\n        behavior: 'auto',\n        block: 'start',\n        inline: 'nearest',\n      }); // Top\n    }\n    if (header) {\n      header.scrollIntoView({\n        behavior: 'auto',\n        block: 'start',\n        inline: 'nearest',\n      }); // Top\n    }\n  };\n\n  onKeyDown = (e: React.KeyboardEvent | KeyboardEvent) => {\n    keyMap.set(e.key, true);\n    // Click the top Append if 'Control' and 'e' are pressed\n    if (keyMap.get('Control') && keyMap.get('e')) {\n      e.preventDefault();\n      this.onEditMode();\n    }\n    // Click the top Append if 'Control' and 'u' are pressed\n    else if (\n      keyMap.get('Control') &&\n      !keyMap.get('Alt') &&\n      (keyMap.get('u') || keyMap.get('m'))\n    ) {\n      e.preventDefault();\n      this.onAppendMode();\n    }\n    // Click view if 'Control' and 'p' are pressed\n    else if (keyMap.get('Control') && !keyMap.get('Alt') && keyMap.get('p')) {\n      e.preventDefault();\n      this.onViewMode();\n    } else if (keyMap.get('Control') && keyMap.get('.')) {\n      e.preventDefault();\n      this.setState({\n        appendRows: this.state.appendRows + 1,\n      });\n    } else if (keyMap.get('Control') && keyMap.get(',')) {\n      e.preventDefault();\n      if (this.state.appendRows > 5) {\n        this.setState({\n          appendRows: this.state.appendRows - 1,\n        });\n      }\n    } else if (keyMap.get('Control') && keyMap.get('<')) {\n      // Edit only mode\n      e.preventDefault();\n      this.setState(\n        {\n          appendMode: false,\n          editMode: false,\n          printMode: false,\n          viewMode: false,\n        },\n        () => {\n          this.onEditMode();\n        }\n      );\n    } else if (keyMap.get('Control') && keyMap.get('>')) {\n      // Append only mode\n      e.preventDefault();\n      this.setState(\n        {\n          appendMode: false,\n          editMode: false,\n          printMode: false,\n          viewMode: false,\n        },\n        () => {\n          this.onAppendMode();\n        }\n      );\n    } else if (keyMap.get('Control') && keyMap.get('[')) {\n      e.preventDefault();\n      this.skipToTop();\n    } else if (keyMap.get('Control') && keyMap.get(']')) {\n      e.preventDefault();\n      this.skipToBottom();\n    } else if (\n      keyMap.get('Control') &&\n      !keyMap.get('Alt') &&\n      !keyMap.get('Shift') &&\n      keyMap.get('w')\n    ) {\n      keyMap.delete('w');\n    }\n  };\n\n  onKeyDownAppendTextArea = (e: React.KeyboardEvent | KeyboardEvent) => {\n    // Close Append Mode if 'Escape' is pressed\n    if (keyMap.get('Escape')) {\n      e.preventDefault();\n      keyMap.delete('Escape');\n      this.onAppendMode();\n    }\n    // Save note if Control and Enter are pressed\n    else if (keyMap.get('Control') && keyMap.get('Enter')) {\n      e.preventDefault();\n      if (this.state.useCodeMirror) {\n        this.appendTextToNote();\n      }\n    }\n    // Save note if Control and S are pressed\n    else if (keyMap.get('Control') && keyMap.get('s')) {\n      e.preventDefault();\n      if (this.state.useCodeMirror) {\n        this.appendTextToNote();\n      }\n    }\n    // Toggle Append New Line if Ctrl + Alt + N are pressed\n    else if (\n      keyMap.get('Control') &&\n      !keyMap.get('Shift') &&\n      keyMap.get('Alt') &&\n      keyMap.get('n')\n    ) {\n      e.preventDefault();\n      const newLine = document.getElementById(newLineID);\n      if (newLine) {\n        newLine.click();\n      }\n    }\n    // Toggle Append New Line if Ctrl + Alt + P are pressed\n    else if (\n      keyMap.get('Control') &&\n      !keyMap.get('Shift') &&\n      keyMap.get('Alt') &&\n      keyMap.get('p')\n    ) {\n      e.preventDefault();\n      const newParagraph = document.getElementById(newParagraphID);\n      if (newParagraph) {\n        newParagraph.click();\n      }\n    }\n  };\n\n  onKeyDownEditTextArea = (e: React.KeyboardEvent | KeyboardEvent) => {\n    // Close EditMode if 'Escape' is pressed\n    if (keyMap.get('Escape')) {\n      e.preventDefault();\n      keyMap.set('Escape', false);\n      this.onEditMode();\n    }\n  };\n\n  onKeyDownTextArea = (e: React.KeyboardEvent | KeyboardEvent) => {\n    // Add two spaces and line break if Shift and Enter are pressed\n    if (keyMap.get('Shift') && keyMap.get('Enter')) {\n      e.preventDefault();\n      document.execCommand('insertText', false, '  \\n');\n    }\n    // Add two stars if Control + b are pressed\n    else if (keyMap.get('Control') && keyMap.get('b')) {\n      e.preventDefault();\n      document.execCommand('insertText', false, '**');\n    }\n    // Add header when pressing Control + H\n    else if (keyMap.get('Control') && keyMap.get('h')) {\n      e.preventDefault();\n      document.execCommand('insertText', false, '#');\n    }\n    // Add image code if Control + Alt and i are pressed\n    else if (keyMap.get('Control') && keyMap.get('Alt') && keyMap.get('i')) {\n      e.preventDefault();\n      document.execCommand('insertText', false, '![]()');\n    }\n    // Add one stars if Control + i is pressed\n    else if (keyMap.get('Control') && keyMap.get('i')) {\n      e.preventDefault();\n      document.execCommand('insertText', false, '*');\n    }\n    // Add inline code if Control + Alt and k are pressed\n    else if (keyMap.get('Control') && keyMap.get('Alt') && keyMap.get('k')) {\n      e.preventDefault();\n      document.execCommand('insertText', false, '`');\n    }\n    // Add link if Control + k are pressed\n    else if (keyMap.get('Control') && keyMap.get('k')) {\n      e.preventDefault();\n      document.execCommand('insertText', false, '[]()');\n    }\n    // Add ordered list item if Control + Alt + l are pressed\n    else if (keyMap.get('Control') && keyMap.get('Alt') && keyMap.get('l')) {\n      e.preventDefault();\n      document.execCommand('insertText', false, '\\n1. ');\n    }\n    // Add unordered list item if Control + l are pressed\n    else if (keyMap.get('Control') && keyMap.get('l')) {\n      e.preventDefault();\n      document.execCommand('insertText', false, '\\n- ');\n    }\n    // Add strike through if Control + Alt + u are pressed\n    else if (keyMap.get('Control') && keyMap.get('Alt') && keyMap.get('u')) {\n      e.preventDefault();\n      document.execCommand('insertText', false, '~~');\n    }\n    // Add quote Control + q, Control + ' or Control + \" are pressed\n    else if (\n      (keyMap.get('Control') && keyMap.get('q')) ||\n      (keyMap.get('Control') && keyMap.get(\"'\")) ||\n      (keyMap.get('Control') && keyMap.get('\"'))\n    ) {\n      e.preventDefault();\n      document.execCommand('insertText', false, '\\n> ');\n    }\n  };\n\n  onKeyUp = (e: React.KeyboardEvent | KeyboardEvent) => {\n    keyMap.delete(e.key);\n  };\n\n  onBlur = (e: React.FocusEvent) => {\n    keyMap.clear();\n  };\n\n  render() {\n    if (!this.state.loadedMetaData) {\n      this.loadMetaData();\n    }\n    return (\n      <div\n        tabIndex={0}\n        className=\"sn-component\"\n        onKeyDown={this.onKeyDown}\n        onKeyUp={this.onKeyUp}\n        onBlur={this.onBlur}\n      >\n        {this.state.showHeader && [\n          <div id={headerID}>\n            <div className=\"sk-button-group\">\n              <button\n                type=\"button\"\n                id={editButtonID}\n                onClick={this.onEditMode}\n                title=\"Toggle Edit Mode\"\n                className={'sk-button ' + (this.state.editMode ? 'on' : 'off')}\n              >\n                <svg\n                  role=\"button\"\n                  aria-label=\"Pencil icon to toggle edit mode\"\n                  width=\"20\"\n                  height=\"20\"\n                  viewBox=\"0 0 20 20\"\n                  fill=\"none\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    d=\"M11.7167 7.5L12.5 8.28333L4.93333 15.8333H4.16667V15.0667L11.7167 7.5ZM14.7167 2.5C14.5083 2.5 14.2917 2.58333 14.1333 2.74167L12.6083 4.26667L15.7333 7.39167L17.2583 5.86667C17.5833 5.54167 17.5833 5 17.2583 4.69167L15.3083 2.74167C15.1417 2.575 14.9333 2.5 14.7167 2.5ZM11.7167 5.15833L2.5 14.375V17.5H5.625L14.8417 8.28333L11.7167 5.15833Z\"\n                    fill={\n                      this.state.editMode\n                        ? 'var(--sn-stylekit-info-color)'\n                        : 'var(--sn-stylekit-foreground-color)'\n                    }\n                  />\n                </svg>\n              </button>\n              <button\n                type=\"button\"\n                id={viewButtonID}\n                onClick={this.onViewMode}\n                title=\"Toggle View Mode\"\n                className={'sk-button ' + (this.state.viewMode ? 'on' : 'off')}\n              >\n                <svg\n                  role=\"button\"\n                  aria-label=\"Eye icon to indicate viewing\"\n                  width=\"20\"\n                  height=\"20\"\n                  viewBox=\"0 0 20 20\"\n                  fill=\"none\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    d=\"M9.99992 7.5C9.33688 7.5 8.70099 7.76339 8.23215 8.23223C7.76331 8.70107 7.49992 9.33696 7.49992 10C7.49992 10.663 7.76331 11.2989 8.23215 11.7678C8.70099 12.2366 9.33688 12.5 9.99992 12.5C10.663 12.5 11.2988 12.2366 11.7677 11.7678C12.2365 11.2989 12.4999 10.663 12.4999 10C12.4999 9.33696 12.2365 8.70107 11.7677 8.23223C11.2988 7.76339 10.663 7.5 9.99992 7.5ZM9.99992 14.1667C8.89485 14.1667 7.83504 13.7277 7.05364 12.9463C6.27224 12.1649 5.83325 11.1051 5.83325 10C5.83325 8.89493 6.27224 7.83512 7.05364 7.05372C7.83504 6.27232 8.89485 5.83333 9.99992 5.83333C11.105 5.83333 12.1648 6.27232 12.9462 7.05372C13.7276 7.83512 14.1666 8.89493 14.1666 10C14.1666 11.1051 13.7276 12.1649 12.9462 12.9463C12.1648 13.7277 11.105 14.1667 9.99992 14.1667ZM9.99992 3.75C5.83325 3.75 2.27492 6.34167 0.833252 10C2.27492 13.6583 5.83325 16.25 9.99992 16.25C14.1666 16.25 17.7249 13.6583 19.1666 10C17.7249 6.34167 14.1666 3.75 9.99992 3.75Z\"\n                    fill={\n                      this.state.viewMode\n                        ? 'var(--sn-stylekit-info-color)'\n                        : 'var(--sn-stylekit-foreground-color)'\n                    }\n                  />\n                </svg>\n              </button>\n              <button\n                type=\"button\"\n                id={appendButtonID}\n                onClick={() => this.onAppendMode()}\n                title=\"Toggle Append Mode\"\n                className={\n                  'sk-button ' + (this.state.appendMode ? 'on' : 'off')\n                }\n              >\n                <svg\n                  role=\"button\"\n                  aria-label=\"Plus icon to toggle append mode\"\n                  width=\"20\"\n                  height=\"20\"\n                  viewBox=\"0 0 20 20\"\n                  fill=\"none\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    fill-rule=\"evenodd\"\n                    clip-rule=\"evenodd\"\n                    d=\"M11.385 11.385H15.615C16.3799 11.385 17 10.7649 17 10C17 9.23507 16.3799 8.61497 15.615 8.61497H11.385V4.38503C11.385 3.6201 10.7649 3 10 3C9.23507 3 8.61497 3.6201 8.61497 4.38503V8.61497H4.38503C3.6201 8.61497 3 9.23507 3 10C3 10.7649 3.6201 11.385 4.38503 11.385H8.61497V15.615C8.61497 16.3799 9.23507 17 10 17C10.7649 17 11.385 16.3799 11.385 15.615V11.385Z\"\n                    fill={\n                      this.state.appendMode\n                        ? 'var(--sn-stylekit-info-color)'\n                        : 'var(--sn-stylekit-foreground-color)'\n                    }\n                  />\n                </svg>\n              </button>\n              <div className=\"sk-button divider\">\n                <svg\n                  role=\"img\"\n                  aria-label=\"Vertical line divider\"\n                  width=\"1\"\n                  height=\"24\"\n                  viewBox=\"0 0 1 24\"\n                  fill=\"none\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <rect\n                    width=\"1\"\n                    height=\"24\"\n                    fill={'var(--sn-stylekit-foreground-color)'}\n                  />\n                </svg>\n              </div>\n              <button\n                type=\"button\"\n                id={helpButtonID}\n                onClick={this.onToggleShowHelp}\n                title=\"Help\"\n                className={'sk-button ' + (this.state.showHelp ? 'on' : 'off')}\n              >\n                <svg\n                  role=\"button\"\n                  aria-label=\"Help icon to show help\"\n                  width=\"20\"\n                  height=\"20\"\n                  viewBox=\"0 0 20 20\"\n                  fill=\"none\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    d=\"M9.16675 15.0001H10.8334V13.3334H9.16675V15.0001ZM10.0001 1.66675C8.90573 1.66675 7.8221 1.8823 6.81105 2.30109C5.80001 2.71987 4.88135 3.3337 4.10753 4.10753C2.54472 5.67033 1.66675 7.78995 1.66675 10.0001C1.66675 12.2102 2.54472 14.3298 4.10753 15.8926C4.88135 16.6665 5.80001 17.2803 6.81105 17.6991C7.8221 18.1179 8.90573 18.3334 10.0001 18.3334C12.2102 18.3334 14.3298 17.4554 15.8926 15.8926C17.4554 14.3298 18.3334 12.2102 18.3334 10.0001C18.3334 8.90573 18.1179 7.8221 17.6991 6.81105C17.2803 5.80001 16.6665 4.88135 15.8926 4.10753C15.1188 3.3337 14.2002 2.71987 13.1891 2.30109C12.1781 1.8823 11.0944 1.66675 10.0001 1.66675ZM10.0001 16.6668C6.32508 16.6668 3.33342 13.6751 3.33342 10.0001C3.33342 6.32508 6.32508 3.33342 10.0001 3.33342C13.6751 3.33342 16.6668 6.32508 16.6668 10.0001C16.6668 13.6751 13.6751 16.6668 10.0001 16.6668ZM10.0001 5.00008C9.11603 5.00008 8.26818 5.35127 7.64306 5.97639C7.01794 6.60151 6.66675 7.44936 6.66675 8.33342H8.33342C8.33342 7.89139 8.50901 7.46747 8.82157 7.1549C9.13413 6.84234 9.55806 6.66675 10.0001 6.66675C10.4421 6.66675 10.866 6.84234 11.1786 7.1549C11.4912 7.46747 11.6667 7.89139 11.6667 8.33342C11.6667 10.0001 9.16675 9.79175 9.16675 12.5001H10.8334C10.8334 10.6251 13.3334 10.4167 13.3334 8.33342C13.3334 7.44936 12.9822 6.60151 12.3571 5.97639C11.732 5.35127 10.8841 5.00008 10.0001 5.00008Z\"\n                    fill={\n                      this.state.showHelp\n                        ? 'var(--sn-stylekit-info-color)'\n                        : 'var(--sn-stylekit-foreground-color)'\n                    }\n                  />\n                </svg>\n              </button>\n              <button\n                type=\"button\"\n                id={printButtonID}\n                onClick={this.onConfirmPrintURL}\n                title=\"Print\"\n                className={'sk-button ' + (this.state.printMode ? 'on' : 'off')}\n              >\n                <svg\n                  role=\"button\"\n                  aria-label=\"Printer icon to toggle printer\"\n                  width=\"20\"\n                  height=\"20\"\n                  viewBox=\"0 0 20 20\"\n                  fill=\"none\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    d=\"M15.0001 2.5H5.00008V5.83333H15.0001V2.5ZM15.8334 10C15.6124 10 15.4004 9.9122 15.2442 9.75592C15.0879 9.59964 15.0001 9.38768 15.0001 9.16667C15.0001 8.94565 15.0879 8.73369 15.2442 8.57741C15.4004 8.42113 15.6124 8.33333 15.8334 8.33333C16.0544 8.33333 16.2664 8.42113 16.4227 8.57741C16.579 8.73369 16.6668 8.94565 16.6668 9.16667C16.6668 9.38768 16.579 9.59964 16.4227 9.75592C16.2664 9.9122 16.0544 10 15.8334 10ZM13.3334 15.8333H6.66675V11.6667H13.3334V15.8333ZM15.8334 6.66667H4.16675C3.50371 6.66667 2.86782 6.93006 2.39898 7.3989C1.93014 7.86774 1.66675 8.50363 1.66675 9.16667V14.1667H5.00008V17.5H15.0001V14.1667H18.3334V9.16667C18.3334 8.50363 18.07 7.86774 17.6012 7.3989C17.1323 6.93006 16.4965 6.66667 15.8334 6.66667Z\"\n                    fill={\n                      this.state.printMode\n                        ? 'var(--sn-stylekit-info-color)'\n                        : 'var(--sn-stylekit-foreground-color)'\n                    }\n                  />\n                </svg>\n              </button>\n              <button\n                type=\"button\"\n                id={settingsButtonID}\n                onClick={this.onSettingsMode}\n                title=\"Settings\"\n                className={\n                  'sk-button ' + (this.state.settingsMode ? 'on' : 'off')\n                }\n              >\n                <svg\n                  role=\"button\"\n                  aria-label=\"Settings gear icon to toggle settings\"\n                  width=\"20\"\n                  height=\"20\"\n                  viewBox=\"0 0 20 20\"\n                  fill=\"none\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    d=\"M10.0001 6.66675C10.8842 6.66675 11.732 7.01794 12.3571 7.64306C12.9823 8.26818 13.3334 9.11603 13.3334 10.0001C13.3334 10.8841 12.9823 11.732 12.3571 12.3571C11.732 12.9822 10.8842 13.3334 10.0001 13.3334C9.11606 13.3334 8.26821 12.9822 7.64309 12.3571C7.01797 11.732 6.66678 10.8841 6.66678 10.0001C6.66678 9.11603 7.01797 8.26818 7.64309 7.64306C8.26821 7.01794 9.11606 6.66675 10.0001 6.66675ZM10.0001 8.33342C9.55808 8.33342 9.13416 8.50901 8.8216 8.82157C8.50904 9.13413 8.33344 9.55805 8.33344 10.0001C8.33344 10.4421 8.50904 10.866 8.8216 11.1786C9.13416 11.4912 9.55808 11.6667 10.0001 11.6667C10.4421 11.6667 10.8661 11.4912 11.1786 11.1786C11.4912 10.866 11.6668 10.4421 11.6668 10.0001C11.6668 9.55805 11.4912 9.13413 11.1786 8.82157C10.8661 8.50901 10.4421 8.33342 10.0001 8.33342ZM8.33344 18.3334C8.12511 18.3334 7.95011 18.1834 7.91678 17.9834L7.60844 15.7751C7.08344 15.5667 6.63344 15.2834 6.20011 14.9501L4.12511 15.7917C3.94178 15.8584 3.71678 15.7917 3.61678 15.6084L1.95011 12.7251C1.84178 12.5417 1.89178 12.3167 2.05011 12.1917L3.80844 10.8084L3.75011 10.0001L3.80844 9.16675L2.05011 7.80841C1.89178 7.68341 1.84178 7.45841 1.95011 7.27508L3.61678 4.39175C3.71678 4.20841 3.94178 4.13341 4.12511 4.20842L6.20011 5.04175C6.63344 4.71675 7.08344 4.43341 7.60844 4.22508L7.91678 2.01675C7.95011 1.81675 8.12511 1.66675 8.33344 1.66675H11.6668C11.8751 1.66675 12.0501 1.81675 12.0834 2.01675L12.3918 4.22508C12.9168 4.43341 13.3668 4.71675 13.8001 5.04175L15.8751 4.20842C16.0584 4.13341 16.2834 4.20841 16.3834 4.39175L18.0501 7.27508C18.1584 7.45841 18.1084 7.68341 17.9501 7.80841L16.1918 9.16675L16.2501 10.0001L16.1918 10.8334L17.9501 12.1917C18.1084 12.3167 18.1584 12.5417 18.0501 12.7251L16.3834 15.6084C16.2834 15.7917 16.0584 15.8667 15.8751 15.7917L13.8001 14.9584C13.3668 15.2834 12.9168 15.5667 12.3918 15.7751L12.0834 17.9834C12.0501 18.1834 11.8751 18.3334 11.6668 18.3334H8.33344ZM9.37511 3.33341L9.06678 5.50841C8.06678 5.71675 7.18344 6.25008 6.54178 6.99175L4.53344 6.12508L3.90844 7.20841L5.66678 8.50008C5.33344 9.47508 5.33344 10.5334 5.66678 11.5001L3.90011 12.8001L4.52511 13.8834L6.55011 13.0167C7.19178 13.7501 8.06678 14.2834 9.05844 14.4834L9.36678 16.6667H10.6334L10.9418 14.4917C11.9334 14.2834 12.8084 13.7501 13.4501 13.0167L15.4751 13.8834L16.1001 12.8001L14.3334 11.5084C14.6668 10.5334 14.6668 9.47508 14.3334 8.50008L16.0918 7.20841L15.4668 6.12508L13.4584 6.99175C12.8168 6.25008 11.9334 5.71675 10.9334 5.51675L10.6251 3.33341H9.37511Z\"\n                    fill={\n                      this.state.settingsMode\n                        ? 'var(--sn-stylekit-info-color)'\n                        : 'var(--sn-stylekit-foreground-color)'\n                    }\n                  />\n                </svg>\n              </button>\n              <div className=\"sk-button divider\">\n                <svg\n                  role=\"img\"\n                  aria-label=\"Vertical line divider\"\n                  width=\"1\"\n                  height=\"24\"\n                  viewBox=\"0 0 1 24\"\n                  fill=\"none\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <rect\n                    width=\"1\"\n                    height=\"24\"\n                    fill={'var(--sn-stylekit-foreground-color)'}\n                  />\n                </svg>\n              </div>\n              <button\n                type=\"button\"\n                id=\"scrollToBottomButtonHeader\"\n                onClick={this.skipToBottom}\n                title=\"Scroll to Bottom\"\n                className={'sk-button off'}\n              >\n                <svg\n                  role=\"button\"\n                  aria-label=\"Arrow pointing down for scroll to bottom button\"\n                  width=\"20\"\n                  height=\"20\"\n                  viewBox=\"0 0 20 20\"\n                  fill=\"none\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    d=\"M6.17622 7.15015L10.0012 10.9751L13.8262 7.15015L15.0012 8.33348L10.0012 13.3335L5.00122 8.33348L6.17622 7.15015Z\"\n                    fill={'var(--sn-stylekit-foreground-color)'}\n                  />\n                </svg>\n              </button>\n              <button\n                type=\"button\"\n                id=\"scrollToTopButtonHeader\"\n                onClick={this.skipToTop}\n                title=\"Scroll to Top\"\n                className={'sk-button off'}\n              >\n                <svg\n                  role=\"button\"\n                  aria-label=\"Arrow pointing up for scroll to top button\"\n                  width=\"20\"\n                  height=\"20\"\n                  viewBox=\"0 0 20 20\"\n                  fill=\"none\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    d=\"M13.826 13.3335L10.001 9.5085L6.17597 13.3335L5.00097 12.1502L10.001 7.15017L15.001 12.1502L13.826 13.3335Z\"\n                    fill={'var(--sn-stylekit-foreground-color)'}\n                  />\n                </svg>\n              </button>\n            </div>\n          </div>,\n        ]}\n        <div\n          id={contentID}\n          className={\n            'content ' + (this.state.printMode ? 'printModeOn' : 'printModeOff')\n          }\n        >\n          {this.state.settingsMode && (\n            <Settings\n              cancelText=\"Cancel\"\n              confirmText=\"Save\"\n              customStyles={this.state.customStyles}\n              debugMode={debugMode}\n              fontEdit={this.state.fontEdit}\n              fontSize={this.state.fontSize}\n              fontView={this.state.fontView}\n              helpLink={'https://appendeditor.com/#settings'}\n              keyMap={keyMap}\n              onConfirm={this.onSaveSettings}\n              onCancel={this.onSettingsMode}\n              appendRows={this.state.appendRows}\n              title={`Append Editor Settings`}\n              MonacoEditorLanguage={this.state.MonacoEditorLanguage}\n              useCodeMirror={this.state.useCodeMirror}\n              useMonacoEditor={this.state.useMonacoEditor}\n            />\n          )}\n          {this.state.editMode && !this.state.refreshEdit && (\n            <EditNote\n              fontEdit={this.state.fontEdit}\n              fontSize={this.state.fontSize}\n              keyMap={keyMap}\n              MonacoEditorLanguage={this.state.MonacoEditorLanguage}\n              onKeyDown={this.onKeyDown}\n              onKeyDownEditTextArea={this.onKeyDownEditTextArea}\n              onKeyDownTextArea={this.onKeyDownTextArea}\n              onKeyUp={this.onKeyUp}\n              printMode={this.state.printMode}\n              saveText={this.saveText}\n              text={this.state.text}\n              useMonacoEditor={this.state.useMonacoEditor}\n              viewMode={this.state.viewMode}\n            />\n          )}\n          {this.state.editMode && this.state.refreshEdit && (\n            <EditNote\n              fontEdit={this.state.fontEdit}\n              fontSize={this.state.fontSize}\n              keyMap={keyMap}\n              MonacoEditorLanguage={this.state.MonacoEditorLanguage}\n              onKeyDown={this.onKeyDown}\n              onKeyDownEditTextArea={this.onKeyDownEditTextArea}\n              onKeyDownTextArea={this.onKeyDownTextArea}\n              onKeyUp={this.onKeyUp}\n              printMode={this.state.printMode}\n              saveText={this.saveText}\n              text={this.state.text}\n              useMonacoEditor={this.state.useMonacoEditor}\n              viewMode={this.state.viewMode}\n            />\n          )}\n          {(this.state.viewMode || this.state.printMode) &&\n            !this.state.refreshView && (\n              <ViewNote\n                fontView={this.state.fontView}\n                MonacoEditorLanguage={this.state.MonacoEditorLanguage}\n                printMode={this.state.printMode}\n                printURL={this.state.printURL}\n                showHelp={this.state.showHelp}\n                text={this.state.text}\n                useMonacoEditor={this.state.useMonacoEditor}\n              />\n            )}\n          {(this.state.viewMode || this.state.printMode) &&\n            this.state.refreshView && (\n              <ViewNote\n                fontView={this.state.fontView}\n                MonacoEditorLanguage={this.state.MonacoEditorLanguage}\n                printMode={this.state.printMode}\n                printURL={this.state.printURL}\n                showHelp={this.state.showHelp}\n                text={this.state.text}\n                useMonacoEditor={this.state.useMonacoEditor}\n              />\n            )}\n          {this.state.confirmPrintURL && (\n            <PrintDialog\n              title={`Would you like to print URLs?`}\n              onUndo={this.onCancelPrint}\n              onConfirm={this.printURLTrue}\n              onCancel={this.printURLFalse}\n              helpLink={'https://appendeditor.com/#printing'}\n              confirmText=\"Yes, print URLs\"\n              cancelText=\"No, thanks\"\n            />\n          )}\n          {this.state.showDiff && [\n            <MonacoDiffEditor\n              text={this.state.text}\n              modifiedText={this.state.appendText}\n              saveText={this.saveText}\n            />,\n          ]}\n        </div>\n        {this.state.showAppendix && [\n          <div\n            id={appendixID}\n            className={\n              'appendix ' +\n              (this.state.printMode ? 'printModeOn' : 'printModeOff')\n            }\n          >\n            {this.state.appendMode && (\n              <AppendText\n                appendTextToNote={this.appendTextToNote}\n                autoSaveAppendText={this.autoSaveAppendText}\n                autoSaveCheckBoxes={this.autoSaveCheckBoxes}\n                debugMode={debugMode}\n                fontEdit={this.state.fontEdit}\n                fontSize={this.state.fontSize}\n                keyMap={keyMap}\n                appendNewLine={this.state.appendNewLine}\n                appendNewParagraph={this.state.appendNewParagraph}\n                MonacoEditorLanguage={this.state.MonacoEditorLanguage}\n                onKeyDown={this.onKeyDown}\n                onKeyDownAppendTextArea={this.onKeyDownAppendTextArea}\n                onKeyDownTextArea={this.onKeyDownTextArea}\n                onKeyUp={this.onKeyUp}\n                printMode={this.state.printMode}\n                appendRows={this.state.appendRows}\n                text={this.state.appendText}\n                useMonacoEditor={this.state.useMonacoEditor}\n              />\n            )}\n            <button\n              type=\"button\"\n              id=\"scrollToTopButton\"\n              onClick={this.scrollToTop}\n              className=\"sk-button info\"\n            >\n              <div className=\"sk-label\"> ▲ </div>\n            </button>\n            <button\n              type=\"button\"\n              id=\"scrollToBottomButton\"\n              onClick={this.scrollToBottom}\n              className=\"sk-button info\"\n            >\n              <div className=\"sk-label\"> ▼ </div>\n            </button>\n          </div>,\n        ]}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\nimport reportWebVitals from './reportWebVitals';\n\nimport AppendEditor from './components/AppendEditor';\nimport './stylesheets/main.scss';\nReactDOM.render(\n  <React.StrictMode>\n    <AppendEditor />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}